
Birlestirme_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011100  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009ec  080112a0  080112a0  000212a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011c8c  08011c8c  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08011c8c  08011c8c  00021c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011c94  08011c94  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011c94  08011c94  00021c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011c98  08011c98  00021c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08011c9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002934  200001f8  08011e94  000301f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002b2c  08011e94  00032b2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c9f1  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b84  00000000  00000000  0004cc19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c8  00000000  00000000  000507a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001748  00000000  00000000  00052068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c1cb  00000000  00000000  000537b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002073b  00000000  00000000  0006f97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3834  00000000  00000000  000900b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001338ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e24  00000000  00000000  0013393c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011288 	.word	0x08011288

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	08011288 	.word	0x08011288

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9f5 	b.w	80010a4 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9aa 	b.w	80010a4 <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9d08      	ldr	r5, [sp, #32]
 8000dda:	4604      	mov	r4, r0
 8000ddc:	468e      	mov	lr, r1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d14d      	bne.n	8000e7e <__udivmoddi4+0xaa>
 8000de2:	428a      	cmp	r2, r1
 8000de4:	4694      	mov	ip, r2
 8000de6:	d969      	bls.n	8000ebc <__udivmoddi4+0xe8>
 8000de8:	fab2 f282 	clz	r2, r2
 8000dec:	b152      	cbz	r2, 8000e04 <__udivmoddi4+0x30>
 8000dee:	fa01 f302 	lsl.w	r3, r1, r2
 8000df2:	f1c2 0120 	rsb	r1, r2, #32
 8000df6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000e02:	4094      	lsls	r4, r2
 8000e04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e08:	0c21      	lsrs	r1, r4, #16
 8000e0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e0e:	fa1f f78c 	uxth.w	r7, ip
 8000e12:	fb08 e316 	mls	r3, r8, r6, lr
 8000e16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e1a:	fb06 f107 	mul.w	r1, r6, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d90a      	bls.n	8000e38 <__udivmoddi4+0x64>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2a:	f080 811f 	bcs.w	800106c <__udivmoddi4+0x298>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 811c 	bls.w	800106c <__udivmoddi4+0x298>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e48:	fb00 f707 	mul.w	r7, r0, r7
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	d90a      	bls.n	8000e66 <__udivmoddi4+0x92>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	f080 810a 	bcs.w	8001070 <__udivmoddi4+0x29c>
 8000e5c:	42a7      	cmp	r7, r4
 8000e5e:	f240 8107 	bls.w	8001070 <__udivmoddi4+0x29c>
 8000e62:	4464      	add	r4, ip
 8000e64:	3802      	subs	r0, #2
 8000e66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e6a:	1be4      	subs	r4, r4, r7
 8000e6c:	2600      	movs	r6, #0
 8000e6e:	b11d      	cbz	r5, 8000e78 <__udivmoddi4+0xa4>
 8000e70:	40d4      	lsrs	r4, r2
 8000e72:	2300      	movs	r3, #0
 8000e74:	e9c5 4300 	strd	r4, r3, [r5]
 8000e78:	4631      	mov	r1, r6
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d909      	bls.n	8000e96 <__udivmoddi4+0xc2>
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	f000 80ef 	beq.w	8001066 <__udivmoddi4+0x292>
 8000e88:	2600      	movs	r6, #0
 8000e8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8e:	4630      	mov	r0, r6
 8000e90:	4631      	mov	r1, r6
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	fab3 f683 	clz	r6, r3
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d14a      	bne.n	8000f34 <__udivmoddi4+0x160>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d302      	bcc.n	8000ea8 <__udivmoddi4+0xd4>
 8000ea2:	4282      	cmp	r2, r0
 8000ea4:	f200 80f9 	bhi.w	800109a <__udivmoddi4+0x2c6>
 8000ea8:	1a84      	subs	r4, r0, r2
 8000eaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000eae:	2001      	movs	r0, #1
 8000eb0:	469e      	mov	lr, r3
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	d0e0      	beq.n	8000e78 <__udivmoddi4+0xa4>
 8000eb6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eba:	e7dd      	b.n	8000e78 <__udivmoddi4+0xa4>
 8000ebc:	b902      	cbnz	r2, 8000ec0 <__udivmoddi4+0xec>
 8000ebe:	deff      	udf	#255	; 0xff
 8000ec0:	fab2 f282 	clz	r2, r2
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	f040 8092 	bne.w	8000fee <__udivmoddi4+0x21a>
 8000eca:	eba1 010c 	sub.w	r1, r1, ip
 8000ece:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed2:	fa1f fe8c 	uxth.w	lr, ip
 8000ed6:	2601      	movs	r6, #1
 8000ed8:	0c20      	lsrs	r0, r4, #16
 8000eda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ede:	fb07 1113 	mls	r1, r7, r3, r1
 8000ee2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee6:	fb0e f003 	mul.w	r0, lr, r3
 8000eea:	4288      	cmp	r0, r1
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x12c>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ef6:	d202      	bcs.n	8000efe <__udivmoddi4+0x12a>
 8000ef8:	4288      	cmp	r0, r1
 8000efa:	f200 80cb 	bhi.w	8001094 <__udivmoddi4+0x2c0>
 8000efe:	4643      	mov	r3, r8
 8000f00:	1a09      	subs	r1, r1, r0
 8000f02:	b2a4      	uxth	r4, r4
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1110 	mls	r1, r7, r0, r1
 8000f0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f10:	fb0e fe00 	mul.w	lr, lr, r0
 8000f14:	45a6      	cmp	lr, r4
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x156>
 8000f18:	eb1c 0404 	adds.w	r4, ip, r4
 8000f1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f20:	d202      	bcs.n	8000f28 <__udivmoddi4+0x154>
 8000f22:	45a6      	cmp	lr, r4
 8000f24:	f200 80bb 	bhi.w	800109e <__udivmoddi4+0x2ca>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	eba4 040e 	sub.w	r4, r4, lr
 8000f2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f32:	e79c      	b.n	8000e6e <__udivmoddi4+0x9a>
 8000f34:	f1c6 0720 	rsb	r7, r6, #32
 8000f38:	40b3      	lsls	r3, r6
 8000f3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f42:	fa20 f407 	lsr.w	r4, r0, r7
 8000f46:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4a:	431c      	orrs	r4, r3
 8000f4c:	40f9      	lsrs	r1, r7
 8000f4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f52:	fa00 f306 	lsl.w	r3, r0, r6
 8000f56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f5a:	0c20      	lsrs	r0, r4, #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fb09 1118 	mls	r1, r9, r8, r1
 8000f64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f68:	fb08 f00e 	mul.w	r0, r8, lr
 8000f6c:	4288      	cmp	r0, r1
 8000f6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f72:	d90b      	bls.n	8000f8c <__udivmoddi4+0x1b8>
 8000f74:	eb1c 0101 	adds.w	r1, ip, r1
 8000f78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f7c:	f080 8088 	bcs.w	8001090 <__udivmoddi4+0x2bc>
 8000f80:	4288      	cmp	r0, r1
 8000f82:	f240 8085 	bls.w	8001090 <__udivmoddi4+0x2bc>
 8000f86:	f1a8 0802 	sub.w	r8, r8, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1a09      	subs	r1, r1, r0
 8000f8e:	b2a4      	uxth	r4, r4
 8000f90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f94:	fb09 1110 	mls	r1, r9, r0, r1
 8000f98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa0:	458e      	cmp	lr, r1
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x1e2>
 8000fa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fac:	d26c      	bcs.n	8001088 <__udivmoddi4+0x2b4>
 8000fae:	458e      	cmp	lr, r1
 8000fb0:	d96a      	bls.n	8001088 <__udivmoddi4+0x2b4>
 8000fb2:	3802      	subs	r0, #2
 8000fb4:	4461      	add	r1, ip
 8000fb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fba:	fba0 9402 	umull	r9, r4, r0, r2
 8000fbe:	eba1 010e 	sub.w	r1, r1, lr
 8000fc2:	42a1      	cmp	r1, r4
 8000fc4:	46c8      	mov	r8, r9
 8000fc6:	46a6      	mov	lr, r4
 8000fc8:	d356      	bcc.n	8001078 <__udivmoddi4+0x2a4>
 8000fca:	d053      	beq.n	8001074 <__udivmoddi4+0x2a0>
 8000fcc:	b15d      	cbz	r5, 8000fe6 <__udivmoddi4+0x212>
 8000fce:	ebb3 0208 	subs.w	r2, r3, r8
 8000fd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fda:	fa22 f306 	lsr.w	r3, r2, r6
 8000fde:	40f1      	lsrs	r1, r6
 8000fe0:	431f      	orrs	r7, r3
 8000fe2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fe6:	2600      	movs	r6, #0
 8000fe8:	4631      	mov	r1, r6
 8000fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fee:	f1c2 0320 	rsb	r3, r2, #32
 8000ff2:	40d8      	lsrs	r0, r3
 8000ff4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ff8:	fa21 f303 	lsr.w	r3, r1, r3
 8000ffc:	4091      	lsls	r1, r2
 8000ffe:	4301      	orrs	r1, r0
 8001000:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001004:	fa1f fe8c 	uxth.w	lr, ip
 8001008:	fbb3 f0f7 	udiv	r0, r3, r7
 800100c:	fb07 3610 	mls	r6, r7, r0, r3
 8001010:	0c0b      	lsrs	r3, r1, #16
 8001012:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001016:	fb00 f60e 	mul.w	r6, r0, lr
 800101a:	429e      	cmp	r6, r3
 800101c:	fa04 f402 	lsl.w	r4, r4, r2
 8001020:	d908      	bls.n	8001034 <__udivmoddi4+0x260>
 8001022:	eb1c 0303 	adds.w	r3, ip, r3
 8001026:	f100 38ff 	add.w	r8, r0, #4294967295
 800102a:	d22f      	bcs.n	800108c <__udivmoddi4+0x2b8>
 800102c:	429e      	cmp	r6, r3
 800102e:	d92d      	bls.n	800108c <__udivmoddi4+0x2b8>
 8001030:	3802      	subs	r0, #2
 8001032:	4463      	add	r3, ip
 8001034:	1b9b      	subs	r3, r3, r6
 8001036:	b289      	uxth	r1, r1
 8001038:	fbb3 f6f7 	udiv	r6, r3, r7
 800103c:	fb07 3316 	mls	r3, r7, r6, r3
 8001040:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001044:	fb06 f30e 	mul.w	r3, r6, lr
 8001048:	428b      	cmp	r3, r1
 800104a:	d908      	bls.n	800105e <__udivmoddi4+0x28a>
 800104c:	eb1c 0101 	adds.w	r1, ip, r1
 8001050:	f106 38ff 	add.w	r8, r6, #4294967295
 8001054:	d216      	bcs.n	8001084 <__udivmoddi4+0x2b0>
 8001056:	428b      	cmp	r3, r1
 8001058:	d914      	bls.n	8001084 <__udivmoddi4+0x2b0>
 800105a:	3e02      	subs	r6, #2
 800105c:	4461      	add	r1, ip
 800105e:	1ac9      	subs	r1, r1, r3
 8001060:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001064:	e738      	b.n	8000ed8 <__udivmoddi4+0x104>
 8001066:	462e      	mov	r6, r5
 8001068:	4628      	mov	r0, r5
 800106a:	e705      	b.n	8000e78 <__udivmoddi4+0xa4>
 800106c:	4606      	mov	r6, r0
 800106e:	e6e3      	b.n	8000e38 <__udivmoddi4+0x64>
 8001070:	4618      	mov	r0, r3
 8001072:	e6f8      	b.n	8000e66 <__udivmoddi4+0x92>
 8001074:	454b      	cmp	r3, r9
 8001076:	d2a9      	bcs.n	8000fcc <__udivmoddi4+0x1f8>
 8001078:	ebb9 0802 	subs.w	r8, r9, r2
 800107c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001080:	3801      	subs	r0, #1
 8001082:	e7a3      	b.n	8000fcc <__udivmoddi4+0x1f8>
 8001084:	4646      	mov	r6, r8
 8001086:	e7ea      	b.n	800105e <__udivmoddi4+0x28a>
 8001088:	4620      	mov	r0, r4
 800108a:	e794      	b.n	8000fb6 <__udivmoddi4+0x1e2>
 800108c:	4640      	mov	r0, r8
 800108e:	e7d1      	b.n	8001034 <__udivmoddi4+0x260>
 8001090:	46d0      	mov	r8, sl
 8001092:	e77b      	b.n	8000f8c <__udivmoddi4+0x1b8>
 8001094:	3b02      	subs	r3, #2
 8001096:	4461      	add	r1, ip
 8001098:	e732      	b.n	8000f00 <__udivmoddi4+0x12c>
 800109a:	4630      	mov	r0, r6
 800109c:	e709      	b.n	8000eb2 <__udivmoddi4+0xde>
 800109e:	4464      	add	r4, ip
 80010a0:	3802      	subs	r0, #2
 80010a2:	e742      	b.n	8000f2a <__udivmoddi4+0x156>

080010a4 <__aeabi_idiv0>:
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08c      	sub	sp, #48	; 0x30
 80010ac:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	2319      	movs	r3, #25
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	463b      	mov	r3, r7
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2301      	movs	r3, #1
 80010be:	2288      	movs	r2, #136	; 0x88
 80010c0:	21ec      	movs	r1, #236	; 0xec
 80010c2:	4857      	ldr	r0, [pc, #348]	; (8001220 <TrimRead+0x178>)
 80010c4:	f005 f8a6 	bl	8006214 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80010c8:	463b      	mov	r3, r7
 80010ca:	3319      	adds	r3, #25
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295
 80010d0:	9202      	str	r2, [sp, #8]
 80010d2:	2207      	movs	r2, #7
 80010d4:	9201      	str	r2, [sp, #4]
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	22e1      	movs	r2, #225	; 0xe1
 80010dc:	21ec      	movs	r1, #236	; 0xec
 80010de:	4850      	ldr	r0, [pc, #320]	; (8001220 <TrimRead+0x178>)
 80010e0:	f005 f898 	bl	8006214 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	783b      	ldrb	r3, [r7, #0]
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <TrimRead+0x17c>)
 80010f6:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	78bb      	ldrb	r3, [r7, #2]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21a      	sxth	r2, r3
 8001106:	4b48      	ldr	r3, [pc, #288]	; (8001228 <TrimRead+0x180>)
 8001108:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800110a:	797b      	ldrb	r3, [r7, #5]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b21a      	sxth	r2, r3
 8001110:	793b      	ldrb	r3, [r7, #4]
 8001112:	b21b      	sxth	r3, r3
 8001114:	4313      	orrs	r3, r2
 8001116:	b21a      	sxth	r2, r3
 8001118:	4b44      	ldr	r3, [pc, #272]	; (800122c <TrimRead+0x184>)
 800111a:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	797b      	ldrb	r3, [r7, #5]
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21b      	sxth	r3, r3
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b40      	ldr	r3, [pc, #256]	; (8001230 <TrimRead+0x188>)
 800112e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001130:	7a7b      	ldrb	r3, [r7, #9]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21a      	sxth	r2, r3
 8001136:	79bb      	ldrb	r3, [r7, #6]
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21a      	sxth	r2, r3
 800113e:	4b3d      	ldr	r3, [pc, #244]	; (8001234 <TrimRead+0x18c>)
 8001140:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001142:	7afb      	ldrb	r3, [r7, #11]
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	b21a      	sxth	r2, r3
 8001148:	7abb      	ldrb	r3, [r7, #10]
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21a      	sxth	r2, r3
 8001150:	4b39      	ldr	r3, [pc, #228]	; (8001238 <TrimRead+0x190>)
 8001152:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001154:	7b7b      	ldrb	r3, [r7, #13]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b21a      	sxth	r2, r3
 800115a:	7b3b      	ldrb	r3, [r7, #12]
 800115c:	b21b      	sxth	r3, r3
 800115e:	4313      	orrs	r3, r2
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b36      	ldr	r3, [pc, #216]	; (800123c <TrimRead+0x194>)
 8001164:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	b21a      	sxth	r2, r3
 800116c:	7bbb      	ldrb	r3, [r7, #14]
 800116e:	b21b      	sxth	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b32      	ldr	r3, [pc, #200]	; (8001240 <TrimRead+0x198>)
 8001176:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001178:	7c7b      	ldrb	r3, [r7, #17]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	b21a      	sxth	r2, r3
 800117e:	7c3b      	ldrb	r3, [r7, #16]
 8001180:	b21b      	sxth	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b21a      	sxth	r2, r3
 8001186:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <TrimRead+0x19c>)
 8001188:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 800118a:	7cfb      	ldrb	r3, [r7, #19]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b21a      	sxth	r2, r3
 8001190:	7cbb      	ldrb	r3, [r7, #18]
 8001192:	b21b      	sxth	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	b21a      	sxth	r2, r3
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <TrimRead+0x1a0>)
 800119a:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 800119c:	7d7b      	ldrb	r3, [r7, #21]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	7d3b      	ldrb	r3, [r7, #20]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	4b28      	ldr	r3, [pc, #160]	; (800124c <TrimRead+0x1a4>)
 80011ac:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	7dbb      	ldrb	r3, [r7, #22]
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <TrimRead+0x1a8>)
 80011be:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80011c0:	7e3b      	ldrb	r3, [r7, #24]
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <TrimRead+0x1ac>)
 80011c6:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80011c8:	7ebb      	ldrb	r3, [r7, #26]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	7e7b      	ldrb	r3, [r7, #25]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <TrimRead+0x1b0>)
 80011d8:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 80011da:	7efb      	ldrb	r3, [r7, #27]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <TrimRead+0x1b4>)
 80011e0:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80011e2:	7f3b      	ldrb	r3, [r7, #28]
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	7f7b      	ldrb	r3, [r7, #29]
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	f003 030f 	and.w	r3, r3, #15
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <TrimRead+0x1b8>)
 80011f8:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 80011fa:	7fbb      	ldrb	r3, [r7, #30]
 80011fc:	011b      	lsls	r3, r3, #4
 80011fe:	b21a      	sxth	r2, r3
 8001200:	7f7b      	ldrb	r3, [r7, #29]
 8001202:	091b      	lsrs	r3, r3, #4
 8001204:	b2db      	uxtb	r3, r3
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <TrimRead+0x1bc>)
 800120e:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001210:	7ffb      	ldrb	r3, [r7, #31]
 8001212:	b21a      	sxth	r2, r3
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <TrimRead+0x1c0>)
 8001216:	801a      	strh	r2, [r3, #0]
}
 8001218:	bf00      	nop
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200002f0 	.word	0x200002f0
 8001224:	20000224 	.word	0x20000224
 8001228:	2000022c 	.word	0x2000022c
 800122c:	2000022e 	.word	0x2000022e
 8001230:	20000226 	.word	0x20000226
 8001234:	20000230 	.word	0x20000230
 8001238:	20000232 	.word	0x20000232
 800123c:	20000234 	.word	0x20000234
 8001240:	20000236 	.word	0x20000236
 8001244:	20000238 	.word	0x20000238
 8001248:	2000023a 	.word	0x2000023a
 800124c:	2000023c 	.word	0x2000023c
 8001250:	2000023e 	.word	0x2000023e
 8001254:	20000228 	.word	0x20000228
 8001258:	20000240 	.word	0x20000240
 800125c:	2000022a 	.word	0x2000022a
 8001260:	20000242 	.word	0x20000242
 8001264:	20000244 	.word	0x20000244
 8001268:	20000246 	.word	0x20000246

0800126c <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af04      	add	r7, sp, #16
 8001272:	4604      	mov	r4, r0
 8001274:	4608      	mov	r0, r1
 8001276:	4611      	mov	r1, r2
 8001278:	461a      	mov	r2, r3
 800127a:	4623      	mov	r3, r4
 800127c:	71fb      	strb	r3, [r7, #7]
 800127e:	4603      	mov	r3, r0
 8001280:	71bb      	strb	r3, [r7, #6]
 8001282:	460b      	mov	r3, r1
 8001284:	717b      	strb	r3, [r7, #5]
 8001286:	4613      	mov	r3, r2
 8001288:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 800128a:	f7ff ff0d 	bl	80010a8 <TrimRead>


	uint8_t datatowrite = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8001296:	23b6      	movs	r3, #182	; 0xb6
 8001298:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	f107 030f 	add.w	r3, r7, #15
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	22e0      	movs	r2, #224	; 0xe0
 80012ae:	21ec      	movs	r1, #236	; 0xec
 80012b0:	4858      	ldr	r0, [pc, #352]	; (8001414 <BME280_Config+0x1a8>)
 80012b2:	f004 feb5 	bl	8006020 <HAL_I2C_Mem_Write>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <BME280_Config+0x56>
	{
		return -1;
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
 80012c0:	e0a3      	b.n	800140a <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 80012c2:	2064      	movs	r0, #100	; 0x64
 80012c4:	f003 fc6c 	bl	8004ba0 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80012c8:	797b      	ldrb	r3, [r7, #5]
 80012ca:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d0:	9302      	str	r3, [sp, #8]
 80012d2:	2301      	movs	r3, #1
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	f107 030f 	add.w	r3, r7, #15
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2301      	movs	r3, #1
 80012de:	22f2      	movs	r2, #242	; 0xf2
 80012e0:	21ec      	movs	r1, #236	; 0xec
 80012e2:	484c      	ldr	r0, [pc, #304]	; (8001414 <BME280_Config+0x1a8>)
 80012e4:	f004 fe9c 	bl	8006020 <HAL_I2C_Mem_Write>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d002      	beq.n	80012f4 <BME280_Config+0x88>
	{
		return -1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	e08a      	b.n	800140a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80012f4:	2064      	movs	r0, #100	; 0x64
 80012f6:	f003 fc53 	bl	8004ba0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	2301      	movs	r3, #1
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	f107 030e 	add.w	r3, r7, #14
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2301      	movs	r3, #1
 800130c:	22f2      	movs	r2, #242	; 0xf2
 800130e:	21ec      	movs	r1, #236	; 0xec
 8001310:	4840      	ldr	r0, [pc, #256]	; (8001414 <BME280_Config+0x1a8>)
 8001312:	f004 ff7f 	bl	8006214 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001316:	7bba      	ldrb	r2, [r7, #14]
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	429a      	cmp	r2, r3
 800131c:	d002      	beq.n	8001324 <BME280_Config+0xb8>
	{
		return -1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	e072      	b.n	800140a <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001324:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001328:	015b      	lsls	r3, r3, #5
 800132a:	b25a      	sxtb	r2, r3
 800132c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	b25b      	sxtb	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b25b      	sxtb	r3, r3
 8001338:	b2db      	uxtb	r3, r3
 800133a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800133c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	2301      	movs	r3, #1
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	f107 030f 	add.w	r3, r7, #15
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	22f5      	movs	r2, #245	; 0xf5
 8001350:	21ec      	movs	r1, #236	; 0xec
 8001352:	4830      	ldr	r0, [pc, #192]	; (8001414 <BME280_Config+0x1a8>)
 8001354:	f004 fe64 	bl	8006020 <HAL_I2C_Mem_Write>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d002      	beq.n	8001364 <BME280_Config+0xf8>
	{
		return -1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e052      	b.n	800140a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001364:	2064      	movs	r0, #100	; 0x64
 8001366:	f003 fc1b 	bl	8004ba0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	9302      	str	r3, [sp, #8]
 8001370:	2301      	movs	r3, #1
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	f107 030e 	add.w	r3, r7, #14
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	22f5      	movs	r2, #245	; 0xf5
 800137e:	21ec      	movs	r1, #236	; 0xec
 8001380:	4824      	ldr	r0, [pc, #144]	; (8001414 <BME280_Config+0x1a8>)
 8001382:	f004 ff47 	bl	8006214 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001386:	7bba      	ldrb	r2, [r7, #14]
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	429a      	cmp	r2, r3
 800138c:	d002      	beq.n	8001394 <BME280_Config+0x128>
	{
		return -1;
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	e03a      	b.n	800140a <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	015b      	lsls	r3, r3, #5
 8001398:	b25a      	sxtb	r2, r3
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	b25b      	sxtb	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b25a      	sxtb	r2, r3
 80013a4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b25b      	sxtb	r3, r3
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80013b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b4:	9302      	str	r3, [sp, #8]
 80013b6:	2301      	movs	r3, #1
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	f107 030f 	add.w	r3, r7, #15
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2301      	movs	r3, #1
 80013c2:	22f4      	movs	r2, #244	; 0xf4
 80013c4:	21ec      	movs	r1, #236	; 0xec
 80013c6:	4813      	ldr	r0, [pc, #76]	; (8001414 <BME280_Config+0x1a8>)
 80013c8:	f004 fe2a 	bl	8006020 <HAL_I2C_Mem_Write>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <BME280_Config+0x16c>
	{
		return -1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e018      	b.n	800140a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80013d8:	2064      	movs	r0, #100	; 0x64
 80013da:	f003 fbe1 	bl	8004ba0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	2301      	movs	r3, #1
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	f107 030e 	add.w	r3, r7, #14
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2301      	movs	r3, #1
 80013f0:	22f4      	movs	r2, #244	; 0xf4
 80013f2:	21ec      	movs	r1, #236	; 0xec
 80013f4:	4807      	ldr	r0, [pc, #28]	; (8001414 <BME280_Config+0x1a8>)
 80013f6:	f004 ff0d 	bl	8006214 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013fa:	7bba      	ldrb	r2, [r7, #14]
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d002      	beq.n	8001408 <BME280_Config+0x19c>
	{
		return -1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	e000      	b.n	800140a <BME280_Config+0x19e>
	}

	return 0;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	bd90      	pop	{r4, r7, pc}
 8001412:	bf00      	nop
 8001414:	200002f0 	.word	0x200002f0

08001418 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c2, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	9302      	str	r3, [sp, #8]
 8001424:	2301      	movs	r3, #1
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <BMEReadRaw+0x8c>)
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2301      	movs	r3, #1
 800142e:	22d0      	movs	r2, #208	; 0xd0
 8001430:	21ec      	movs	r1, #236	; 0xec
 8001432:	481d      	ldr	r0, [pc, #116]	; (80014a8 <BMEReadRaw+0x90>)
 8001434:	f004 feee 	bl	8006214 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <BMEReadRaw+0x8c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b60      	cmp	r3, #96	; 0x60
 800143e:	d12a      	bne.n	8001496 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
 8001444:	9302      	str	r3, [sp, #8]
 8001446:	2308      	movs	r3, #8
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	463b      	mov	r3, r7
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	22f7      	movs	r2, #247	; 0xf7
 8001452:	21ec      	movs	r1, #236	; 0xec
 8001454:	4814      	ldr	r0, [pc, #80]	; (80014a8 <BMEReadRaw+0x90>)
 8001456:	f004 fedd 	bl	8006214 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800145a:	783b      	ldrb	r3, [r7, #0]
 800145c:	031a      	lsls	r2, r3, #12
 800145e:	787b      	ldrb	r3, [r7, #1]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	4313      	orrs	r3, r2
 8001464:	78ba      	ldrb	r2, [r7, #2]
 8001466:	0912      	lsrs	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	4313      	orrs	r3, r2
 800146c:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <BMEReadRaw+0x94>)
 800146e:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	031a      	lsls	r2, r3, #12
 8001474:	793b      	ldrb	r3, [r7, #4]
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	4313      	orrs	r3, r2
 800147a:	797a      	ldrb	r2, [r7, #5]
 800147c:	0912      	lsrs	r2, r2, #4
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	4313      	orrs	r3, r2
 8001482:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <BMEReadRaw+0x98>)
 8001484:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001486:	79bb      	ldrb	r3, [r7, #6]
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	79fa      	ldrb	r2, [r7, #7]
 800148c:	4313      	orrs	r3, r2
 800148e:	4a09      	ldr	r2, [pc, #36]	; (80014b4 <BMEReadRaw+0x9c>)
 8001490:	6013      	str	r3, [r2, #0]

		return 0;
 8001492:	2300      	movs	r3, #0
 8001494:	e001      	b.n	800149a <BMEReadRaw+0x82>
	}

	else return -1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000214 	.word	0x20000214
 80014a8:	200002f0 	.word	0x200002f0
 80014ac:	2000021c 	.word	0x2000021c
 80014b0:	20000218 	.word	0x20000218
 80014b4:	20000220 	.word	0x20000220

080014b8 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	10da      	asrs	r2, r3, #3
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <BME280_compensate_T_int32+0x74>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	4a18      	ldr	r2, [pc, #96]	; (8001530 <BME280_compensate_T_int32+0x78>)
 80014ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014d2:	fb02 f303 	mul.w	r3, r2, r3
 80014d6:	12db      	asrs	r3, r3, #11
 80014d8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	111b      	asrs	r3, r3, #4
 80014de:	4a13      	ldr	r2, [pc, #76]	; (800152c <BME280_compensate_T_int32+0x74>)
 80014e0:	8812      	ldrh	r2, [r2, #0]
 80014e2:	1a9b      	subs	r3, r3, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	1112      	asrs	r2, r2, #4
 80014e8:	4910      	ldr	r1, [pc, #64]	; (800152c <BME280_compensate_T_int32+0x74>)
 80014ea:	8809      	ldrh	r1, [r1, #0]
 80014ec:	1a52      	subs	r2, r2, r1
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	131b      	asrs	r3, r3, #12
 80014f4:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <BME280_compensate_T_int32+0x7c>)
 80014f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	139b      	asrs	r3, r3, #14
 8001500:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4413      	add	r3, r2
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <BME280_compensate_T_int32+0x80>)
 800150a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <BME280_compensate_T_int32+0x80>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	3380      	adds	r3, #128	; 0x80
 8001518:	121b      	asrs	r3, r3, #8
 800151a:	60fb      	str	r3, [r7, #12]
	return T;
 800151c:	68fb      	ldr	r3, [r7, #12]
}
 800151e:	4618      	mov	r0, r3
 8001520:	371c      	adds	r7, #28
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000224 	.word	0x20000224
 8001530:	2000022c 	.word	0x2000022c
 8001534:	2000022e 	.word	0x2000022e
 8001538:	20000248 	.word	0x20000248

0800153c <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800153c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001540:	b0ca      	sub	sp, #296	; 0x128
 8001542:	af00      	add	r7, sp, #0
 8001544:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001548:	4baf      	ldr	r3, [pc, #700]	; (8001808 <BME280_compensate_P_int64+0x2cc>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	17da      	asrs	r2, r3, #31
 800154e:	461c      	mov	r4, r3
 8001550:	4615      	mov	r5, r2
 8001552:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001556:	f145 3bff 	adc.w	fp, r5, #4294967295
 800155a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800155e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001562:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001566:	fb03 f102 	mul.w	r1, r3, r2
 800156a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800156e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001572:	fb02 f303 	mul.w	r3, r2, r3
 8001576:	18ca      	adds	r2, r1, r3
 8001578:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800157c:	fba3 8903 	umull	r8, r9, r3, r3
 8001580:	eb02 0309 	add.w	r3, r2, r9
 8001584:	4699      	mov	r9, r3
 8001586:	4ba1      	ldr	r3, [pc, #644]	; (800180c <BME280_compensate_P_int64+0x2d0>)
 8001588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158c:	b21b      	sxth	r3, r3
 800158e:	17da      	asrs	r2, r3, #31
 8001590:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001594:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001598:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800159c:	4603      	mov	r3, r0
 800159e:	fb03 f209 	mul.w	r2, r3, r9
 80015a2:	460b      	mov	r3, r1
 80015a4:	fb08 f303 	mul.w	r3, r8, r3
 80015a8:	4413      	add	r3, r2
 80015aa:	4602      	mov	r2, r0
 80015ac:	fba8 1202 	umull	r1, r2, r8, r2
 80015b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80015b4:	460a      	mov	r2, r1
 80015b6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80015ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015be:	4413      	add	r3, r2
 80015c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015c4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80015c8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80015cc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80015d0:	4b8f      	ldr	r3, [pc, #572]	; (8001810 <BME280_compensate_P_int64+0x2d4>)
 80015d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	17da      	asrs	r2, r3, #31
 80015da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80015de:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80015e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015e6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80015ea:	462a      	mov	r2, r5
 80015ec:	fb02 f203 	mul.w	r2, r2, r3
 80015f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015f4:	4621      	mov	r1, r4
 80015f6:	fb01 f303 	mul.w	r3, r1, r3
 80015fa:	441a      	add	r2, r3
 80015fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001600:	4621      	mov	r1, r4
 8001602:	fba3 1301 	umull	r1, r3, r3, r1
 8001606:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800160a:	460b      	mov	r3, r1
 800160c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001614:	18d3      	adds	r3, r2, r3
 8001616:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800161a:	f04f 0000 	mov.w	r0, #0
 800161e:	f04f 0100 	mov.w	r1, #0
 8001622:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001626:	462b      	mov	r3, r5
 8001628:	0459      	lsls	r1, r3, #17
 800162a:	4623      	mov	r3, r4
 800162c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001630:	4623      	mov	r3, r4
 8001632:	0458      	lsls	r0, r3, #17
 8001634:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001638:	1814      	adds	r4, r2, r0
 800163a:	643c      	str	r4, [r7, #64]	; 0x40
 800163c:	414b      	adcs	r3, r1
 800163e:	647b      	str	r3, [r7, #68]	; 0x44
 8001640:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001644:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001648:	4b72      	ldr	r3, [pc, #456]	; (8001814 <BME280_compensate_P_int64+0x2d8>)
 800164a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164e:	b21b      	sxth	r3, r3
 8001650:	17da      	asrs	r2, r3, #31
 8001652:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001656:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800165a:	f04f 0000 	mov.w	r0, #0
 800165e:	f04f 0100 	mov.w	r1, #0
 8001662:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001666:	00d9      	lsls	r1, r3, #3
 8001668:	2000      	movs	r0, #0
 800166a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800166e:	1814      	adds	r4, r2, r0
 8001670:	63bc      	str	r4, [r7, #56]	; 0x38
 8001672:	414b      	adcs	r3, r1
 8001674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001676:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800167a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800167e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001682:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001686:	fb03 f102 	mul.w	r1, r3, r2
 800168a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800168e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	18ca      	adds	r2, r1, r3
 8001698:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800169c:	fba3 1303 	umull	r1, r3, r3, r3
 80016a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016a4:	460b      	mov	r3, r1
 80016a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80016aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016ae:	18d3      	adds	r3, r2, r3
 80016b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016b4:	4b58      	ldr	r3, [pc, #352]	; (8001818 <BME280_compensate_P_int64+0x2dc>)
 80016b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	17da      	asrs	r2, r3, #31
 80016be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016c6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80016ca:	462b      	mov	r3, r5
 80016cc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80016d0:	4642      	mov	r2, r8
 80016d2:	fb02 f203 	mul.w	r2, r2, r3
 80016d6:	464b      	mov	r3, r9
 80016d8:	4621      	mov	r1, r4
 80016da:	fb01 f303 	mul.w	r3, r1, r3
 80016de:	4413      	add	r3, r2
 80016e0:	4622      	mov	r2, r4
 80016e2:	4641      	mov	r1, r8
 80016e4:	fba2 1201 	umull	r1, r2, r2, r1
 80016e8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80016ec:	460a      	mov	r2, r1
 80016ee:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80016f2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80016f6:	4413      	add	r3, r2
 80016f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80016fc:	f04f 0000 	mov.w	r0, #0
 8001700:	f04f 0100 	mov.w	r1, #0
 8001704:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001708:	4623      	mov	r3, r4
 800170a:	0a18      	lsrs	r0, r3, #8
 800170c:	462b      	mov	r3, r5
 800170e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001712:	462b      	mov	r3, r5
 8001714:	1219      	asrs	r1, r3, #8
 8001716:	4b41      	ldr	r3, [pc, #260]	; (800181c <BME280_compensate_P_int64+0x2e0>)
 8001718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171c:	b21b      	sxth	r3, r3
 800171e:	17da      	asrs	r2, r3, #31
 8001720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001724:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001728:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800172c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001730:	464a      	mov	r2, r9
 8001732:	fb02 f203 	mul.w	r2, r2, r3
 8001736:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800173a:	4644      	mov	r4, r8
 800173c:	fb04 f303 	mul.w	r3, r4, r3
 8001740:	441a      	add	r2, r3
 8001742:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001746:	4644      	mov	r4, r8
 8001748:	fba3 4304 	umull	r4, r3, r3, r4
 800174c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001750:	4623      	mov	r3, r4
 8001752:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001756:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800175a:	18d3      	adds	r3, r2, r3
 800175c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800176c:	464c      	mov	r4, r9
 800176e:	0323      	lsls	r3, r4, #12
 8001770:	4644      	mov	r4, r8
 8001772:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001776:	4644      	mov	r4, r8
 8001778:	0322      	lsls	r2, r4, #12
 800177a:	1884      	adds	r4, r0, r2
 800177c:	633c      	str	r4, [r7, #48]	; 0x30
 800177e:	eb41 0303 	adc.w	r3, r1, r3
 8001782:	637b      	str	r3, [r7, #52]	; 0x34
 8001784:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001788:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800178c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001790:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001794:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001798:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800179c:	4b20      	ldr	r3, [pc, #128]	; (8001820 <BME280_compensate_P_int64+0x2e4>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	2200      	movs	r2, #0
 80017a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017ac:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80017b0:	462b      	mov	r3, r5
 80017b2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80017b6:	4642      	mov	r2, r8
 80017b8:	fb02 f203 	mul.w	r2, r2, r3
 80017bc:	464b      	mov	r3, r9
 80017be:	4621      	mov	r1, r4
 80017c0:	fb01 f303 	mul.w	r3, r1, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	4622      	mov	r2, r4
 80017c8:	4641      	mov	r1, r8
 80017ca:	fba2 1201 	umull	r1, r2, r2, r1
 80017ce:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80017d2:	460a      	mov	r2, r1
 80017d4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80017d8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80017dc:	4413      	add	r3, r2
 80017de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80017ee:	4629      	mov	r1, r5
 80017f0:	104a      	asrs	r2, r1, #1
 80017f2:	4629      	mov	r1, r5
 80017f4:	17cb      	asrs	r3, r1, #31
 80017f6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 80017fa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017fe:	4313      	orrs	r3, r2
 8001800:	d110      	bne.n	8001824 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001802:	2300      	movs	r3, #0
 8001804:	e154      	b.n	8001ab0 <BME280_compensate_P_int64+0x574>
 8001806:	bf00      	nop
 8001808:	20000248 	.word	0x20000248
 800180c:	20000238 	.word	0x20000238
 8001810:	20000236 	.word	0x20000236
 8001814:	20000234 	.word	0x20000234
 8001818:	20000232 	.word	0x20000232
 800181c:	20000230 	.word	0x20000230
 8001820:	20000226 	.word	0x20000226
	}
	p = 1048576-adc_P;
 8001824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001828:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800182c:	17da      	asrs	r2, r3, #31
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001830:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001832:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001836:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800183a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800183e:	105b      	asrs	r3, r3, #1
 8001840:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001844:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001848:	07db      	lsls	r3, r3, #31
 800184a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800184e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001852:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001856:	4621      	mov	r1, r4
 8001858:	1a89      	subs	r1, r1, r2
 800185a:	67b9      	str	r1, [r7, #120]	; 0x78
 800185c:	4629      	mov	r1, r5
 800185e:	eb61 0303 	sbc.w	r3, r1, r3
 8001862:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001864:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001868:	4622      	mov	r2, r4
 800186a:	462b      	mov	r3, r5
 800186c:	1891      	adds	r1, r2, r2
 800186e:	6239      	str	r1, [r7, #32]
 8001870:	415b      	adcs	r3, r3
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
 8001874:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001878:	4621      	mov	r1, r4
 800187a:	1851      	adds	r1, r2, r1
 800187c:	61b9      	str	r1, [r7, #24]
 800187e:	4629      	mov	r1, r5
 8001880:	414b      	adcs	r3, r1
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001890:	4649      	mov	r1, r9
 8001892:	018b      	lsls	r3, r1, #6
 8001894:	4641      	mov	r1, r8
 8001896:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800189a:	4641      	mov	r1, r8
 800189c:	018a      	lsls	r2, r1, #6
 800189e:	4641      	mov	r1, r8
 80018a0:	1889      	adds	r1, r1, r2
 80018a2:	6139      	str	r1, [r7, #16]
 80018a4:	4649      	mov	r1, r9
 80018a6:	eb43 0101 	adc.w	r1, r3, r1
 80018aa:	6179      	str	r1, [r7, #20]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018b8:	4649      	mov	r1, r9
 80018ba:	008b      	lsls	r3, r1, #2
 80018bc:	4641      	mov	r1, r8
 80018be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018c2:	4641      	mov	r1, r8
 80018c4:	008a      	lsls	r2, r1, #2
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	4603      	mov	r3, r0
 80018cc:	4622      	mov	r2, r4
 80018ce:	189b      	adds	r3, r3, r2
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	460b      	mov	r3, r1
 80018d4:	462a      	mov	r2, r5
 80018d6:	eb42 0303 	adc.w	r3, r2, r3
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80018e8:	4649      	mov	r1, r9
 80018ea:	008b      	lsls	r3, r1, #2
 80018ec:	4641      	mov	r1, r8
 80018ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018f2:	4641      	mov	r1, r8
 80018f4:	008a      	lsls	r2, r1, #2
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	4603      	mov	r3, r0
 80018fc:	4622      	mov	r2, r4
 80018fe:	189b      	adds	r3, r3, r2
 8001900:	673b      	str	r3, [r7, #112]	; 0x70
 8001902:	462b      	mov	r3, r5
 8001904:	460a      	mov	r2, r1
 8001906:	eb42 0303 	adc.w	r3, r2, r3
 800190a:	677b      	str	r3, [r7, #116]	; 0x74
 800190c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001910:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001914:	f7ff f9c0 	bl	8000c98 <__aeabi_ldivmod>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001920:	4b66      	ldr	r3, [pc, #408]	; (8001abc <BME280_compensate_P_int64+0x580>)
 8001922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001926:	b21b      	sxth	r3, r3
 8001928:	17da      	asrs	r2, r3, #31
 800192a:	66bb      	str	r3, [r7, #104]	; 0x68
 800192c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800192e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001932:	f04f 0000 	mov.w	r0, #0
 8001936:	f04f 0100 	mov.w	r1, #0
 800193a:	0b50      	lsrs	r0, r2, #13
 800193c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001940:	1359      	asrs	r1, r3, #13
 8001942:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001946:	462b      	mov	r3, r5
 8001948:	fb00 f203 	mul.w	r2, r0, r3
 800194c:	4623      	mov	r3, r4
 800194e:	fb03 f301 	mul.w	r3, r3, r1
 8001952:	4413      	add	r3, r2
 8001954:	4622      	mov	r2, r4
 8001956:	fba2 1200 	umull	r1, r2, r2, r0
 800195a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800195e:	460a      	mov	r2, r1
 8001960:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001964:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001968:	4413      	add	r3, r2
 800196a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800196e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001972:	f04f 0000 	mov.w	r0, #0
 8001976:	f04f 0100 	mov.w	r1, #0
 800197a:	0b50      	lsrs	r0, r2, #13
 800197c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001980:	1359      	asrs	r1, r3, #13
 8001982:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001986:	462b      	mov	r3, r5
 8001988:	fb00 f203 	mul.w	r2, r0, r3
 800198c:	4623      	mov	r3, r4
 800198e:	fb03 f301 	mul.w	r3, r3, r1
 8001992:	4413      	add	r3, r2
 8001994:	4622      	mov	r2, r4
 8001996:	fba2 1200 	umull	r1, r2, r2, r0
 800199a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800199e:	460a      	mov	r2, r1
 80019a0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80019a4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80019a8:	4413      	add	r3, r2
 80019aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80019ba:	4621      	mov	r1, r4
 80019bc:	0e4a      	lsrs	r2, r1, #25
 80019be:	4629      	mov	r1, r5
 80019c0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019c4:	4629      	mov	r1, r5
 80019c6:	164b      	asrs	r3, r1, #25
 80019c8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80019cc:	4b3c      	ldr	r3, [pc, #240]	; (8001ac0 <BME280_compensate_P_int64+0x584>)
 80019ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d2:	b21b      	sxth	r3, r3
 80019d4:	17da      	asrs	r2, r3, #31
 80019d6:	663b      	str	r3, [r7, #96]	; 0x60
 80019d8:	667a      	str	r2, [r7, #100]	; 0x64
 80019da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019de:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019e2:	462a      	mov	r2, r5
 80019e4:	fb02 f203 	mul.w	r2, r2, r3
 80019e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019ec:	4621      	mov	r1, r4
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80019f8:	4621      	mov	r1, r4
 80019fa:	fba2 1201 	umull	r1, r2, r2, r1
 80019fe:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001a02:	460a      	mov	r2, r1
 8001a04:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a08:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a1e:	4621      	mov	r1, r4
 8001a20:	0cca      	lsrs	r2, r1, #19
 8001a22:	4629      	mov	r1, r5
 8001a24:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a28:	4629      	mov	r1, r5
 8001a2a:	14cb      	asrs	r3, r1, #19
 8001a2c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a30:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a34:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a38:	1884      	adds	r4, r0, r2
 8001a3a:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a3c:	eb41 0303 	adc.w	r3, r1, r3
 8001a40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a42:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a46:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	1889      	adds	r1, r1, r2
 8001a4e:	6539      	str	r1, [r7, #80]	; 0x50
 8001a50:	4629      	mov	r1, r5
 8001a52:	eb43 0101 	adc.w	r1, r3, r1
 8001a56:	6579      	str	r1, [r7, #84]	; 0x54
 8001a58:	f04f 0000 	mov.w	r0, #0
 8001a5c:	f04f 0100 	mov.w	r1, #0
 8001a60:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a64:	4623      	mov	r3, r4
 8001a66:	0a18      	lsrs	r0, r3, #8
 8001a68:	462b      	mov	r3, r5
 8001a6a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a6e:	462b      	mov	r3, r5
 8001a70:	1219      	asrs	r1, r3, #8
 8001a72:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <BME280_compensate_P_int64+0x588>)
 8001a74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	17da      	asrs	r2, r3, #31
 8001a7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a7e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001a8c:	464c      	mov	r4, r9
 8001a8e:	0123      	lsls	r3, r4, #4
 8001a90:	4644      	mov	r4, r8
 8001a92:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a96:	4644      	mov	r4, r8
 8001a98:	0122      	lsls	r2, r4, #4
 8001a9a:	1884      	adds	r4, r0, r2
 8001a9c:	603c      	str	r4, [r7, #0]
 8001a9e:	eb41 0303 	adc.w	r3, r1, r3
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001aa8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001aac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001abc:	2000023e 	.word	0x2000023e
 8001ac0:	2000023c 	.word	0x2000023c
 8001ac4:	2000023a 	.word	0x2000023a

08001ac8 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001ad0:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <bme280_compensate_H_int32+0xbc>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001ad8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	039a      	lsls	r2, r3, #14
 8001ade:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <bme280_compensate_H_int32+0xc0>)
 8001ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae4:	051b      	lsls	r3, r3, #20
 8001ae6:	1ad2      	subs	r2, r2, r3
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <bme280_compensate_H_int32+0xc4>)
 8001aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aee:	4619      	mov	r1, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	fb01 f303 	mul.w	r3, r1, r3
 8001af6:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001af8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001afc:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001afe:	4a24      	ldr	r2, [pc, #144]	; (8001b90 <bme280_compensate_H_int32+0xc8>)
 8001b00:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b04:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b0c:	1292      	asrs	r2, r2, #10
 8001b0e:	4921      	ldr	r1, [pc, #132]	; (8001b94 <bme280_compensate_H_int32+0xcc>)
 8001b10:	8809      	ldrh	r1, [r1, #0]
 8001b12:	4608      	mov	r0, r1
 8001b14:	68f9      	ldr	r1, [r7, #12]
 8001b16:	fb00 f101 	mul.w	r1, r0, r1
 8001b1a:	12c9      	asrs	r1, r1, #11
 8001b1c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001b20:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001b24:	1292      	asrs	r2, r2, #10
 8001b26:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001b2a:	491b      	ldr	r1, [pc, #108]	; (8001b98 <bme280_compensate_H_int32+0xd0>)
 8001b2c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b30:	fb01 f202 	mul.w	r2, r1, r2
 8001b34:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001b38:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
 8001b3e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	13db      	asrs	r3, r3, #15
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	13d2      	asrs	r2, r2, #15
 8001b48:	fb02 f303 	mul.w	r3, r2, r3
 8001b4c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001b4e:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <bme280_compensate_H_int32+0xd4>)
 8001b50:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b52:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001b56:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b64:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001b6c:	bfa8      	it	ge
 8001b6e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b72:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	131b      	asrs	r3, r3, #12
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	20000248 	.word	0x20000248
 8001b88:	20000242 	.word	0x20000242
 8001b8c:	20000244 	.word	0x20000244
 8001b90:	20000246 	.word	0x20000246
 8001b94:	2000022a 	.word	0x2000022a
 8001b98:	20000240 	.word	0x20000240
 8001b9c:	20000228 	.word	0x20000228

08001ba0 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001ba4:	f7ff fc38 	bl	8001418 <BMEReadRaw>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d163      	bne.n	8001c76 <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001bae:	4b39      	ldr	r3, [pc, #228]	; (8001c94 <BME280_Measure+0xf4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bb6:	d104      	bne.n	8001bc2 <BME280_Measure+0x22>
 8001bb8:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <BME280_Measure+0xf8>)
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	e016      	b.n	8001bf0 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001bc2:	4b34      	ldr	r3, [pc, #208]	; (8001c94 <BME280_Measure+0xf4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fc76 	bl	80014b8 <BME280_compensate_T_int32>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fcb0 	bl	8000534 <__aeabi_i2d>
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	4b30      	ldr	r3, [pc, #192]	; (8001c9c <BME280_Measure+0xfc>)
 8001bda:	f7fe fe3f 	bl	800085c <__aeabi_ddiv>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7ff f807 	bl	8000bf8 <__aeabi_d2f>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4a2a      	ldr	r2, [pc, #168]	; (8001c98 <BME280_Measure+0xf8>)
 8001bee:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001bf0:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <BME280_Measure+0x100>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bf8:	d104      	bne.n	8001c04 <BME280_Measure+0x64>
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <BME280_Measure+0x104>)
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	e016      	b.n	8001c32 <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001c04:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <BME280_Measure+0x100>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fc97 	bl	800153c <BME280_compensate_P_int64>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc7f 	bl	8000514 <__aeabi_ui2d>
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <BME280_Measure+0x108>)
 8001c1c:	f7fe fe1e 	bl	800085c <__aeabi_ddiv>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	f7fe ffe6 	bl	8000bf8 <__aeabi_d2f>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ca4 <BME280_Measure+0x104>)
 8001c30:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <BME280_Measure+0x10c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c3a:	d104      	bne.n	8001c46 <BME280_Measure+0xa6>
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <BME280_Measure+0x110>)
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001c44:	e023      	b.n	8001c8e <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001c46:	4b19      	ldr	r3, [pc, #100]	; (8001cac <BME280_Measure+0x10c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff3c 	bl	8001ac8 <bme280_compensate_H_int32>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fc5e 	bl	8000514 <__aeabi_ui2d>
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <BME280_Measure+0x114>)
 8001c5e:	f7fe fdfd 	bl	800085c <__aeabi_ddiv>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7fe ffc5 	bl	8000bf8 <__aeabi_d2f>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <BME280_Measure+0x110>)
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	e00b      	b.n	8001c8e <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <BME280_Measure+0x110>)
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <BME280_Measure+0x110>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a08      	ldr	r2, [pc, #32]	; (8001ca4 <BME280_Measure+0x104>)
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <BME280_Measure+0x104>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <BME280_Measure+0xf8>)
 8001c8c:	6013      	str	r3, [r2, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000218 	.word	0x20000218
 8001c98:	2000080c 	.word	0x2000080c
 8001c9c:	40590000 	.word	0x40590000
 8001ca0:	2000021c 	.word	0x2000021c
 8001ca4:	20000810 	.word	0x20000810
 8001ca8:	40700000 	.word	0x40700000
 8001cac:	20000220 	.word	0x20000220
 8001cb0:	20000814 	.word	0x20000814
 8001cb4:	40900000 	.word	0x40900000

08001cb8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	4803      	ldr	r0, [pc, #12]	; (8001cd0 <SELECT+0x18>)
 8001cc2:	f003 fd13 	bl	80056ec <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f002 ff6a 	bl	8004ba0 <HAL_Delay>
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40020400 	.word	0x40020400

08001cd4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	2101      	movs	r1, #1
 8001cdc:	4803      	ldr	r0, [pc, #12]	; (8001cec <DESELECT+0x18>)
 8001cde:	f003 fd05 	bl	80056ec <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f002 ff5c 	bl	8004ba0 <HAL_Delay>
}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40020400 	.word	0x40020400

08001cf0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001cfa:	bf00      	nop
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <SPI_TxByte+0x30>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d1f8      	bne.n	8001cfc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001d0a:	1df9      	adds	r1, r7, #7
 8001d0c:	2364      	movs	r3, #100	; 0x64
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4803      	ldr	r0, [pc, #12]	; (8001d20 <SPI_TxByte+0x30>)
 8001d12:	f005 fe64 	bl	80079de <HAL_SPI_Transmit>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000344 	.word	0x20000344

08001d24 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d30:	bf00      	nop
 8001d32:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <SPI_TxBuffer+0x30>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d1f8      	bne.n	8001d32 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001d40:	887a      	ldrh	r2, [r7, #2]
 8001d42:	2364      	movs	r3, #100	; 0x64
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4803      	ldr	r0, [pc, #12]	; (8001d54 <SPI_TxBuffer+0x30>)
 8001d48:	f005 fe49 	bl	80079de <HAL_SPI_Transmit>
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000344 	.word	0x20000344

08001d58 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001d5e:	23ff      	movs	r3, #255	; 0xff
 8001d60:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d62:	bf00      	nop
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <SPI_RxByte+0x34>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d1f8      	bne.n	8001d64 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001d72:	1dba      	adds	r2, r7, #6
 8001d74:	1df9      	adds	r1, r7, #7
 8001d76:	2364      	movs	r3, #100	; 0x64
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	4803      	ldr	r0, [pc, #12]	; (8001d8c <SPI_RxByte+0x34>)
 8001d7e:	f005 ff6a 	bl	8007c56 <HAL_SPI_TransmitReceive>

	return data;
 8001d82:	79bb      	ldrb	r3, [r7, #6]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000344 	.word	0x20000344

08001d90 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001d98:	f7ff ffde 	bl	8001d58 <SPI_RxByte>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	461a      	mov	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	701a      	strb	r2, [r3, #0]
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <SD_ReadyWait+0x30>)
 8001db4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001db8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001dba:	f7ff ffcd 	bl	8001d58 <SPI_RxByte>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	2bff      	cmp	r3, #255	; 0xff
 8001dc6:	d004      	beq.n	8001dd2 <SD_ReadyWait+0x26>
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <SD_ReadyWait+0x30>)
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f3      	bne.n	8001dba <SD_ReadyWait+0xe>

	return res;
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	200028d6 	.word	0x200028d6

08001de0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001de6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001dea:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001dec:	f7ff ff72 	bl	8001cd4 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	e005      	b.n	8001e02 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001df6:	20ff      	movs	r0, #255	; 0xff
 8001df8:	f7ff ff7a 	bl	8001cf0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b09      	cmp	r3, #9
 8001e06:	ddf6      	ble.n	8001df6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001e08:	f7ff ff56 	bl	8001cb8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001e0c:	2340      	movs	r3, #64	; 0x40
 8001e0e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001e20:	2395      	movs	r3, #149	; 0x95
 8001e22:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001e24:	463b      	mov	r3, r7
 8001e26:	2106      	movs	r1, #6
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff7b 	bl	8001d24 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001e2e:	e002      	b.n	8001e36 <SD_PowerOn+0x56>
	{
		cnt--;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001e36:	f7ff ff8f 	bl	8001d58 <SPI_RxByte>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d002      	beq.n	8001e46 <SD_PowerOn+0x66>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f4      	bne.n	8001e30 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001e46:	f7ff ff45 	bl	8001cd4 <DESELECT>
	SPI_TxByte(0XFF);
 8001e4a:	20ff      	movs	r0, #255	; 0xff
 8001e4c:	f7ff ff50 	bl	8001cf0 <SPI_TxByte>

	PowerFlag = 1;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <SD_PowerOn+0x80>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	2000024d 	.word	0x2000024d

08001e64 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <SD_PowerOff+0x14>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	2000024d 	.word	0x2000024d

08001e7c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <SD_CheckPower+0x14>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	2000024d 	.word	0x2000024d

08001e94 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <SD_RxDataBlock+0x5c>)
 8001ea0:	22c8      	movs	r2, #200	; 0xc8
 8001ea2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001ea4:	f7ff ff58 	bl	8001d58 <SPI_RxByte>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	2bff      	cmp	r3, #255	; 0xff
 8001eb0:	d104      	bne.n	8001ebc <SD_RxDataBlock+0x28>
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <SD_RxDataBlock+0x5c>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f3      	bne.n	8001ea4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	2bfe      	cmp	r3, #254	; 0xfe
 8001ec0:	d001      	beq.n	8001ec6 <SD_RxDataBlock+0x32>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	e00f      	b.n	8001ee6 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5f 	bl	8001d90 <SPI_RxBytePtr>
	} while(len--);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	1e5a      	subs	r2, r3, #1
 8001ed6:	603a      	str	r2, [r7, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f4      	bne.n	8001ec6 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8001edc:	f7ff ff3c 	bl	8001d58 <SPI_RxByte>
	SPI_RxByte();
 8001ee0:	f7ff ff3a 	bl	8001d58 <SPI_RxByte>

	return TRUE;
 8001ee4:	2301      	movs	r3, #1
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200028d4 	.word	0x200028d4

08001ef4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001f04:	f7ff ff52 	bl	8001dac <SD_ReadyWait>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2bff      	cmp	r3, #255	; 0xff
 8001f0c:	d001      	beq.n	8001f12 <SD_TxDataBlock+0x1e>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e02f      	b.n	8001f72 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff feeb 	bl	8001cf0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	2bfd      	cmp	r3, #253	; 0xfd
 8001f1e:	d020      	beq.n	8001f62 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001f20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff fefd 	bl	8001d24 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001f2a:	f7ff ff15 	bl	8001d58 <SPI_RxByte>
		SPI_RxByte();
 8001f2e:	f7ff ff13 	bl	8001d58 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001f32:	e00b      	b.n	8001f4c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001f34:	f7ff ff10 	bl	8001d58 <SPI_RxByte>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	f003 031f 	and.w	r3, r3, #31
 8001f42:	2b05      	cmp	r3, #5
 8001f44:	d006      	beq.n	8001f54 <SD_TxDataBlock+0x60>
			i++;
 8001f46:	7bbb      	ldrb	r3, [r7, #14]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001f4c:	7bbb      	ldrb	r3, [r7, #14]
 8001f4e:	2b40      	cmp	r3, #64	; 0x40
 8001f50:	d9f0      	bls.n	8001f34 <SD_TxDataBlock+0x40>
 8001f52:	e000      	b.n	8001f56 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001f54:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001f56:	bf00      	nop
 8001f58:	f7ff fefe 	bl	8001d58 <SPI_RxByte>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0fa      	beq.n	8001f58 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	f003 031f 	and.w	r3, r3, #31
 8001f68:	2b05      	cmp	r3, #5
 8001f6a:	d101      	bne.n	8001f70 <SD_TxDataBlock+0x7c>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e000      	b.n	8001f72 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	6039      	str	r1, [r7, #0]
 8001f84:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001f86:	f7ff ff11 	bl	8001dac <SD_ReadyWait>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2bff      	cmp	r3, #255	; 0xff
 8001f8e:	d001      	beq.n	8001f94 <SD_SendCmd+0x1a>
 8001f90:	23ff      	movs	r3, #255	; 0xff
 8001f92:	e042      	b.n	800201a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff feaa 	bl	8001cf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	0e1b      	lsrs	r3, r3, #24
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fea4 	bl	8001cf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	0c1b      	lsrs	r3, r3, #16
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fe9e 	bl	8001cf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fe98 	bl	8001cf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fe93 	bl	8001cf0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	2b40      	cmp	r3, #64	; 0x40
 8001fce:	d102      	bne.n	8001fd6 <SD_SendCmd+0x5c>
 8001fd0:	2395      	movs	r3, #149	; 0x95
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	e007      	b.n	8001fe6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	2b48      	cmp	r3, #72	; 0x48
 8001fda:	d102      	bne.n	8001fe2 <SD_SendCmd+0x68>
 8001fdc:	2387      	movs	r3, #135	; 0x87
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	e001      	b.n	8001fe6 <SD_SendCmd+0x6c>
	else crc = 1;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fe81 	bl	8001cf0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	2b4c      	cmp	r3, #76	; 0x4c
 8001ff2:	d101      	bne.n	8001ff8 <SD_SendCmd+0x7e>
 8001ff4:	f7ff feb0 	bl	8001d58 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001ff8:	230a      	movs	r3, #10
 8001ffa:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001ffc:	f7ff feac 	bl	8001d58 <SPI_RxByte>
 8002000:	4603      	mov	r3, r0
 8002002:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8002004:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002008:	2b00      	cmp	r3, #0
 800200a:	da05      	bge.n	8002018 <SD_SendCmd+0x9e>
 800200c:	7bbb      	ldrb	r3, [r7, #14]
 800200e:	3b01      	subs	r3, #1
 8002010:	73bb      	strb	r3, [r7, #14]
 8002012:	7bbb      	ldrb	r3, [r7, #14]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f1      	bne.n	8001ffc <SD_SendCmd+0x82>

	return res;
 8002018:	7b7b      	ldrb	r3, [r7, #13]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <SD_disk_initialize+0x14>
 8002034:	2301      	movs	r3, #1
 8002036:	e0d6      	b.n	80021e6 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8002038:	4b6d      	ldr	r3, [pc, #436]	; (80021f0 <SD_disk_initialize+0x1cc>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <SD_disk_initialize+0x2a>
 8002046:	4b6a      	ldr	r3, [pc, #424]	; (80021f0 <SD_disk_initialize+0x1cc>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	e0cb      	b.n	80021e6 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800204e:	f7ff fec7 	bl	8001de0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8002052:	f7ff fe31 	bl	8001cb8 <SELECT>

	/* check disk type */
	type = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800205a:	2100      	movs	r1, #0
 800205c:	2040      	movs	r0, #64	; 0x40
 800205e:	f7ff ff8c 	bl	8001f7a <SD_SendCmd>
 8002062:	4603      	mov	r3, r0
 8002064:	2b01      	cmp	r3, #1
 8002066:	f040 80a6 	bne.w	80021b6 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800206a:	4b62      	ldr	r3, [pc, #392]	; (80021f4 <SD_disk_initialize+0x1d0>)
 800206c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002070:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8002072:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002076:	2048      	movs	r0, #72	; 0x48
 8002078:	f7ff ff7f 	bl	8001f7a <SD_SendCmd>
 800207c:	4603      	mov	r3, r0
 800207e:	2b01      	cmp	r3, #1
 8002080:	d158      	bne.n	8002134 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
 8002086:	e00c      	b.n	80020a2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8002088:	7bfc      	ldrb	r4, [r7, #15]
 800208a:	f7ff fe65 	bl	8001d58 <SPI_RxByte>
 800208e:	4603      	mov	r3, r0
 8002090:	461a      	mov	r2, r3
 8002092:	f104 0310 	add.w	r3, r4, #16
 8002096:	443b      	add	r3, r7
 8002098:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	3301      	adds	r3, #1
 80020a0:	73fb      	strb	r3, [r7, #15]
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d9ef      	bls.n	8002088 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80020a8:	7abb      	ldrb	r3, [r7, #10]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	f040 8083 	bne.w	80021b6 <SD_disk_initialize+0x192>
 80020b0:	7afb      	ldrb	r3, [r7, #11]
 80020b2:	2baa      	cmp	r3, #170	; 0xaa
 80020b4:	d17f      	bne.n	80021b6 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80020b6:	2100      	movs	r1, #0
 80020b8:	2077      	movs	r0, #119	; 0x77
 80020ba:	f7ff ff5e 	bl	8001f7a <SD_SendCmd>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d807      	bhi.n	80020d4 <SD_disk_initialize+0xb0>
 80020c4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80020c8:	2069      	movs	r0, #105	; 0x69
 80020ca:	f7ff ff56 	bl	8001f7a <SD_SendCmd>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80020d4:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <SD_disk_initialize+0x1d0>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1eb      	bne.n	80020b6 <SD_disk_initialize+0x92>
 80020de:	e000      	b.n	80020e2 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80020e0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80020e2:	4b44      	ldr	r3, [pc, #272]	; (80021f4 <SD_disk_initialize+0x1d0>)
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d064      	beq.n	80021b6 <SD_disk_initialize+0x192>
 80020ec:	2100      	movs	r1, #0
 80020ee:	207a      	movs	r0, #122	; 0x7a
 80020f0:	f7ff ff43 	bl	8001f7a <SD_SendCmd>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d15d      	bne.n	80021b6 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	73fb      	strb	r3, [r7, #15]
 80020fe:	e00c      	b.n	800211a <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8002100:	7bfc      	ldrb	r4, [r7, #15]
 8002102:	f7ff fe29 	bl	8001d58 <SPI_RxByte>
 8002106:	4603      	mov	r3, r0
 8002108:	461a      	mov	r2, r3
 800210a:	f104 0310 	add.w	r3, r4, #16
 800210e:	443b      	add	r3, r7
 8002110:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	3301      	adds	r3, #1
 8002118:	73fb      	strb	r3, [r7, #15]
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	2b03      	cmp	r3, #3
 800211e:	d9ef      	bls.n	8002100 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8002120:	7a3b      	ldrb	r3, [r7, #8]
 8002122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <SD_disk_initialize+0x10a>
 800212a:	230c      	movs	r3, #12
 800212c:	e000      	b.n	8002130 <SD_disk_initialize+0x10c>
 800212e:	2304      	movs	r3, #4
 8002130:	73bb      	strb	r3, [r7, #14]
 8002132:	e040      	b.n	80021b6 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8002134:	2100      	movs	r1, #0
 8002136:	2077      	movs	r0, #119	; 0x77
 8002138:	f7ff ff1f 	bl	8001f7a <SD_SendCmd>
 800213c:	4603      	mov	r3, r0
 800213e:	2b01      	cmp	r3, #1
 8002140:	d808      	bhi.n	8002154 <SD_disk_initialize+0x130>
 8002142:	2100      	movs	r1, #0
 8002144:	2069      	movs	r0, #105	; 0x69
 8002146:	f7ff ff18 	bl	8001f7a <SD_SendCmd>
 800214a:	4603      	mov	r3, r0
 800214c:	2b01      	cmp	r3, #1
 800214e:	d801      	bhi.n	8002154 <SD_disk_initialize+0x130>
 8002150:	2302      	movs	r3, #2
 8002152:	e000      	b.n	8002156 <SD_disk_initialize+0x132>
 8002154:	2301      	movs	r3, #1
 8002156:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8002158:	7bbb      	ldrb	r3, [r7, #14]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d10e      	bne.n	800217c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800215e:	2100      	movs	r1, #0
 8002160:	2077      	movs	r0, #119	; 0x77
 8002162:	f7ff ff0a 	bl	8001f7a <SD_SendCmd>
 8002166:	4603      	mov	r3, r0
 8002168:	2b01      	cmp	r3, #1
 800216a:	d80e      	bhi.n	800218a <SD_disk_initialize+0x166>
 800216c:	2100      	movs	r1, #0
 800216e:	2069      	movs	r0, #105	; 0x69
 8002170:	f7ff ff03 	bl	8001f7a <SD_SendCmd>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d107      	bne.n	800218a <SD_disk_initialize+0x166>
 800217a:	e00d      	b.n	8002198 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800217c:	2100      	movs	r1, #0
 800217e:	2041      	movs	r0, #65	; 0x41
 8002180:	f7ff fefb 	bl	8001f7a <SD_SendCmd>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d005      	beq.n	8002196 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <SD_disk_initialize+0x1d0>)
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	b29b      	uxth	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1e1      	bne.n	8002158 <SD_disk_initialize+0x134>
 8002194:	e000      	b.n	8002198 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002196:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8002198:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <SD_disk_initialize+0x1d0>)
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d007      	beq.n	80021b2 <SD_disk_initialize+0x18e>
 80021a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021a6:	2050      	movs	r0, #80	; 0x50
 80021a8:	f7ff fee7 	bl	8001f7a <SD_SendCmd>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <SD_disk_initialize+0x192>
 80021b2:	2300      	movs	r3, #0
 80021b4:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80021b6:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <SD_disk_initialize+0x1d4>)
 80021b8:	7bbb      	ldrb	r3, [r7, #14]
 80021ba:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80021bc:	f7ff fd8a 	bl	8001cd4 <DESELECT>
	SPI_RxByte();
 80021c0:	f7ff fdca 	bl	8001d58 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80021c4:	7bbb      	ldrb	r3, [r7, #14]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d008      	beq.n	80021dc <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <SD_disk_initialize+0x1cc>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <SD_disk_initialize+0x1cc>)
 80021d8:	701a      	strb	r2, [r3, #0]
 80021da:	e001      	b.n	80021e0 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80021dc:	f7ff fe42 	bl	8001e64 <SD_PowerOff>
	}

	return Stat;
 80021e0:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <SD_disk_initialize+0x1cc>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	b2db      	uxtb	r3, r3
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd90      	pop	{r4, r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000000 	.word	0x20000000
 80021f4:	200028d4 	.word	0x200028d4
 80021f8:	2000024c 	.word	0x2000024c

080021fc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <SD_disk_status+0x14>
 800220c:	2301      	movs	r3, #1
 800220e:	e002      	b.n	8002216 <SD_disk_status+0x1a>
	return Stat;
 8002210:	4b04      	ldr	r3, [pc, #16]	; (8002224 <SD_disk_status+0x28>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	b2db      	uxtb	r3, r3
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000000 	.word	0x20000000

08002228 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	4603      	mov	r3, r0
 8002236:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d102      	bne.n	8002244 <SD_disk_read+0x1c>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <SD_disk_read+0x20>
 8002244:	2304      	movs	r3, #4
 8002246:	e051      	b.n	80022ec <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002248:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <SD_disk_read+0xcc>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <SD_disk_read+0x32>
 8002256:	2303      	movs	r3, #3
 8002258:	e048      	b.n	80022ec <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800225a:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <SD_disk_read+0xd0>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b00      	cmp	r3, #0
 8002264:	d102      	bne.n	800226c <SD_disk_read+0x44>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	025b      	lsls	r3, r3, #9
 800226a:	607b      	str	r3, [r7, #4]

	SELECT();
 800226c:	f7ff fd24 	bl	8001cb8 <SELECT>

	if (count == 1)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d111      	bne.n	800229a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	2051      	movs	r0, #81	; 0x51
 800227a:	f7ff fe7e 	bl	8001f7a <SD_SendCmd>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d129      	bne.n	80022d8 <SD_disk_read+0xb0>
 8002284:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002288:	68b8      	ldr	r0, [r7, #8]
 800228a:	f7ff fe03 	bl	8001e94 <SD_RxDataBlock>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d021      	beq.n	80022d8 <SD_disk_read+0xb0>
 8002294:	2300      	movs	r3, #0
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	e01e      	b.n	80022d8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	2052      	movs	r0, #82	; 0x52
 800229e:	f7ff fe6c 	bl	8001f7a <SD_SendCmd>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d117      	bne.n	80022d8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80022a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ac:	68b8      	ldr	r0, [r7, #8]
 80022ae:	f7ff fdf1 	bl	8001e94 <SD_RxDataBlock>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <SD_disk_read+0xa6>
				buff += 512;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80022be:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	603b      	str	r3, [r7, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1ed      	bne.n	80022a8 <SD_disk_read+0x80>
 80022cc:	e000      	b.n	80022d0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80022ce:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80022d0:	2100      	movs	r1, #0
 80022d2:	204c      	movs	r0, #76	; 0x4c
 80022d4:	f7ff fe51 	bl	8001f7a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80022d8:	f7ff fcfc 	bl	8001cd4 <DESELECT>
	SPI_RxByte();
 80022dc:	f7ff fd3c 	bl	8001d58 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	bf14      	ite	ne
 80022e6:	2301      	movne	r3, #1
 80022e8:	2300      	moveq	r3, #0
 80022ea:	b2db      	uxtb	r3, r3
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000000 	.word	0x20000000
 80022f8:	2000024c 	.word	0x2000024c

080022fc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	4603      	mov	r3, r0
 800230a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d102      	bne.n	8002318 <SD_disk_write+0x1c>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <SD_disk_write+0x20>
 8002318:	2304      	movs	r3, #4
 800231a:	e06b      	b.n	80023f4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800231c:	4b37      	ldr	r3, [pc, #220]	; (80023fc <SD_disk_write+0x100>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <SD_disk_write+0x32>
 800232a:	2303      	movs	r3, #3
 800232c:	e062      	b.n	80023f4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800232e:	4b33      	ldr	r3, [pc, #204]	; (80023fc <SD_disk_write+0x100>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <SD_disk_write+0x44>
 800233c:	2302      	movs	r3, #2
 800233e:	e059      	b.n	80023f4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002340:	4b2f      	ldr	r3, [pc, #188]	; (8002400 <SD_disk_write+0x104>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d102      	bne.n	8002352 <SD_disk_write+0x56>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	025b      	lsls	r3, r3, #9
 8002350:	607b      	str	r3, [r7, #4]

	SELECT();
 8002352:	f7ff fcb1 	bl	8001cb8 <SELECT>

	if (count == 1)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d110      	bne.n	800237e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	2058      	movs	r0, #88	; 0x58
 8002360:	f7ff fe0b 	bl	8001f7a <SD_SendCmd>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d13a      	bne.n	80023e0 <SD_disk_write+0xe4>
 800236a:	21fe      	movs	r1, #254	; 0xfe
 800236c:	68b8      	ldr	r0, [r7, #8]
 800236e:	f7ff fdc1 	bl	8001ef4 <SD_TxDataBlock>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d033      	beq.n	80023e0 <SD_disk_write+0xe4>
			count = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	e030      	b.n	80023e0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <SD_disk_write+0x104>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d007      	beq.n	800239a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800238a:	2100      	movs	r1, #0
 800238c:	2077      	movs	r0, #119	; 0x77
 800238e:	f7ff fdf4 	bl	8001f7a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8002392:	6839      	ldr	r1, [r7, #0]
 8002394:	2057      	movs	r0, #87	; 0x57
 8002396:	f7ff fdf0 	bl	8001f7a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	2059      	movs	r0, #89	; 0x59
 800239e:	f7ff fdec 	bl	8001f7a <SD_SendCmd>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d11b      	bne.n	80023e0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80023a8:	21fc      	movs	r1, #252	; 0xfc
 80023aa:	68b8      	ldr	r0, [r7, #8]
 80023ac:	f7ff fda2 	bl	8001ef4 <SD_TxDataBlock>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00a      	beq.n	80023cc <SD_disk_write+0xd0>
				buff += 512;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80023bc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1ee      	bne.n	80023a8 <SD_disk_write+0xac>
 80023ca:	e000      	b.n	80023ce <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80023cc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80023ce:	21fd      	movs	r1, #253	; 0xfd
 80023d0:	2000      	movs	r0, #0
 80023d2:	f7ff fd8f 	bl	8001ef4 <SD_TxDataBlock>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <SD_disk_write+0xe4>
			{
				count = 1;
 80023dc:	2301      	movs	r3, #1
 80023de:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80023e0:	f7ff fc78 	bl	8001cd4 <DESELECT>
	SPI_RxByte();
 80023e4:	f7ff fcb8 	bl	8001d58 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	bf14      	ite	ne
 80023ee:	2301      	movne	r3, #1
 80023f0:	2300      	moveq	r3, #0
 80023f2:	b2db      	uxtb	r3, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000000 	.word	0x20000000
 8002400:	2000024c 	.word	0x2000024c

08002404 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b08b      	sub	sp, #44	; 0x2c
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	603a      	str	r2, [r7, #0]
 800240e:	71fb      	strb	r3, [r7, #7]
 8002410:	460b      	mov	r3, r1
 8002412:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <SD_disk_ioctl+0x1e>
 800241e:	2304      	movs	r3, #4
 8002420:	e115      	b.n	800264e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8002428:	79bb      	ldrb	r3, [r7, #6]
 800242a:	2b05      	cmp	r3, #5
 800242c:	d124      	bne.n	8002478 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d012      	beq.n	800245c <SD_disk_ioctl+0x58>
 8002436:	2b02      	cmp	r3, #2
 8002438:	dc1a      	bgt.n	8002470 <SD_disk_ioctl+0x6c>
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <SD_disk_ioctl+0x40>
 800243e:	2b01      	cmp	r3, #1
 8002440:	d006      	beq.n	8002450 <SD_disk_ioctl+0x4c>
 8002442:	e015      	b.n	8002470 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8002444:	f7ff fd0e 	bl	8001e64 <SD_PowerOff>
			res = RES_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800244e:	e0fc      	b.n	800264a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8002450:	f7ff fcc6 	bl	8001de0 <SD_PowerOn>
			res = RES_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800245a:	e0f6      	b.n	800264a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	1c5c      	adds	r4, r3, #1
 8002460:	f7ff fd0c 	bl	8001e7c <SD_CheckPower>
 8002464:	4603      	mov	r3, r0
 8002466:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8002468:	2300      	movs	r3, #0
 800246a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800246e:	e0ec      	b.n	800264a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8002470:	2304      	movs	r3, #4
 8002472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002476:	e0e8      	b.n	800264a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002478:	4b77      	ldr	r3, [pc, #476]	; (8002658 <SD_disk_ioctl+0x254>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <SD_disk_ioctl+0x86>
 8002486:	2303      	movs	r3, #3
 8002488:	e0e1      	b.n	800264e <SD_disk_ioctl+0x24a>

		SELECT();
 800248a:	f7ff fc15 	bl	8001cb8 <SELECT>

		switch (ctrl)
 800248e:	79bb      	ldrb	r3, [r7, #6]
 8002490:	2b0d      	cmp	r3, #13
 8002492:	f200 80cb 	bhi.w	800262c <SD_disk_ioctl+0x228>
 8002496:	a201      	add	r2, pc, #4	; (adr r2, 800249c <SD_disk_ioctl+0x98>)
 8002498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800249c:	08002597 	.word	0x08002597
 80024a0:	080024d5 	.word	0x080024d5
 80024a4:	08002587 	.word	0x08002587
 80024a8:	0800262d 	.word	0x0800262d
 80024ac:	0800262d 	.word	0x0800262d
 80024b0:	0800262d 	.word	0x0800262d
 80024b4:	0800262d 	.word	0x0800262d
 80024b8:	0800262d 	.word	0x0800262d
 80024bc:	0800262d 	.word	0x0800262d
 80024c0:	0800262d 	.word	0x0800262d
 80024c4:	0800262d 	.word	0x0800262d
 80024c8:	080025a9 	.word	0x080025a9
 80024cc:	080025cd 	.word	0x080025cd
 80024d0:	080025f1 	.word	0x080025f1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80024d4:	2100      	movs	r1, #0
 80024d6:	2049      	movs	r0, #73	; 0x49
 80024d8:	f7ff fd4f 	bl	8001f7a <SD_SendCmd>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f040 80a8 	bne.w	8002634 <SD_disk_ioctl+0x230>
 80024e4:	f107 030c 	add.w	r3, r7, #12
 80024e8:	2110      	movs	r1, #16
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fcd2 	bl	8001e94 <SD_RxDataBlock>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 809e 	beq.w	8002634 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80024f8:	7b3b      	ldrb	r3, [r7, #12]
 80024fa:	099b      	lsrs	r3, r3, #6
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d10e      	bne.n	8002520 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002502:	7d7b      	ldrb	r3, [r7, #21]
 8002504:	b29a      	uxth	r2, r3
 8002506:	7d3b      	ldrb	r3, [r7, #20]
 8002508:	b29b      	uxth	r3, r3
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	b29b      	uxth	r3, r3
 800250e:	4413      	add	r3, r2
 8002510:	b29b      	uxth	r3, r3
 8002512:	3301      	adds	r3, #1
 8002514:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8002516:	8bfb      	ldrh	r3, [r7, #30]
 8002518:	029a      	lsls	r2, r3, #10
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	e02e      	b.n	800257e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002520:	7c7b      	ldrb	r3, [r7, #17]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	b2da      	uxtb	r2, r3
 8002528:	7dbb      	ldrb	r3, [r7, #22]
 800252a:	09db      	lsrs	r3, r3, #7
 800252c:	b2db      	uxtb	r3, r3
 800252e:	4413      	add	r3, r2
 8002530:	b2da      	uxtb	r2, r3
 8002532:	7d7b      	ldrb	r3, [r7, #21]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f003 0306 	and.w	r3, r3, #6
 800253c:	b2db      	uxtb	r3, r3
 800253e:	4413      	add	r3, r2
 8002540:	b2db      	uxtb	r3, r3
 8002542:	3302      	adds	r3, #2
 8002544:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002548:	7d3b      	ldrb	r3, [r7, #20]
 800254a:	099b      	lsrs	r3, r3, #6
 800254c:	b2db      	uxtb	r3, r3
 800254e:	b29a      	uxth	r2, r3
 8002550:	7cfb      	ldrb	r3, [r7, #19]
 8002552:	b29b      	uxth	r3, r3
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	b29b      	uxth	r3, r3
 8002558:	4413      	add	r3, r2
 800255a:	b29a      	uxth	r2, r3
 800255c:	7cbb      	ldrb	r3, [r7, #18]
 800255e:	029b      	lsls	r3, r3, #10
 8002560:	b29b      	uxth	r3, r3
 8002562:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002566:	b29b      	uxth	r3, r3
 8002568:	4413      	add	r3, r2
 800256a:	b29b      	uxth	r3, r3
 800256c:	3301      	adds	r3, #1
 800256e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8002570:	8bfa      	ldrh	r2, [r7, #30]
 8002572:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002576:	3b09      	subs	r3, #9
 8002578:	409a      	lsls	r2, r3
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8002584:	e056      	b.n	8002634 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800258c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002594:	e055      	b.n	8002642 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002596:	f7ff fc09 	bl	8001dac <SD_ReadyWait>
 800259a:	4603      	mov	r3, r0
 800259c:	2bff      	cmp	r3, #255	; 0xff
 800259e:	d14b      	bne.n	8002638 <SD_disk_ioctl+0x234>
 80025a0:	2300      	movs	r3, #0
 80025a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80025a6:	e047      	b.n	8002638 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80025a8:	2100      	movs	r1, #0
 80025aa:	2049      	movs	r0, #73	; 0x49
 80025ac:	f7ff fce5 	bl	8001f7a <SD_SendCmd>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d142      	bne.n	800263c <SD_disk_ioctl+0x238>
 80025b6:	2110      	movs	r1, #16
 80025b8:	6a38      	ldr	r0, [r7, #32]
 80025ba:	f7ff fc6b 	bl	8001e94 <SD_RxDataBlock>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d03b      	beq.n	800263c <SD_disk_ioctl+0x238>
 80025c4:	2300      	movs	r3, #0
 80025c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80025ca:	e037      	b.n	800263c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80025cc:	2100      	movs	r1, #0
 80025ce:	204a      	movs	r0, #74	; 0x4a
 80025d0:	f7ff fcd3 	bl	8001f7a <SD_SendCmd>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d132      	bne.n	8002640 <SD_disk_ioctl+0x23c>
 80025da:	2110      	movs	r1, #16
 80025dc:	6a38      	ldr	r0, [r7, #32]
 80025de:	f7ff fc59 	bl	8001e94 <SD_RxDataBlock>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d02b      	beq.n	8002640 <SD_disk_ioctl+0x23c>
 80025e8:	2300      	movs	r3, #0
 80025ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80025ee:	e027      	b.n	8002640 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80025f0:	2100      	movs	r1, #0
 80025f2:	207a      	movs	r0, #122	; 0x7a
 80025f4:	f7ff fcc1 	bl	8001f7a <SD_SendCmd>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d116      	bne.n	800262c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80025fe:	2300      	movs	r3, #0
 8002600:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002604:	e00b      	b.n	800261e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8002606:	6a3c      	ldr	r4, [r7, #32]
 8002608:	1c63      	adds	r3, r4, #1
 800260a:	623b      	str	r3, [r7, #32]
 800260c:	f7ff fba4 	bl	8001d58 <SPI_RxByte>
 8002610:	4603      	mov	r3, r0
 8002612:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002614:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002618:	3301      	adds	r3, #1
 800261a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800261e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002622:	2b03      	cmp	r3, #3
 8002624:	d9ef      	bls.n	8002606 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 800262c:	2304      	movs	r3, #4
 800262e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002632:	e006      	b.n	8002642 <SD_disk_ioctl+0x23e>
			break;
 8002634:	bf00      	nop
 8002636:	e004      	b.n	8002642 <SD_disk_ioctl+0x23e>
			break;
 8002638:	bf00      	nop
 800263a:	e002      	b.n	8002642 <SD_disk_ioctl+0x23e>
			break;
 800263c:	bf00      	nop
 800263e:	e000      	b.n	8002642 <SD_disk_ioctl+0x23e>
			break;
 8002640:	bf00      	nop
		}

		DESELECT();
 8002642:	f7ff fb47 	bl	8001cd4 <DESELECT>
		SPI_RxByte();
 8002646:	f7ff fb87 	bl	8001d58 <SPI_RxByte>
	}

	return res;
 800264a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800264e:	4618      	mov	r0, r3
 8002650:	372c      	adds	r7, #44	; 0x2c
 8002652:	46bd      	mov	sp, r7
 8002654:	bd90      	pop	{r4, r7, pc}
 8002656:	bf00      	nop
 8002658:	20000000 	.word	0x20000000

0800265c <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d106      	bne.n	800267e <prv_parse_number+0x22>
        t = gh->p.term_str;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3371      	adds	r3, #113	; 0x71
 8002674:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8002676:	e002      	b.n	800267e <prv_parse_number+0x22>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	3301      	adds	r3, #1
 800267c:	603b      	str	r3, [r7, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <prv_parse_number+0x30>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b20      	cmp	r3, #32
 800268a:	d0f5      	beq.n	8002678 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b2d      	cmp	r3, #45	; 0x2d
 8002692:	d104      	bne.n	800269e <prv_parse_number+0x42>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	3301      	adds	r3, #1
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <prv_parse_number+0x44>
 800269e:	2300      	movs	r3, #0
 80026a0:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 80026a2:	e00d      	b.n	80026c0 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	461a      	mov	r2, r3
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	3b30      	subs	r3, #48	; 0x30
 80026b6:	4413      	add	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	3301      	adds	r3, #1
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <prv_parse_number+0x7a>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b2f      	cmp	r3, #47	; 0x2f
 80026cc:	d903      	bls.n	80026d6 <prv_parse_number+0x7a>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b39      	cmp	r3, #57	; 0x39
 80026d4:	d9e6      	bls.n	80026a4 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 80026d6:	7afb      	ldrb	r3, [r7, #11]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <prv_parse_number+0x86>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	425b      	negs	r3, r3
 80026e0:	e000      	b.n	80026e4 <prv_parse_number+0x88>
 80026e2:	68fb      	ldr	r3, [r7, #12]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d106      	bne.n	800270e <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3371      	adds	r3, #113	; 0x71
 8002704:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8002706:	e002      	b.n	800270e <prv_parse_float_number+0x1e>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	3301      	adds	r3, #1
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <prv_parse_float_number+0x2c>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b20      	cmp	r3, #32
 800271a:	d0f5      	beq.n	8002708 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 800271c:	2100      	movs	r1, #0
 800271e:	6838      	ldr	r0, [r7, #0]
 8002720:	f00b ff9c 	bl	800e65c <strtod>
 8002724:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 8002728:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800272c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002730:	eeb0 0a47 	vmov.f32	s0, s14
 8002734:	eef0 0a67 	vmov.f32	s1, s15
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8002748:	2100      	movs	r1, #0
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff ffd0 	bl	80026f0 <prv_parse_float_number>
 8002750:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8002754:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002758:	f7fe fa06 	bl	8000b68 <__aeabi_d2iz>
 800275c:	4603      	mov	r3, r0
 800275e:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <prv_parse_lat_long+0x94>)
 8002760:	fb82 1203 	smull	r1, r2, r2, r3
 8002764:	1152      	asrs	r2, r2, #5
 8002766:	17db      	asrs	r3, r3, #31
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd fee2 	bl	8000534 <__aeabi_i2d>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <prv_parse_lat_long+0x98>)
 800277e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002782:	f7fd ff41 	bl	8000608 <__aeabi_dmul>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800278e:	f7fd fd83 	bl	8000298 <__aeabi_dsub>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <prv_parse_lat_long+0x9c>)
 80027a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027a4:	f7fe f85a 	bl	800085c <__aeabi_ddiv>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027b0:	f7fd fd74 	bl	800029c <__adddf3>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 80027bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027c0:	ec43 2b17 	vmov	d7, r2, r3
}
 80027c4:	eeb0 0a47 	vmov.f32	s0, s14
 80027c8:	eef0 0a67 	vmov.f32	s1, s15
 80027cc:	3720      	adds	r7, #32
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	51eb851f 	.word	0x51eb851f
 80027d8:	40590000 	.word	0x40590000
 80027dc:	404e0000 	.word	0x404e0000

080027e0 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80027e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80027f0:	2900      	cmp	r1, #0
 80027f2:	d169      	bne.n	80028c8 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3371      	adds	r3, #113	; 0x71
 80027f8:	2206      	movs	r2, #6
 80027fa:	49ba      	ldr	r1, [pc, #744]	; (8002ae4 <prv_parse_term+0x304>)
 80027fc:	4618      	mov	r0, r3
 80027fe:	f00b f8f7 	bl	800d9f0 <strncmp>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d009      	beq.n	800281c <prv_parse_term+0x3c>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3371      	adds	r3, #113	; 0x71
 800280c:	2206      	movs	r2, #6
 800280e:	49b6      	ldr	r1, [pc, #728]	; (8002ae8 <prv_parse_term+0x308>)
 8002810:	4618      	mov	r0, r3
 8002812:	f00b f8ed 	bl	800d9f0 <strncmp>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d104      	bne.n	8002826 <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8002824:	e04e      	b.n	80028c4 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3371      	adds	r3, #113	; 0x71
 800282a:	2206      	movs	r2, #6
 800282c:	49af      	ldr	r1, [pc, #700]	; (8002aec <prv_parse_term+0x30c>)
 800282e:	4618      	mov	r0, r3
 8002830:	f00b f8de 	bl	800d9f0 <strncmp>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <prv_parse_term+0x6e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3371      	adds	r3, #113	; 0x71
 800283e:	2206      	movs	r2, #6
 8002840:	49ab      	ldr	r1, [pc, #684]	; (8002af0 <prv_parse_term+0x310>)
 8002842:	4618      	mov	r0, r3
 8002844:	f00b f8d4 	bl	800d9f0 <strncmp>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2202      	movs	r2, #2
 8002852:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8002856:	e035      	b.n	80028c4 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3371      	adds	r3, #113	; 0x71
 800285c:	2206      	movs	r2, #6
 800285e:	49a5      	ldr	r1, [pc, #660]	; (8002af4 <prv_parse_term+0x314>)
 8002860:	4618      	mov	r0, r3
 8002862:	f00b f8c5 	bl	800d9f0 <strncmp>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d009      	beq.n	8002880 <prv_parse_term+0xa0>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3371      	adds	r3, #113	; 0x71
 8002870:	2206      	movs	r2, #6
 8002872:	49a1      	ldr	r1, [pc, #644]	; (8002af8 <prv_parse_term+0x318>)
 8002874:	4618      	mov	r0, r3
 8002876:	f00b f8bb 	bl	800d9f0 <strncmp>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d104      	bne.n	800288a <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2203      	movs	r2, #3
 8002884:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8002888:	e01c      	b.n	80028c4 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3371      	adds	r3, #113	; 0x71
 800288e:	2206      	movs	r2, #6
 8002890:	499a      	ldr	r1, [pc, #616]	; (8002afc <prv_parse_term+0x31c>)
 8002892:	4618      	mov	r0, r3
 8002894:	f00b f8ac 	bl	800d9f0 <strncmp>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d009      	beq.n	80028b2 <prv_parse_term+0xd2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3371      	adds	r3, #113	; 0x71
 80028a2:	2206      	movs	r2, #6
 80028a4:	4996      	ldr	r1, [pc, #600]	; (8002b00 <prv_parse_term+0x320>)
 80028a6:	4618      	mov	r0, r3
 80028a8:	f00b f8a2 	bl	800d9f0 <strncmp>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d104      	bne.n	80028bc <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2204      	movs	r2, #4
 80028b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80028ba:	e003      	b.n	80028c4 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e233      	b.n	8002d30 <prv_parse_term+0x550>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80028ce:	2900      	cmp	r1, #0
 80028d0:	f000 822d 	beq.w	8002d2e <prv_parse_term+0x54e>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80028da:	2901      	cmp	r1, #1
 80028dc:	f040 80c9 	bne.w	8002a72 <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80028e6:	3b01      	subs	r3, #1
 80028e8:	2b0a      	cmp	r3, #10
 80028ea:	f200 8213 	bhi.w	8002d14 <prv_parse_term+0x534>
 80028ee:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <prv_parse_term+0x114>)
 80028f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f4:	08002921 	.word	0x08002921
 80028f8:	0800299b 	.word	0x0800299b
 80028fc:	080029b1 	.word	0x080029b1
 8002900:	080029db 	.word	0x080029db
 8002904:	080029f1 	.word	0x080029f1
 8002908:	08002a1b 	.word	0x08002a1b
 800290c:	08002a2f 	.word	0x08002a2f
 8002910:	08002d15 	.word	0x08002d15
 8002914:	08002a43 	.word	0x08002a43
 8002918:	08002d15 	.word	0x08002d15
 800291c:	08002a5b 	.word	0x08002a5b
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002926:	3b30      	subs	r3, #48	; 0x30
 8002928:	b2db      	uxtb	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	0092      	lsls	r2, r2, #2
 800292e:	4413      	add	r3, r2
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	b2da      	uxtb	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800293a:	4413      	add	r3, r2
 800293c:	b2db      	uxtb	r3, r3
 800293e:	3b30      	subs	r3, #48	; 0x30
 8002940:	b2da      	uxtb	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800294e:	3b30      	subs	r3, #48	; 0x30
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	0092      	lsls	r2, r2, #2
 8002956:	4413      	add	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	b2da      	uxtb	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002962:	4413      	add	r3, r2
 8002964:	b2db      	uxtb	r3, r3
 8002966:	3b30      	subs	r3, #48	; 0x30
 8002968:	b2da      	uxtb	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8002976:	3b30      	subs	r3, #48	; 0x30
 8002978:	b2db      	uxtb	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	0092      	lsls	r2, r2, #2
 800297e:	4413      	add	r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	b2da      	uxtb	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800298a:	4413      	add	r3, r2
 800298c:	b2db      	uxtb	r3, r3
 800298e:	3b30      	subs	r3, #48	; 0x30
 8002990:	b2da      	uxtb	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 8002998:	e1c9      	b.n	8002d2e <prv_parse_term+0x54e>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff fed0 	bl	8002740 <prv_parse_lat_long>
 80029a0:	eeb0 7a40 	vmov.f32	s14, s0
 80029a4:	eef0 7a60 	vmov.f32	s15, s1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 80029ae:	e1be      	b.n	8002d2e <prv_parse_term+0x54e>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80029b6:	2b53      	cmp	r3, #83	; 0x53
 80029b8:	d005      	beq.n	80029c6 <prv_parse_term+0x1e6>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80029c0:	2b73      	cmp	r3, #115	; 0x73
 80029c2:	f040 81a9 	bne.w	8002d18 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80029cc:	4690      	mov	r8, r2
 80029ce:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 80029d8:	e19e      	b.n	8002d18 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff feb0 	bl	8002740 <prv_parse_lat_long>
 80029e0:	eeb0 7a40 	vmov.f32	s14, s0
 80029e4:	eef0 7a60 	vmov.f32	s15, s1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80029ee:	e19e      	b.n	8002d2e <prv_parse_term+0x54e>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80029f6:	2b57      	cmp	r3, #87	; 0x57
 80029f8:	d005      	beq.n	8002a06 <prv_parse_term+0x226>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a00:	2b77      	cmp	r3, #119	; 0x77
 8002a02:	f040 818b 	bne.w	8002d1c <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002a0c:	4614      	mov	r4, r2
 8002a0e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 8002a18:	e180      	b.n	8002d1c <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff fe1d 	bl	800265c <prv_parse_number>
 8002a22:	4603      	mov	r3, r0
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 8002a2c:	e17f      	b.n	8002d2e <prv_parse_term+0x54e>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 8002a2e:	2100      	movs	r1, #0
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff fe13 	bl	800265c <prv_parse_number>
 8002a36:	4603      	mov	r3, r0
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 8002a40:	e175      	b.n	8002d2e <prv_parse_term+0x54e>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 8002a42:	2100      	movs	r1, #0
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff fe53 	bl	80026f0 <prv_parse_float_number>
 8002a4a:	eeb0 7a40 	vmov.f32	s14, s0
 8002a4e:	eef0 7a60 	vmov.f32	s15, s1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8002a58:	e169      	b.n	8002d2e <prv_parse_term+0x54e>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff fe47 	bl	80026f0 <prv_parse_float_number>
 8002a62:	eeb0 7a40 	vmov.f32	s14, s0
 8002a66:	eef0 7a60 	vmov.f32	s15, s1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8002a70:	e15d      	b.n	8002d2e <prv_parse_term+0x54e>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002a78:	2902      	cmp	r1, #2
 8002a7a:	f040 8083 	bne.w	8002b84 <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002a84:	3b02      	subs	r3, #2
 8002a86:	2b0f      	cmp	r3, #15
 8002a88:	d860      	bhi.n	8002b4c <prv_parse_term+0x36c>
 8002a8a:	a201      	add	r2, pc, #4	; (adr r2, 8002a90 <prv_parse_term+0x2b0>)
 8002a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a90:	08002ad1 	.word	0x08002ad1
 8002a94:	08002b4d 	.word	0x08002b4d
 8002a98:	08002b4d 	.word	0x08002b4d
 8002a9c:	08002b4d 	.word	0x08002b4d
 8002aa0:	08002b4d 	.word	0x08002b4d
 8002aa4:	08002b4d 	.word	0x08002b4d
 8002aa8:	08002b4d 	.word	0x08002b4d
 8002aac:	08002b4d 	.word	0x08002b4d
 8002ab0:	08002b4d 	.word	0x08002b4d
 8002ab4:	08002b4d 	.word	0x08002b4d
 8002ab8:	08002b4d 	.word	0x08002b4d
 8002abc:	08002b4d 	.word	0x08002b4d
 8002ac0:	08002b4d 	.word	0x08002b4d
 8002ac4:	08002b05 	.word	0x08002b05
 8002ac8:	08002b1d 	.word	0x08002b1d
 8002acc:	08002b35 	.word	0x08002b35
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff fdc2 	bl	800265c <prv_parse_number>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 8002ae2:	e124      	b.n	8002d2e <prv_parse_term+0x54e>
 8002ae4:	080112a0 	.word	0x080112a0
 8002ae8:	080112a8 	.word	0x080112a8
 8002aec:	080112b0 	.word	0x080112b0
 8002af0:	080112b8 	.word	0x080112b8
 8002af4:	080112c0 	.word	0x080112c0
 8002af8:	080112c8 	.word	0x080112c8
 8002afc:	080112d0 	.word	0x080112d0
 8002b00:	080112d8 	.word	0x080112d8
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 8002b04:	2100      	movs	r1, #0
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff fdf2 	bl	80026f0 <prv_parse_float_number>
 8002b0c:	eeb0 7a40 	vmov.f32	s14, s0
 8002b10:	eef0 7a60 	vmov.f32	s15, s1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8002b1a:	e108      	b.n	8002d2e <prv_parse_term+0x54e>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff fde6 	bl	80026f0 <prv_parse_float_number>
 8002b24:	eeb0 7a40 	vmov.f32	s14, s0
 8002b28:	eef0 7a60 	vmov.f32	s15, s1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8002b32:	e0fc      	b.n	8002d2e <prv_parse_term+0x54e>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8002b34:	2100      	movs	r1, #0
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff fdda 	bl	80026f0 <prv_parse_float_number>
 8002b3c:	eeb0 7a40 	vmov.f32	s14, s0
 8002b40:	eef0 7a60 	vmov.f32	s15, s1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8002b4a:	e0f0      	b.n	8002d2e <prv_parse_term+0x54e>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	f240 80e4 	bls.w	8002d20 <prv_parse_term+0x540>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002b5e:	2b0e      	cmp	r3, #14
 8002b60:	f200 80de 	bhi.w	8002d20 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8002b64:	2100      	movs	r1, #0
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff fd78 	bl	800265c <prv_parse_number>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002b74:	3b03      	subs	r3, #3
 8002b76:	b2d1      	uxtb	r1, r2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	460a      	mov	r2, r1
 8002b7e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 8002b82:	e0cd      	b.n	8002d20 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002b8a:	2903      	cmp	r1, #3
 8002b8c:	d11b      	bne.n	8002bc6 <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d002      	beq.n	8002b9e <prv_parse_term+0x3be>
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d00a      	beq.n	8002bb2 <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8002b9c:	e0c7      	b.n	8002d2e <prv_parse_term+0x54e>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff fd5b 	bl	800265c <prv_parse_number>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 8002bb0:	e0bd      	b.n	8002d2e <prv_parse_term+0x54e>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff fd51 	bl	800265c <prv_parse_number>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8002bc4:	e0b3      	b.n	8002d2e <prv_parse_term+0x54e>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002bcc:	2904      	cmp	r1, #4
 8002bce:	f040 80a9 	bne.w	8002d24 <prv_parse_term+0x544>
        switch (gh->p.term_num) {
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8002bd8:	3902      	subs	r1, #2
 8002bda:	2909      	cmp	r1, #9
 8002bdc:	f200 80a4 	bhi.w	8002d28 <prv_parse_term+0x548>
 8002be0:	a001      	add	r0, pc, #4	; (adr r0, 8002be8 <prv_parse_term+0x408>)
 8002be2:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8002be6:	bf00      	nop
 8002be8:	08002c11 	.word	0x08002c11
 8002bec:	08002d29 	.word	0x08002d29
 8002bf0:	08002d29 	.word	0x08002d29
 8002bf4:	08002d29 	.word	0x08002d29
 8002bf8:	08002d29 	.word	0x08002d29
 8002bfc:	08002c2b 	.word	0x08002c2b
 8002c00:	08002c43 	.word	0x08002c43
 8002c04:	08002c5b 	.word	0x08002c5b
 8002c08:	08002cd5 	.word	0x08002cd5
 8002c0c:	08002ced 	.word	0x08002ced
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002c16:	2b41      	cmp	r3, #65	; 0x41
 8002c18:	bf0c      	ite	eq
 8002c1a:	2301      	moveq	r3, #1
 8002c1c:	2300      	movne	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8002c28:	e081      	b.n	8002d2e <prv_parse_term+0x54e>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff fd5f 	bl	80026f0 <prv_parse_float_number>
 8002c32:	eeb0 7a40 	vmov.f32	s14, s0
 8002c36:	eef0 7a60 	vmov.f32	s15, s1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8002c40:	e075      	b.n	8002d2e <prv_parse_term+0x54e>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8002c42:	2100      	movs	r1, #0
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff fd53 	bl	80026f0 <prv_parse_float_number>
 8002c4a:	eeb0 7a40 	vmov.f32	s14, s0
 8002c4e:	eef0 7a60 	vmov.f32	s15, s1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8002c58:	e069      	b.n	8002d2e <prv_parse_term+0x54e>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002c60:	3b30      	subs	r3, #48	; 0x30
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	461a      	mov	r2, r3
 8002c66:	0092      	lsls	r2, r2, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002c74:	4413      	add	r3, r2
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	3b30      	subs	r3, #48	; 0x30
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8002c88:	3b30      	subs	r3, #48	; 0x30
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	0092      	lsls	r2, r2, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c9c:	4413      	add	r3, r2
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	3b30      	subs	r3, #48	; 0x30
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8002cb0:	3b30      	subs	r3, #48	; 0x30
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	0092      	lsls	r2, r2, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002cc4:	4413      	add	r3, r2
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	3b30      	subs	r3, #48	; 0x30
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 8002cd2:	e02c      	b.n	8002d2e <prv_parse_term+0x54e>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff fd0a 	bl	80026f0 <prv_parse_float_number>
 8002cdc:	eeb0 7a40 	vmov.f32	s14, s0
 8002ce0:	eef0 7a60 	vmov.f32	s15, s1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8002cea:	e020      	b.n	8002d2e <prv_parse_term+0x54e>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8002cf2:	2957      	cmp	r1, #87	; 0x57
 8002cf4:	d004      	beq.n	8002d00 <prv_parse_term+0x520>
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8002cfc:	2977      	cmp	r1, #119	; 0x77
 8002cfe:	d115      	bne.n	8002d2c <prv_parse_term+0x54c>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 8002d06:	4602      	mov	r2, r0
 8002d08:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 8002d12:	e00b      	b.n	8002d2c <prv_parse_term+0x54c>
                break;
 8002d14:	bf00      	nop
 8002d16:	e00a      	b.n	8002d2e <prv_parse_term+0x54e>
                break;
 8002d18:	bf00      	nop
 8002d1a:	e008      	b.n	8002d2e <prv_parse_term+0x54e>
                break;
 8002d1c:	bf00      	nop
 8002d1e:	e006      	b.n	8002d2e <prv_parse_term+0x54e>
                break;
 8002d20:	bf00      	nop
 8002d22:	e004      	b.n	8002d2e <prv_parse_term+0x54e>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
 8002d24:	bf00      	nop
 8002d26:	e002      	b.n	8002d2e <prv_parse_term+0x54e>
                break;
 8002d28:	bf00      	nop
 8002d2a:	e000      	b.n	8002d2e <prv_parse_term+0x54e>
                break;
 8002d2c:	bf00      	nop
    return 1;
 8002d2e:	2301      	movs	r3, #1
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d3a:	bf00      	nop

08002d3c <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002d4a:	2b2f      	cmp	r3, #47	; 0x2f
 8002d4c:	d90d      	bls.n	8002d6a <prv_check_crc+0x2e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002d54:	2b39      	cmp	r3, #57	; 0x39
 8002d56:	d808      	bhi.n	8002d6a <prv_check_crc+0x2e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002d5e:	3b30      	subs	r3, #48	; 0x30
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	b25a      	sxtb	r2, r3
 8002d68:	e026      	b.n	8002db8 <prv_check_crc+0x7c>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002d70:	2b60      	cmp	r3, #96	; 0x60
 8002d72:	d90d      	bls.n	8002d90 <prv_check_crc+0x54>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002d7a:	2b7a      	cmp	r3, #122	; 0x7a
 8002d7c:	d808      	bhi.n	8002d90 <prv_check_crc+0x54>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002d84:	3b57      	subs	r3, #87	; 0x57
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	b25a      	sxtb	r2, r3
 8002d8e:	e013      	b.n	8002db8 <prv_check_crc+0x7c>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002d96:	2b40      	cmp	r3, #64	; 0x40
 8002d98:	d90d      	bls.n	8002db6 <prv_check_crc+0x7a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002da0:	2b5a      	cmp	r3, #90	; 0x5a
 8002da2:	d808      	bhi.n	8002db6 <prv_check_crc+0x7a>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002daa:	3b37      	subs	r3, #55	; 0x37
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	b25a      	sxtb	r2, r3
 8002db4:	e000      	b.n	8002db8 <prv_check_crc+0x7c>
 8002db6:	2200      	movs	r2, #0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002dbe:	2b2f      	cmp	r3, #47	; 0x2f
 8002dc0:	d90c      	bls.n	8002ddc <prv_check_crc+0xa0>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002dc8:	2b39      	cmp	r3, #57	; 0x39
 8002dca:	d807      	bhi.n	8002ddc <prv_check_crc+0xa0>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002dd2:	b25b      	sxtb	r3, r3
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	b25b      	sxtb	r3, r3
 8002dda:	e028      	b.n	8002e2e <prv_check_crc+0xf2>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002de2:	2b60      	cmp	r3, #96	; 0x60
 8002de4:	d90e      	bls.n	8002e04 <prv_check_crc+0xc8>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002dec:	2b7a      	cmp	r3, #122	; 0x7a
 8002dee:	d809      	bhi.n	8002e04 <prv_check_crc+0xc8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002df6:	3b57      	subs	r3, #87	; 0x57
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	b25b      	sxtb	r3, r3
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	b25b      	sxtb	r3, r3
 8002e02:	e014      	b.n	8002e2e <prv_check_crc+0xf2>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002e0a:	2b40      	cmp	r3, #64	; 0x40
 8002e0c:	d90e      	bls.n	8002e2c <prv_check_crc+0xf0>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002e14:	2b5a      	cmp	r3, #90	; 0x5a
 8002e16:	d809      	bhi.n	8002e2c <prv_check_crc+0xf0>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002e1e:	3b37      	subs	r3, #55	; 0x37
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	b25b      	sxtb	r3, r3
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	b25b      	sxtb	r3, r3
 8002e2a:	e000      	b.n	8002e2e <prv_check_crc+0xf2>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	b25b      	sxtb	r3, r3
 8002e32:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002e3a:	7bfa      	ldrb	r2, [r7, #15]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	bf0c      	ite	eq
 8002e40:	2301      	moveq	r3, #1
 8002e42:	2300      	movne	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d136      	bne.n	8002ed2 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ed0:	e061      	b.n	8002f96 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d121      	bne.n	8002f20 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	33a1      	adds	r3, #161	; 0xa1
 8002f16:	220c      	movs	r2, #12
 8002f18:	4619      	mov	r1, r3
 8002f1a:	f009 ffd9 	bl	800ced0 <memcpy>
 8002f1e:	e03a      	b.n	8002f96 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d106      	bne.n	8002f38 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8002f36:	e02e      	b.n	8002f96 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d129      	bne.n	8002f96 <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8002f96:	2301      	movs	r3, #1
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8002fa8:	22b0      	movs	r2, #176	; 0xb0
 8002faa:	2100      	movs	r1, #0
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f009 ff9d 	bl	800ceec <memset>
    return 1;
 8002fb2:	2301      	movs	r3, #1
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8002fcc:	e0ad      	b.n	800312a <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b24      	cmp	r3, #36	; 0x24
 8002fd4:	d128      	bne.n	8003028 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	3370      	adds	r3, #112	; 0x70
 8002fda:	2240      	movs	r2, #64	; 0x40
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f009 ff84 	bl	800ceec <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002fea:	2b0b      	cmp	r3, #11
 8002fec:	f200 8097 	bhi.w	800311e <lwgps_process+0x162>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	781a      	ldrb	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	440b      	add	r3, r1
 8003000:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800300a:	3301      	adds	r3, #1
 800300c:	b2da      	uxtb	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800301a:	461a      	mov	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8003026:	e07a      	b.n	800311e <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b2c      	cmp	r3, #44	; 0x2c
 800302e:	d11d      	bne.n	800306c <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f7ff fbd5 	bl	80027e0 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	4053      	eors	r3, r2
 8003042:	b2da      	uxtb	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003060:	3301      	adds	r3, #1
 8003062:	b2da      	uxtb	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800306a:	e058      	b.n	800311e <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b2a      	cmp	r3, #42	; 0x2a
 8003072:	d117      	bne.n	80030a4 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f7ff fbb3 	bl	80027e0 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003098:	3301      	adds	r3, #1
 800309a:	b2da      	uxtb	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80030a2:	e03c      	b.n	800311e <lwgps_process+0x162>
        } else if (*d == '\r') {
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b0d      	cmp	r3, #13
 80030aa:	d109      	bne.n	80030c0 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f7ff fe45 	bl	8002d3c <prv_check_crc>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d032      	beq.n	800311e <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f7ff feca 	bl	8002e52 <prv_copy_from_tmp_memory>
 80030be:	e02e      	b.n	800311e <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	4053      	eors	r3, r2
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80030e4:	2b0b      	cmp	r3, #11
 80030e6:	d81a      	bhi.n	800311e <lwgps_process+0x162>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80030ee:	4619      	mov	r1, r3
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	781a      	ldrb	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	440b      	add	r3, r1
 80030f8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8003102:	3301      	adds	r3, #1
 8003104:	b2da      	uxtb	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8003112:	461a      	mov	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4413      	add	r3, r2
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	3301      	adds	r3, #1
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3b01      	subs	r3, #1
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	f47f af4e 	bne.w	8002fce <lwgps_process+0x12>
        }
    }
    return 1;
 8003132:	2301      	movs	r3, #1
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <max30102_plot>:
//  return ch;
//}

// Override plot function
void max30102_plot(uint32_t ir_sample, uint32_t red_sample)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
    // printf("ir:%u\n", ir_sample);                  // Print IR only
    // printf("r:%u\n", red_sample);                  // Print Red only
   // printf("ir:%u,r:%u\n", ir_sample, red_sample);    // Print IR and Red
    spo2 = 100 *  ((float)red_sample / (float)(ir_sample));
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	ee07 3a90 	vmov	s15, r3
 800314c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800315a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800315e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003178 <max30102_plot+0x3c>
 8003162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <max30102_plot+0x40>)
 8003168:	edc3 7a00 	vstr	s15, [r3]
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	42c80000 	.word	0x42c80000
 800317c:	20000250 	.word	0x20000250

08003180 <HAL_UART_RxCpltCallback>:
uint8_t rx_buffer[128];
uint8_t rx_index = 0;
uint8_t rx_data = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)  //hızı knot cinsinden veriyor dikkat et
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
	if(huart == &huart2) {
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a17      	ldr	r2, [pc, #92]	; (80031e8 <HAL_UART_RxCpltCallback+0x68>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d127      	bne.n	80031e0 <HAL_UART_RxCpltCallback+0x60>
		if(rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8003190:	4b16      	ldr	r3, [pc, #88]	; (80031ec <HAL_UART_RxCpltCallback+0x6c>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b0a      	cmp	r3, #10
 8003196:	d010      	beq.n	80031ba <HAL_UART_RxCpltCallback+0x3a>
 8003198:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <HAL_UART_RxCpltCallback+0x70>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	b25b      	sxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	db0b      	blt.n	80031ba <HAL_UART_RxCpltCallback+0x3a>
			rx_buffer[rx_index++] = rx_data;
 80031a2:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <HAL_UART_RxCpltCallback+0x70>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	b2d1      	uxtb	r1, r2
 80031aa:	4a11      	ldr	r2, [pc, #68]	; (80031f0 <HAL_UART_RxCpltCallback+0x70>)
 80031ac:	7011      	strb	r1, [r2, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	4b0e      	ldr	r3, [pc, #56]	; (80031ec <HAL_UART_RxCpltCallback+0x6c>)
 80031b2:	7819      	ldrb	r1, [r3, #0]
 80031b4:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <HAL_UART_RxCpltCallback+0x74>)
 80031b6:	5499      	strb	r1, [r3, r2]
 80031b8:	e00d      	b.n	80031d6 <HAL_UART_RxCpltCallback+0x56>
		} else {
			lwgps_process(&gps, rx_buffer, rx_index+1);
 80031ba:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <HAL_UART_RxCpltCallback+0x70>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	3301      	adds	r3, #1
 80031c0:	461a      	mov	r2, r3
 80031c2:	490c      	ldr	r1, [pc, #48]	; (80031f4 <HAL_UART_RxCpltCallback+0x74>)
 80031c4:	480c      	ldr	r0, [pc, #48]	; (80031f8 <HAL_UART_RxCpltCallback+0x78>)
 80031c6:	f7ff fef9 	bl	8002fbc <lwgps_process>
			rx_index = 0;
 80031ca:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <HAL_UART_RxCpltCallback+0x70>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
			rx_data = 0;
 80031d0:	4b06      	ldr	r3, [pc, #24]	; (80031ec <HAL_UART_RxCpltCallback+0x6c>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80031d6:	2201      	movs	r2, #1
 80031d8:	4904      	ldr	r1, [pc, #16]	; (80031ec <HAL_UART_RxCpltCallback+0x6c>)
 80031da:	4803      	ldr	r0, [pc, #12]	; (80031e8 <HAL_UART_RxCpltCallback+0x68>)
 80031dc:	f005 fc95 	bl	8008b0a <HAL_UART_Receive_IT>
	}
}
 80031e0:	bf00      	nop
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20000470 	.word	0x20000470
 80031ec:	200006f1 	.word	0x200006f1
 80031f0:	200006f0 	.word	0x200006f0
 80031f4:	20000670 	.word	0x20000670
 80031f8:	200005c0 	.word	0x200005c0

080031fc <microDelay>:
float Temperature_DS;
uint8_t Temp_byte1, Temp_byte2;
uint16_t TEMP;
/////////////////////// DS18B20 MicroDelay     ///////////////////////////////
void microDelay (uint16_t delay)  //Mikrosaniye Delay
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim5, 0);
 8003206:	4b09      	ldr	r3, [pc, #36]	; (800322c <microDelay+0x30>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2200      	movs	r2, #0
 800320c:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim5) < delay);  //ds18b20 icin timer source
 800320e:	bf00      	nop
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <microDelay+0x30>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	429a      	cmp	r2, r3
 800321a:	d3f9      	bcc.n	8003210 <microDelay+0x14>
}
 800321c:	bf00      	nop
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	200003e4 	.word	0x200003e4

08003230 <Set_Pin_Output>:
//////////////////////// ONE WIRE PIN OUTPUT-INPUT AYARLAMA   DS18B20 ///////////////////////////////////////////
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323c:	f107 030c 	add.w	r3, r7, #12
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800324c:	887b      	ldrh	r3, [r7, #2]
 800324e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003250:	2301      	movs	r3, #1
 8003252:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003254:	2300      	movs	r3, #0
 8003256:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003258:	f107 030c 	add.w	r3, r7, #12
 800325c:	4619      	mov	r1, r3
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f002 f8a8 	bl	80053b4 <HAL_GPIO_Init>
}
 8003264:	bf00      	nop
 8003266:	3720      	adds	r7, #32
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b088      	sub	sp, #32
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 030c 	add.w	r3, r7, #12
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8003288:	887b      	ldrh	r3, [r7, #2]
 800328a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800328c:	2300      	movs	r3, #0
 800328e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003290:	2301      	movs	r3, #1
 8003292:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003294:	f107 030c 	add.w	r3, r7, #12
 8003298:	4619      	mov	r1, r3
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f002 f88a 	bl	80053b4 <HAL_GPIO_Init>
}
 80032a0:	bf00      	nop
 80032a2:	3720      	adds	r7, #32
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <DS18B20_Start>:

#define DS18B20_PORT GPIOA
#define DS18B20_PIN GPIO_PIN_1

uint8_t DS18B20_Start (void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80032ae:	2300      	movs	r3, #0
 80032b0:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 80032b2:	2102      	movs	r1, #2
 80032b4:	4813      	ldr	r0, [pc, #76]	; (8003304 <DS18B20_Start+0x5c>)
 80032b6:	f7ff ffbb 	bl	8003230 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 80032ba:	2200      	movs	r2, #0
 80032bc:	2102      	movs	r1, #2
 80032be:	4811      	ldr	r0, [pc, #68]	; (8003304 <DS18B20_Start+0x5c>)
 80032c0:	f002 fa14 	bl	80056ec <HAL_GPIO_WritePin>
	microDelay(480);   // delay according to datasheet
 80032c4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80032c8:	f7ff ff98 	bl	80031fc <microDelay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 80032cc:	2102      	movs	r1, #2
 80032ce:	480d      	ldr	r0, [pc, #52]	; (8003304 <DS18B20_Start+0x5c>)
 80032d0:	f7ff ffcc 	bl	800326c <Set_Pin_Input>
	microDelay(80);    // delay according to datasheet
 80032d4:	2050      	movs	r0, #80	; 0x50
 80032d6:	f7ff ff91 	bl	80031fc <microDelay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 80032da:	2102      	movs	r1, #2
 80032dc:	4809      	ldr	r0, [pc, #36]	; (8003304 <DS18B20_Start+0x5c>)
 80032de:	f002 f9ed 	bl	80056bc <HAL_GPIO_ReadPin>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d102      	bne.n	80032ee <DS18B20_Start+0x46>
 80032e8:	2301      	movs	r3, #1
 80032ea:	71fb      	strb	r3, [r7, #7]
 80032ec:	e001      	b.n	80032f2 <DS18B20_Start+0x4a>
	else Response = -1;
 80032ee:	23ff      	movs	r3, #255	; 0xff
 80032f0:	71fb      	strb	r3, [r7, #7]

	microDelay(480); // 480 us delay totally.
 80032f2:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80032f6:	f7ff ff81 	bl	80031fc <microDelay>

	return Response;
 80032fa:	79fb      	ldrb	r3, [r7, #7]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40020000 	.word	0x40020000

08003308 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8003312:	2102      	movs	r1, #2
 8003314:	481e      	ldr	r0, [pc, #120]	; (8003390 <DS18B20_Write+0x88>)
 8003316:	f7ff ff8b 	bl	8003230 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	e02e      	b.n	800337e <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8003320:	79fa      	ldrb	r2, [r7, #7]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	fa42 f303 	asr.w	r3, r2, r3
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d013      	beq.n	8003358 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8003330:	2102      	movs	r1, #2
 8003332:	4817      	ldr	r0, [pc, #92]	; (8003390 <DS18B20_Write+0x88>)
 8003334:	f7ff ff7c 	bl	8003230 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8003338:	2200      	movs	r2, #0
 800333a:	2102      	movs	r1, #2
 800333c:	4814      	ldr	r0, [pc, #80]	; (8003390 <DS18B20_Write+0x88>)
 800333e:	f002 f9d5 	bl	80056ec <HAL_GPIO_WritePin>
			microDelay(1);  // wait for 1 us
 8003342:	2001      	movs	r0, #1
 8003344:	f7ff ff5a 	bl	80031fc <microDelay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8003348:	2102      	movs	r1, #2
 800334a:	4811      	ldr	r0, [pc, #68]	; (8003390 <DS18B20_Write+0x88>)
 800334c:	f7ff ff8e 	bl	800326c <Set_Pin_Input>
			microDelay(50);  // wait for 60 us
 8003350:	2032      	movs	r0, #50	; 0x32
 8003352:	f7ff ff53 	bl	80031fc <microDelay>
 8003356:	e00f      	b.n	8003378 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8003358:	2102      	movs	r1, #2
 800335a:	480d      	ldr	r0, [pc, #52]	; (8003390 <DS18B20_Write+0x88>)
 800335c:	f7ff ff68 	bl	8003230 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8003360:	2200      	movs	r2, #0
 8003362:	2102      	movs	r1, #2
 8003364:	480a      	ldr	r0, [pc, #40]	; (8003390 <DS18B20_Write+0x88>)
 8003366:	f002 f9c1 	bl	80056ec <HAL_GPIO_WritePin>
			microDelay(50);  // wait for 60 us
 800336a:	2032      	movs	r0, #50	; 0x32
 800336c:	f7ff ff46 	bl	80031fc <microDelay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8003370:	2102      	movs	r1, #2
 8003372:	4807      	ldr	r0, [pc, #28]	; (8003390 <DS18B20_Write+0x88>)
 8003374:	f7ff ff7a 	bl	800326c <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3301      	adds	r3, #1
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b07      	cmp	r3, #7
 8003382:	ddcd      	ble.n	8003320 <DS18B20_Write+0x18>
		}
	}
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40020000 	.word	0x40020000

08003394 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
	uint8_t value=0;
 800339a:	2300      	movs	r3, #0
 800339c:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 800339e:	2102      	movs	r1, #2
 80033a0:	481a      	ldr	r0, [pc, #104]	; (800340c <DS18B20_Read+0x78>)
 80033a2:	f7ff ff63 	bl	800326c <Set_Pin_Input>

	for (int i=0;i<8;i++)
 80033a6:	2300      	movs	r3, #0
 80033a8:	603b      	str	r3, [r7, #0]
 80033aa:	e026      	b.n	80033fa <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 80033ac:	2102      	movs	r1, #2
 80033ae:	4817      	ldr	r0, [pc, #92]	; (800340c <DS18B20_Read+0x78>)
 80033b0:	f7ff ff3e 	bl	8003230 <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 80033b4:	2200      	movs	r2, #0
 80033b6:	2102      	movs	r1, #2
 80033b8:	4814      	ldr	r0, [pc, #80]	; (800340c <DS18B20_Read+0x78>)
 80033ba:	f002 f997 	bl	80056ec <HAL_GPIO_WritePin>
		microDelay(1);  // wait for > 1us
 80033be:	2001      	movs	r0, #1
 80033c0:	f7ff ff1c 	bl	80031fc <microDelay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80033c4:	2102      	movs	r1, #2
 80033c6:	4811      	ldr	r0, [pc, #68]	; (800340c <DS18B20_Read+0x78>)
 80033c8:	f7ff ff50 	bl	800326c <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 80033cc:	2102      	movs	r1, #2
 80033ce:	480f      	ldr	r0, [pc, #60]	; (800340c <DS18B20_Read+0x78>)
 80033d0:	f002 f974 	bl	80056bc <HAL_GPIO_ReadPin>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 80033da:	2201      	movs	r2, #1
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	b25a      	sxtb	r2, r3
 80033e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	b25b      	sxtb	r3, r3
 80033ec:	71fb      	strb	r3, [r7, #7]
		}
		microDelay(50);  // wait for 60 us
 80033ee:	2032      	movs	r0, #50	; 0x32
 80033f0:	f7ff ff04 	bl	80031fc <microDelay>
	for (int i=0;i<8;i++)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	3301      	adds	r3, #1
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b07      	cmp	r3, #7
 80033fe:	ddd5      	ble.n	80033ac <DS18B20_Read+0x18>
	}
	return value;
 8003400:	79fb      	ldrb	r3, [r7, #7]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40020000 	.word	0x40020000

08003410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003414:	b08d      	sub	sp, #52	; 0x34
 8003416:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003418:	f001 fb80 	bl	8004b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800341c:	f000 f974 	bl	8003708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003420:	f000 fbac 	bl	8003b7c <MX_GPIO_Init>
  MX_I2C2_Init();
 8003424:	f000 fa58 	bl	80038d8 <MX_I2C2_Init>
  MX_TIM5_Init();
 8003428:	f000 fb06 	bl	8003a38 <MX_TIM5_Init>
  MX_SPI1_Init();
 800342c:	f000 fa82 	bl	8003934 <MX_SPI1_Init>
  MX_FATFS_Init();
 8003430:	f006 fa96 	bl	8009960 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8003434:	f000 fb4e 	bl	8003ad4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8003438:	f000 f9ce 	bl	80037d8 <MX_ADC1_Init>
  MX_TIM2_Init();
 800343c:	f000 fab0 	bl	80039a0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8003440:	f000 fb72 	bl	8003b28 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003444:	f000 fa1a 	bl	800387c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  ///////////////////////// DS18B20 /////////////////////////////////
  HAL_TIM_Base_Start(&htim5);
 8003448:	4895      	ldr	r0, [pc, #596]	; (80036a0 <main+0x290>)
 800344a:	f004 fec1 	bl	80081d0 <HAL_TIM_Base_Start>
  ///////////////////////////// BME280 ////////////////////////////////
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 800344e:	2304      	movs	r3, #4
 8003450:	9301      	str	r3, [sp, #4]
 8003452:	2300      	movs	r3, #0
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	2303      	movs	r3, #3
 8003458:	2201      	movs	r2, #1
 800345a:	2105      	movs	r1, #5
 800345c:	2002      	movs	r0, #2
 800345e:	f7fd ff05 	bl	800126c <BME280_Config>
  ///////////////////////////////////////////////////////////////////
  HAL_Delay (500);
 8003462:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003466:	f001 fb9b 	bl	8004ba0 <HAL_Delay>
//    	/* Unmount SDCARD */
//    	fresult = f_mount(NULL, "/", 1);
//    	if (fresult == FR_OK) send_uart ("SD CARD UNMOUNTED successfully...\n");

////////////////////////////////////////////////////////////////////////////////////////////////////
  HAL_TIM_Base_Start_IT(&htim2);
 800346a:	488e      	ldr	r0, [pc, #568]	; (80036a4 <main+0x294>)
 800346c:	f004 ff0a 	bl	8008284 <HAL_TIM_Base_Start_IT>
//////////////////////////////////////////////////////////////////////////////////////////////////
  lwgps_init(&gps);
 8003470:	488d      	ldr	r0, [pc, #564]	; (80036a8 <main+0x298>)
 8003472:	f7ff fd95 	bl	8002fa0 <lwgps_init>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8003476:	2201      	movs	r2, #1
 8003478:	498c      	ldr	r1, [pc, #560]	; (80036ac <main+0x29c>)
 800347a:	488d      	ldr	r0, [pc, #564]	; (80036b0 <main+0x2a0>)
 800347c:	f005 fb45 	bl	8008b0a <HAL_UART_Receive_IT>
///////////////////////////////////////////////////////
  // Initiation
     max30102_init(&max30102, &hi2c1);
 8003480:	498c      	ldr	r1, [pc, #560]	; (80036b4 <main+0x2a4>)
 8003482:	488d      	ldr	r0, [pc, #564]	; (80036b8 <main+0x2a8>)
 8003484:	f000 fc99 	bl	8003dba <max30102_init>
     max30102_reset(&max30102);
 8003488:	488b      	ldr	r0, [pc, #556]	; (80036b8 <main+0x2a8>)
 800348a:	f000 fd0d 	bl	8003ea8 <max30102_reset>
     max30102_clear_fifo(&max30102);
 800348e:	488a      	ldr	r0, [pc, #552]	; (80036b8 <main+0x2a8>)
 8003490:	f000 fed4 	bl	800423c <max30102_clear_fifo>
     max30102_set_fifo_config(&max30102, max30102_smp_ave_8, 1, 7);
 8003494:	2307      	movs	r3, #7
 8003496:	2201      	movs	r2, #1
 8003498:	2103      	movs	r1, #3
 800349a:	4887      	ldr	r0, [pc, #540]	; (80036b8 <main+0x2a8>)
 800349c:	f000 fe94 	bl	80041c8 <max30102_set_fifo_config>

     // Sensor settings
     max30102_set_led_pulse_width(&max30102, max30102_pw_16_bit);
 80034a0:	2101      	movs	r1, #1
 80034a2:	4885      	ldr	r0, [pc, #532]	; (80036b8 <main+0x2a8>)
 80034a4:	f000 fdf7 	bl	8004096 <max30102_set_led_pulse_width>
     max30102_set_adc_resolution(&max30102, max30102_adc_2048);
 80034a8:	2100      	movs	r1, #0
 80034aa:	4883      	ldr	r0, [pc, #524]	; (80036b8 <main+0x2a8>)
 80034ac:	f000 fe16 	bl	80040dc <max30102_set_adc_resolution>
     max30102_set_sampling_rate(&max30102, max30102_sr_800);
 80034b0:	2104      	movs	r1, #4
 80034b2:	4881      	ldr	r0, [pc, #516]	; (80036b8 <main+0x2a8>)
 80034b4:	f000 fdd0 	bl	8004058 <max30102_set_sampling_rate>
     max30102_set_led_current_1(&max30102, 6.2);
 80034b8:	ed9f 0a80 	vldr	s0, [pc, #512]	; 80036bc <main+0x2ac>
 80034bc:	487e      	ldr	r0, [pc, #504]	; (80036b8 <main+0x2a8>)
 80034be:	f000 fe33 	bl	8004128 <max30102_set_led_current_1>
     max30102_set_led_current_2(&max30102, 6.2);
 80034c2:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80036bc <main+0x2ac>
 80034c6:	487c      	ldr	r0, [pc, #496]	; (80036b8 <main+0x2a8>)
 80034c8:	f000 fe56 	bl	8004178 <max30102_set_led_current_2>

     // Enter SpO2 mode
     max30102_set_mode(&max30102, max30102_spo2);
 80034cc:	2103      	movs	r1, #3
 80034ce:	487a      	ldr	r0, [pc, #488]	; (80036b8 <main+0x2a8>)
 80034d0:	f000 fd9c 	bl	800400c <max30102_set_mode>
     max30102_set_a_full(&max30102, 1);
 80034d4:	2101      	movs	r1, #1
 80034d6:	4878      	ldr	r0, [pc, #480]	; (80036b8 <main+0x2a8>)
 80034d8:	f000 fcf7 	bl	8003eca <max30102_set_a_full>

     // Initiate 1 temperature measurement
     max30102_set_die_temp_en(&max30102, 1);
 80034dc:	2101      	movs	r1, #1
 80034de:	4876      	ldr	r0, [pc, #472]	; (80036b8 <main+0x2a8>)
 80034e0:	f000 fd33 	bl	8003f4a <max30102_set_die_temp_en>
     max30102_set_die_temp_rdy(&max30102, 1);
 80034e4:	2101      	movs	r1, #1
 80034e6:	4874      	ldr	r0, [pc, #464]	; (80036b8 <main+0x2a8>)
 80034e8:	f000 fd17 	bl	8003f1a <max30102_set_die_temp_rdy>

     uint8_t en_reg[2] = {0};
 80034ec:	2300      	movs	r3, #0
 80034ee:	80bb      	strh	r3, [r7, #4]
     max30102_read(&max30102, 0x00, en_reg, 1);
 80034f0:	1d3a      	adds	r2, r7, #4
 80034f2:	2301      	movs	r3, #1
 80034f4:	2100      	movs	r1, #0
 80034f6:	4870      	ldr	r0, [pc, #448]	; (80036b8 <main+0x2a8>)
 80034f8:	f000 fcb1 	bl	8003e5e <max30102_read>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /////////////////// oksimetre ////////////////
	  if (max30102_has_interrupt(&max30102))
 80034fc:	486e      	ldr	r0, [pc, #440]	; (80036b8 <main+0x2a8>)
 80034fe:	f000 fd4a 	bl	8003f96 <max30102_has_interrupt>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <main+0xfe>
	  	  // Run interrupt handler to read FIFO
	  	  max30102_interrupt_handler(&max30102);
 8003508:	486b      	ldr	r0, [pc, #428]	; (80036b8 <main+0x2a8>)
 800350a:	f000 fd51 	bl	8003fb0 <max30102_interrupt_handler>
	  ///////////// BME 280 ////////////////////////
	  BME280_Measure();
 800350e:	f7fe fb47 	bl	8001ba0 <BME280_Measure>
	  /////////////////////   DS18B20    //////////////////
	  DS18B20_Start ();
 8003512:	f7ff fec9 	bl	80032a8 <DS18B20_Start>
	  HAL_Delay (1);
 8003516:	2001      	movs	r0, #1
 8003518:	f001 fb42 	bl	8004ba0 <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 800351c:	20cc      	movs	r0, #204	; 0xcc
 800351e:	f7ff fef3 	bl	8003308 <DS18B20_Write>
	  DS18B20_Write (0x44);  // convert t
 8003522:	2044      	movs	r0, #68	; 0x44
 8003524:	f7ff fef0 	bl	8003308 <DS18B20_Write>
	  HAL_Delay (800);  //RTOS GEREKLI
 8003528:	f44f 7048 	mov.w	r0, #800	; 0x320
 800352c:	f001 fb38 	bl	8004ba0 <HAL_Delay>

	  DS18B20_Start ();
 8003530:	f7ff feba 	bl	80032a8 <DS18B20_Start>
	  HAL_Delay(1);
 8003534:	2001      	movs	r0, #1
 8003536:	f001 fb33 	bl	8004ba0 <HAL_Delay>
	  DS18B20_Write (0xCC);  // skip ROM
 800353a:	20cc      	movs	r0, #204	; 0xcc
 800353c:	f7ff fee4 	bl	8003308 <DS18B20_Write>
	  DS18B20_Write (0xBE);  // Read Scratch-pad
 8003540:	20be      	movs	r0, #190	; 0xbe
 8003542:	f7ff fee1 	bl	8003308 <DS18B20_Write>

	  Temp_byte1 = DS18B20_Read();
 8003546:	f7ff ff25 	bl	8003394 <DS18B20_Read>
 800354a:	4603      	mov	r3, r0
 800354c:	461a      	mov	r2, r3
 800354e:	4b5c      	ldr	r3, [pc, #368]	; (80036c0 <main+0x2b0>)
 8003550:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DS18B20_Read();
 8003552:	f7ff ff1f 	bl	8003394 <DS18B20_Read>
 8003556:	4603      	mov	r3, r0
 8003558:	461a      	mov	r2, r3
 800355a:	4b5a      	ldr	r3, [pc, #360]	; (80036c4 <main+0x2b4>)
 800355c:	701a      	strb	r2, [r3, #0]
	  TEMP = (Temp_byte2<<8)|Temp_byte1;
 800355e:	4b59      	ldr	r3, [pc, #356]	; (80036c4 <main+0x2b4>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	b21a      	sxth	r2, r3
 8003566:	4b56      	ldr	r3, [pc, #344]	; (80036c0 <main+0x2b0>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	b21b      	sxth	r3, r3
 800356c:	4313      	orrs	r3, r2
 800356e:	b21b      	sxth	r3, r3
 8003570:	b29a      	uxth	r2, r3
 8003572:	4b55      	ldr	r3, [pc, #340]	; (80036c8 <main+0x2b8>)
 8003574:	801a      	strh	r2, [r3, #0]
	  Temperature_DS = (float)TEMP/16;   //DS sporcunun vucüt sıcaklığını ölcüyor
 8003576:	4b54      	ldr	r3, [pc, #336]	; (80036c8 <main+0x2b8>)
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	ee07 3a90 	vmov	s15, r3
 800357e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003582:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8003586:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800358a:	4b50      	ldr	r3, [pc, #320]	; (80036cc <main+0x2bc>)
 800358c:	edc3 7a00 	vstr	s15, [r3]
	  /////////////////////////////////////////
      //Partsiz kayit alma
	  ////////////////////////////////////////////////////////////////////SD CARD mount  NOT:TEK DIZINDE TOPLAM 7KB USTU DOSYA(YAKLASIK 180 SATIR) ISTEMIYOR GIBI
      //////// BU SATIRLAR ACIKKEN SD CARD TAKILI OLMAZSA DONUYOR ////////////////////////////////
        	sprintf (kayit_dosya_ismi,"file_1.txt");
 8003590:	494f      	ldr	r1, [pc, #316]	; (80036d0 <main+0x2c0>)
 8003592:	4850      	ldr	r0, [pc, #320]	; (80036d4 <main+0x2c4>)
 8003594:	f00a fa0c 	bl	800d9b0 <siprintf>
	        fresult = f_mount(&fs, "/", 1);
 8003598:	2201      	movs	r2, #1
 800359a:	494f      	ldr	r1, [pc, #316]	; (80036d8 <main+0x2c8>)
 800359c:	484f      	ldr	r0, [pc, #316]	; (80036dc <main+0x2cc>)
 800359e:	f008 fc2d 	bl	800bdfc <f_mount>
 80035a2:	4603      	mov	r3, r0
 80035a4:	461a      	mov	r2, r3
 80035a6:	4b4e      	ldr	r3, [pc, #312]	; (80036e0 <main+0x2d0>)
 80035a8:	701a      	strb	r2, [r3, #0]
	          ///////////////////////////////////////////////////////////////////////////////  //dosya olusturma
	      	fresult = f_open(&fil, kayit_dosya_ismi, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80035aa:	2213      	movs	r2, #19
 80035ac:	4949      	ldr	r1, [pc, #292]	; (80036d4 <main+0x2c4>)
 80035ae:	484d      	ldr	r0, [pc, #308]	; (80036e4 <main+0x2d4>)
 80035b0:	f008 fc6a 	bl	800be88 <f_open>
 80035b4:	4603      	mov	r3, r0
 80035b6:	461a      	mov	r2, r3
 80035b8:	4b49      	ldr	r3, [pc, #292]	; (80036e0 <main+0x2d0>)
 80035ba:	701a      	strb	r2, [r3, #0]
        	fresult = f_close(&fil); //kapama
 80035bc:	4849      	ldr	r0, [pc, #292]	; (80036e4 <main+0x2d4>)
 80035be:	f009 f841 	bl	800c644 <f_close>
 80035c2:	4603      	mov	r3, r0
 80035c4:	461a      	mov	r2, r3
 80035c6:	4b46      	ldr	r3, [pc, #280]	; (80036e0 <main+0x2d0>)
 80035c8:	701a      	strb	r2, [r3, #0]
	      	////////////////////////////////////////////////////////////////////////////////// dosya sonuna yazi ekleme
	      	fresult = f_open(&fil, kayit_dosya_ismi, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 80035ca:	2203      	movs	r2, #3
 80035cc:	4941      	ldr	r1, [pc, #260]	; (80036d4 <main+0x2c4>)
 80035ce:	4845      	ldr	r0, [pc, #276]	; (80036e4 <main+0x2d4>)
 80035d0:	f008 fc5a 	bl	800be88 <f_open>
 80035d4:	4603      	mov	r3, r0
 80035d6:	461a      	mov	r2, r3
 80035d8:	4b41      	ldr	r3, [pc, #260]	; (80036e0 <main+0x2d0>)
 80035da:	701a      	strb	r2, [r3, #0]
	      	/* Move to offset to the end of the file */
	      	fresult = f_lseek(&fil, f_size(&fil));
 80035dc:	4b41      	ldr	r3, [pc, #260]	; (80036e4 <main+0x2d4>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	4619      	mov	r1, r3
 80035e2:	4840      	ldr	r0, [pc, #256]	; (80036e4 <main+0x2d4>)
 80035e4:	f009 f858 	bl	800c698 <f_lseek>
 80035e8:	4603      	mov	r3, r0
 80035ea:	461a      	mov	r2, r3
 80035ec:	4b3c      	ldr	r3, [pc, #240]	; (80036e0 <main+0x2d0>)
 80035ee:	701a      	strb	r2, [r3, #0]
	      	/* write the string to the file */
	      	if(indx == 0)
 80035f0:	4b3d      	ldr	r3, [pc, #244]	; (80036e8 <main+0x2d8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d103      	bne.n	8003600 <main+0x1f0>
	      	{
	      		sprintf (yazi,"Index,Ortam Sicakligi,Nem,Basinc,Vucut Sicakligi,Nabiz(bpm)\n");
 80035f8:	493c      	ldr	r1, [pc, #240]	; (80036ec <main+0x2dc>)
 80035fa:	483d      	ldr	r0, [pc, #244]	; (80036f0 <main+0x2e0>)
 80035fc:	f00a f9d8 	bl	800d9b0 <siprintf>
	      	}
	      	if (indx > 0)
 8003600:	4b39      	ldr	r3, [pc, #228]	; (80036e8 <main+0x2d8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	dd2d      	ble.n	8003664 <main+0x254>
	      	{
	      	sprintf (yazi,"%d,%.2f,%.2f,%.2f,%.2f,%d \n", indx, Temperature, Humidity, Pressure, Temperature_DS,nabiz_bpm);
 8003608:	4b37      	ldr	r3, [pc, #220]	; (80036e8 <main+0x2d8>)
 800360a:	681e      	ldr	r6, [r3, #0]
 800360c:	4b39      	ldr	r3, [pc, #228]	; (80036f4 <main+0x2e4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f7fc ffa1 	bl	8000558 <__aeabi_f2d>
 8003616:	4604      	mov	r4, r0
 8003618:	460d      	mov	r5, r1
 800361a:	4b37      	ldr	r3, [pc, #220]	; (80036f8 <main+0x2e8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7fc ff9a 	bl	8000558 <__aeabi_f2d>
 8003624:	4680      	mov	r8, r0
 8003626:	4689      	mov	r9, r1
 8003628:	4b34      	ldr	r3, [pc, #208]	; (80036fc <main+0x2ec>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f7fc ff93 	bl	8000558 <__aeabi_f2d>
 8003632:	4682      	mov	sl, r0
 8003634:	468b      	mov	fp, r1
 8003636:	4b25      	ldr	r3, [pc, #148]	; (80036cc <main+0x2bc>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fc ff8c 	bl	8000558 <__aeabi_f2d>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	492e      	ldr	r1, [pc, #184]	; (8003700 <main+0x2f0>)
 8003646:	6809      	ldr	r1, [r1, #0]
 8003648:	9108      	str	r1, [sp, #32]
 800364a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800364e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003652:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003656:	e9cd 4500 	strd	r4, r5, [sp]
 800365a:	4632      	mov	r2, r6
 800365c:	4929      	ldr	r1, [pc, #164]	; (8003704 <main+0x2f4>)
 800365e:	4824      	ldr	r0, [pc, #144]	; (80036f0 <main+0x2e0>)
 8003660:	f00a f9a6 	bl	800d9b0 <siprintf>
	      	}
	      	indx++;
 8003664:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <main+0x2d8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3301      	adds	r3, #1
 800366a:	4a1f      	ldr	r2, [pc, #124]	; (80036e8 <main+0x2d8>)
 800366c:	6013      	str	r3, [r2, #0]
	      	fresult = f_puts(yazi , &fil);
 800366e:	491d      	ldr	r1, [pc, #116]	; (80036e4 <main+0x2d4>)
 8003670:	481f      	ldr	r0, [pc, #124]	; (80036f0 <main+0x2e0>)
 8003672:	f009 faac 	bl	800cbce <f_puts>
 8003676:	4603      	mov	r3, r0
 8003678:	b2da      	uxtb	r2, r3
 800367a:	4b19      	ldr	r3, [pc, #100]	; (80036e0 <main+0x2d0>)
 800367c:	701a      	strb	r2, [r3, #0]
	      	f_close (&fil);
 800367e:	4819      	ldr	r0, [pc, #100]	; (80036e4 <main+0x2d4>)
 8003680:	f008 ffe0 	bl	800c644 <f_close>
	      	////////////////////////////////////////////////////////////////////////   sd card unmount
	      	fresult = f_mount(NULL, "/", 1);
 8003684:	2201      	movs	r2, #1
 8003686:	4914      	ldr	r1, [pc, #80]	; (80036d8 <main+0x2c8>)
 8003688:	2000      	movs	r0, #0
 800368a:	f008 fbb7 	bl	800bdfc <f_mount>
 800368e:	4603      	mov	r3, r0
 8003690:	461a      	mov	r2, r3
 8003692:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <main+0x2d0>)
 8003694:	701a      	strb	r2, [r3, #0]
	        /////////////////////////////////////////
	      	HAL_Delay (100);  // 1000 ms,100 ms de hardfaulta girmedi
 8003696:	2064      	movs	r0, #100	; 0x64
 8003698:	f001 fa82 	bl	8004ba0 <HAL_Delay>
	  if (max30102_has_interrupt(&max30102))
 800369c:	e72e      	b.n	80034fc <main+0xec>
 800369e:	bf00      	nop
 80036a0:	200003e4 	.word	0x200003e4
 80036a4:	2000039c 	.word	0x2000039c
 80036a8:	200005c0 	.word	0x200005c0
 80036ac:	200006f1 	.word	0x200006f1
 80036b0:	20000470 	.word	0x20000470
 80036b4:	2000029c 	.word	0x2000029c
 80036b8:	200004b4 	.word	0x200004b4
 80036bc:	40c66666 	.word	0x40c66666
 80036c0:	2000081c 	.word	0x2000081c
 80036c4:	2000081d 	.word	0x2000081d
 80036c8:	2000081e 	.word	0x2000081e
 80036cc:	20000818 	.word	0x20000818
 80036d0:	080112e0 	.word	0x080112e0
 80036d4:	200007d8 	.word	0x200007d8
 80036d8:	080112ec 	.word	0x080112ec
 80036dc:	20000820 	.word	0x20000820
 80036e0:	20002888 	.word	0x20002888
 80036e4:	20001858 	.word	0x20001858
 80036e8:	2000070c 	.word	0x2000070c
 80036ec:	080112f0 	.word	0x080112f0
 80036f0:	20000710 	.word	0x20000710
 80036f4:	2000080c 	.word	0x2000080c
 80036f8:	20000814 	.word	0x20000814
 80036fc:	20000810 	.word	0x20000810
 8003700:	200006f8 	.word	0x200006f8
 8003704:	08011330 	.word	0x08011330

08003708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b094      	sub	sp, #80	; 0x50
 800370c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800370e:	f107 0320 	add.w	r3, r7, #32
 8003712:	2230      	movs	r2, #48	; 0x30
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f009 fbe8 	bl	800ceec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800371c:	f107 030c 	add.w	r3, r7, #12
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	60da      	str	r2, [r3, #12]
 800372a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800372c:	2300      	movs	r3, #0
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	4b27      	ldr	r3, [pc, #156]	; (80037d0 <SystemClock_Config+0xc8>)
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	4a26      	ldr	r2, [pc, #152]	; (80037d0 <SystemClock_Config+0xc8>)
 8003736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800373a:	6413      	str	r3, [r2, #64]	; 0x40
 800373c:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <SystemClock_Config+0xc8>)
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003748:	2300      	movs	r3, #0
 800374a:	607b      	str	r3, [r7, #4]
 800374c:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <SystemClock_Config+0xcc>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a20      	ldr	r2, [pc, #128]	; (80037d4 <SystemClock_Config+0xcc>)
 8003752:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <SystemClock_Config+0xcc>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003760:	607b      	str	r3, [r7, #4]
 8003762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003764:	2302      	movs	r3, #2
 8003766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003768:	2301      	movs	r3, #1
 800376a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800376c:	2310      	movs	r3, #16
 800376e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003770:	2302      	movs	r3, #2
 8003772:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003774:	2300      	movs	r3, #0
 8003776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003778:	2308      	movs	r3, #8
 800377a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800377c:	2364      	movs	r3, #100	; 0x64
 800377e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003780:	2302      	movs	r3, #2
 8003782:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003784:	2304      	movs	r3, #4
 8003786:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003788:	f107 0320 	add.w	r3, r7, #32
 800378c:	4618      	mov	r0, r3
 800378e:	f003 fc13 	bl	8006fb8 <HAL_RCC_OscConfig>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003798:	f000 fb0a 	bl	8003db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800379c:	230f      	movs	r3, #15
 800379e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037a0:	2302      	movs	r3, #2
 80037a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80037a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80037b2:	f107 030c 	add.w	r3, r7, #12
 80037b6:	2103      	movs	r1, #3
 80037b8:	4618      	mov	r0, r3
 80037ba:	f003 fe75 	bl	80074a8 <HAL_RCC_ClockConfig>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80037c4:	f000 faf4 	bl	8003db0 <Error_Handler>
  }
}
 80037c8:	bf00      	nop
 80037ca:	3750      	adds	r7, #80	; 0x50
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40023800 	.word	0x40023800
 80037d4:	40007000 	.word	0x40007000

080037d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80037de:	463b      	mov	r3, r7
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	609a      	str	r2, [r3, #8]
 80037e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80037ea:	4b21      	ldr	r3, [pc, #132]	; (8003870 <MX_ADC1_Init+0x98>)
 80037ec:	4a21      	ldr	r2, [pc, #132]	; (8003874 <MX_ADC1_Init+0x9c>)
 80037ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80037f0:	4b1f      	ldr	r3, [pc, #124]	; (8003870 <MX_ADC1_Init+0x98>)
 80037f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80037f8:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <MX_ADC1_Init+0x98>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80037fe:	4b1c      	ldr	r3, [pc, #112]	; (8003870 <MX_ADC1_Init+0x98>)
 8003800:	2200      	movs	r2, #0
 8003802:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003804:	4b1a      	ldr	r3, [pc, #104]	; (8003870 <MX_ADC1_Init+0x98>)
 8003806:	2201      	movs	r2, #1
 8003808:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800380a:	4b19      	ldr	r3, [pc, #100]	; (8003870 <MX_ADC1_Init+0x98>)
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003812:	4b17      	ldr	r3, [pc, #92]	; (8003870 <MX_ADC1_Init+0x98>)
 8003814:	2200      	movs	r2, #0
 8003816:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003818:	4b15      	ldr	r3, [pc, #84]	; (8003870 <MX_ADC1_Init+0x98>)
 800381a:	4a17      	ldr	r2, [pc, #92]	; (8003878 <MX_ADC1_Init+0xa0>)
 800381c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800381e:	4b14      	ldr	r3, [pc, #80]	; (8003870 <MX_ADC1_Init+0x98>)
 8003820:	2200      	movs	r2, #0
 8003822:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003824:	4b12      	ldr	r3, [pc, #72]	; (8003870 <MX_ADC1_Init+0x98>)
 8003826:	2201      	movs	r2, #1
 8003828:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800382a:	4b11      	ldr	r3, [pc, #68]	; (8003870 <MX_ADC1_Init+0x98>)
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003832:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <MX_ADC1_Init+0x98>)
 8003834:	2201      	movs	r2, #1
 8003836:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003838:	480d      	ldr	r0, [pc, #52]	; (8003870 <MX_ADC1_Init+0x98>)
 800383a:	f001 f9d5 	bl	8004be8 <HAL_ADC_Init>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003844:	f000 fab4 	bl	8003db0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003848:	2300      	movs	r3, #0
 800384a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800384c:	2301      	movs	r3, #1
 800384e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003850:	2300      	movs	r3, #0
 8003852:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003854:	463b      	mov	r3, r7
 8003856:	4619      	mov	r1, r3
 8003858:	4805      	ldr	r0, [pc, #20]	; (8003870 <MX_ADC1_Init+0x98>)
 800385a:	f001 fa09 	bl	8004c70 <HAL_ADC_ConfigChannel>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003864:	f000 faa4 	bl	8003db0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20000254 	.word	0x20000254
 8003874:	40012000 	.word	0x40012000
 8003878:	0f000001 	.word	0x0f000001

0800387c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003880:	4b12      	ldr	r3, [pc, #72]	; (80038cc <MX_I2C1_Init+0x50>)
 8003882:	4a13      	ldr	r2, [pc, #76]	; (80038d0 <MX_I2C1_Init+0x54>)
 8003884:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <MX_I2C1_Init+0x50>)
 8003888:	4a12      	ldr	r2, [pc, #72]	; (80038d4 <MX_I2C1_Init+0x58>)
 800388a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800388c:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <MX_I2C1_Init+0x50>)
 800388e:	2200      	movs	r2, #0
 8003890:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003892:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <MX_I2C1_Init+0x50>)
 8003894:	2200      	movs	r2, #0
 8003896:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <MX_I2C1_Init+0x50>)
 800389a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800389e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80038a0:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <MX_I2C1_Init+0x50>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <MX_I2C1_Init+0x50>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80038ac:	4b07      	ldr	r3, [pc, #28]	; (80038cc <MX_I2C1_Init+0x50>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <MX_I2C1_Init+0x50>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80038b8:	4804      	ldr	r0, [pc, #16]	; (80038cc <MX_I2C1_Init+0x50>)
 80038ba:	f001 ff49 	bl	8005750 <HAL_I2C_Init>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80038c4:	f000 fa74 	bl	8003db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80038c8:	bf00      	nop
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	2000029c 	.word	0x2000029c
 80038d0:	40005400 	.word	0x40005400
 80038d4:	000186a0 	.word	0x000186a0

080038d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80038dc:	4b12      	ldr	r3, [pc, #72]	; (8003928 <MX_I2C2_Init+0x50>)
 80038de:	4a13      	ldr	r2, [pc, #76]	; (800392c <MX_I2C2_Init+0x54>)
 80038e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80038e2:	4b11      	ldr	r3, [pc, #68]	; (8003928 <MX_I2C2_Init+0x50>)
 80038e4:	4a12      	ldr	r2, [pc, #72]	; (8003930 <MX_I2C2_Init+0x58>)
 80038e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80038e8:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <MX_I2C2_Init+0x50>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80038ee:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <MX_I2C2_Init+0x50>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <MX_I2C2_Init+0x50>)
 80038f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80038fc:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <MX_I2C2_Init+0x50>)
 80038fe:	2200      	movs	r2, #0
 8003900:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003902:	4b09      	ldr	r3, [pc, #36]	; (8003928 <MX_I2C2_Init+0x50>)
 8003904:	2200      	movs	r2, #0
 8003906:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003908:	4b07      	ldr	r3, [pc, #28]	; (8003928 <MX_I2C2_Init+0x50>)
 800390a:	2200      	movs	r2, #0
 800390c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800390e:	4b06      	ldr	r3, [pc, #24]	; (8003928 <MX_I2C2_Init+0x50>)
 8003910:	2200      	movs	r2, #0
 8003912:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003914:	4804      	ldr	r0, [pc, #16]	; (8003928 <MX_I2C2_Init+0x50>)
 8003916:	f001 ff1b 	bl	8005750 <HAL_I2C_Init>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003920:	f000 fa46 	bl	8003db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003924:	bf00      	nop
 8003926:	bd80      	pop	{r7, pc}
 8003928:	200002f0 	.word	0x200002f0
 800392c:	40005800 	.word	0x40005800
 8003930:	000186a0 	.word	0x000186a0

08003934 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003938:	4b17      	ldr	r3, [pc, #92]	; (8003998 <MX_SPI1_Init+0x64>)
 800393a:	4a18      	ldr	r2, [pc, #96]	; (800399c <MX_SPI1_Init+0x68>)
 800393c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800393e:	4b16      	ldr	r3, [pc, #88]	; (8003998 <MX_SPI1_Init+0x64>)
 8003940:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003944:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003946:	4b14      	ldr	r3, [pc, #80]	; (8003998 <MX_SPI1_Init+0x64>)
 8003948:	2200      	movs	r2, #0
 800394a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800394c:	4b12      	ldr	r3, [pc, #72]	; (8003998 <MX_SPI1_Init+0x64>)
 800394e:	2200      	movs	r2, #0
 8003950:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003952:	4b11      	ldr	r3, [pc, #68]	; (8003998 <MX_SPI1_Init+0x64>)
 8003954:	2200      	movs	r2, #0
 8003956:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003958:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <MX_SPI1_Init+0x64>)
 800395a:	2200      	movs	r2, #0
 800395c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800395e:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <MX_SPI1_Init+0x64>)
 8003960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003964:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003966:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <MX_SPI1_Init+0x64>)
 8003968:	2220      	movs	r2, #32
 800396a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800396c:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <MX_SPI1_Init+0x64>)
 800396e:	2200      	movs	r2, #0
 8003970:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003972:	4b09      	ldr	r3, [pc, #36]	; (8003998 <MX_SPI1_Init+0x64>)
 8003974:	2200      	movs	r2, #0
 8003976:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003978:	4b07      	ldr	r3, [pc, #28]	; (8003998 <MX_SPI1_Init+0x64>)
 800397a:	2200      	movs	r2, #0
 800397c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800397e:	4b06      	ldr	r3, [pc, #24]	; (8003998 <MX_SPI1_Init+0x64>)
 8003980:	220a      	movs	r2, #10
 8003982:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003984:	4804      	ldr	r0, [pc, #16]	; (8003998 <MX_SPI1_Init+0x64>)
 8003986:	f003 ffa1 	bl	80078cc <HAL_SPI_Init>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003990:	f000 fa0e 	bl	8003db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003994:	bf00      	nop
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20000344 	.word	0x20000344
 800399c:	40013000 	.word	0x40013000

080039a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039a6:	f107 0308 	add.w	r3, r7, #8
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	605a      	str	r2, [r3, #4]
 80039b0:	609a      	str	r2, [r3, #8]
 80039b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039b4:	463b      	mov	r3, r7
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80039bc:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <MX_TIM2_Init+0x94>)
 80039be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80039c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80039c4:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <MX_TIM2_Init+0x94>)
 80039c6:	2263      	movs	r2, #99	; 0x63
 80039c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ca:	4b1a      	ldr	r3, [pc, #104]	; (8003a34 <MX_TIM2_Init+0x94>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80039d0:	4b18      	ldr	r3, [pc, #96]	; (8003a34 <MX_TIM2_Init+0x94>)
 80039d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80039d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039d8:	4b16      	ldr	r3, [pc, #88]	; (8003a34 <MX_TIM2_Init+0x94>)
 80039da:	2200      	movs	r2, #0
 80039dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039de:	4b15      	ldr	r3, [pc, #84]	; (8003a34 <MX_TIM2_Init+0x94>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80039e4:	4813      	ldr	r0, [pc, #76]	; (8003a34 <MX_TIM2_Init+0x94>)
 80039e6:	f004 fba3 	bl	8008130 <HAL_TIM_Base_Init>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80039f0:	f000 f9de 	bl	8003db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80039fa:	f107 0308 	add.w	r3, r7, #8
 80039fe:	4619      	mov	r1, r3
 8003a00:	480c      	ldr	r0, [pc, #48]	; (8003a34 <MX_TIM2_Init+0x94>)
 8003a02:	f004 fda9 	bl	8008558 <HAL_TIM_ConfigClockSource>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003a0c:	f000 f9d0 	bl	8003db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a10:	2300      	movs	r3, #0
 8003a12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a14:	2300      	movs	r3, #0
 8003a16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a18:	463b      	mov	r3, r7
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4805      	ldr	r0, [pc, #20]	; (8003a34 <MX_TIM2_Init+0x94>)
 8003a1e:	f004 ffa5 	bl	800896c <HAL_TIMEx_MasterConfigSynchronization>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003a28:	f000 f9c2 	bl	8003db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003a2c:	bf00      	nop
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	2000039c 	.word	0x2000039c

08003a38 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a3e:	f107 0308 	add.w	r3, r7, #8
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	605a      	str	r2, [r3, #4]
 8003a48:	609a      	str	r2, [r3, #8]
 8003a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a4c:	463b      	mov	r3, r7
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003a54:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <MX_TIM5_Init+0x94>)
 8003a56:	4a1e      	ldr	r2, [pc, #120]	; (8003ad0 <MX_TIM5_Init+0x98>)
 8003a58:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100-1;
 8003a5a:	4b1c      	ldr	r3, [pc, #112]	; (8003acc <MX_TIM5_Init+0x94>)
 8003a5c:	2263      	movs	r2, #99	; 0x63
 8003a5e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a60:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <MX_TIM5_Init+0x94>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003a66:	4b19      	ldr	r3, [pc, #100]	; (8003acc <MX_TIM5_Init+0x94>)
 8003a68:	f04f 32ff 	mov.w	r2, #4294967295
 8003a6c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a6e:	4b17      	ldr	r3, [pc, #92]	; (8003acc <MX_TIM5_Init+0x94>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a74:	4b15      	ldr	r3, [pc, #84]	; (8003acc <MX_TIM5_Init+0x94>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003a7a:	4814      	ldr	r0, [pc, #80]	; (8003acc <MX_TIM5_Init+0x94>)
 8003a7c:	f004 fb58 	bl	8008130 <HAL_TIM_Base_Init>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8003a86:	f000 f993 	bl	8003db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003a90:	f107 0308 	add.w	r3, r7, #8
 8003a94:	4619      	mov	r1, r3
 8003a96:	480d      	ldr	r0, [pc, #52]	; (8003acc <MX_TIM5_Init+0x94>)
 8003a98:	f004 fd5e 	bl	8008558 <HAL_TIM_ConfigClockSource>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003aa2:	f000 f985 	bl	8003db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003aae:	463b      	mov	r3, r7
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4806      	ldr	r0, [pc, #24]	; (8003acc <MX_TIM5_Init+0x94>)
 8003ab4:	f004 ff5a 	bl	800896c <HAL_TIMEx_MasterConfigSynchronization>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003abe:	f000 f977 	bl	8003db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003ac2:	bf00      	nop
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	200003e4 	.word	0x200003e4
 8003ad0:	40000c00 	.word	0x40000c00

08003ad4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ad8:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <MX_USART1_UART_Init+0x4c>)
 8003ada:	4a12      	ldr	r2, [pc, #72]	; (8003b24 <MX_USART1_UART_Init+0x50>)
 8003adc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003ade:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <MX_USART1_UART_Init+0x4c>)
 8003ae0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003ae4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ae6:	4b0e      	ldr	r3, [pc, #56]	; (8003b20 <MX_USART1_UART_Init+0x4c>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003aec:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <MX_USART1_UART_Init+0x4c>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003af2:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <MX_USART1_UART_Init+0x4c>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003af8:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <MX_USART1_UART_Init+0x4c>)
 8003afa:	220c      	movs	r2, #12
 8003afc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003afe:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <MX_USART1_UART_Init+0x4c>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b04:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <MX_USART1_UART_Init+0x4c>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b0a:	4805      	ldr	r0, [pc, #20]	; (8003b20 <MX_USART1_UART_Init+0x4c>)
 8003b0c:	f004 ffb0 	bl	8008a70 <HAL_UART_Init>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003b16:	f000 f94b 	bl	8003db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	2000042c 	.word	0x2000042c
 8003b24:	40011000 	.word	0x40011000

08003b28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <MX_USART2_UART_Init+0x4c>)
 8003b2e:	4a12      	ldr	r2, [pc, #72]	; (8003b78 <MX_USART2_UART_Init+0x50>)
 8003b30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003b32:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <MX_USART2_UART_Init+0x4c>)
 8003b34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003b38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b3a:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <MX_USART2_UART_Init+0x4c>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b40:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <MX_USART2_UART_Init+0x4c>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b46:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <MX_USART2_UART_Init+0x4c>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b4c:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <MX_USART2_UART_Init+0x4c>)
 8003b4e:	220c      	movs	r2, #12
 8003b50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b52:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <MX_USART2_UART_Init+0x4c>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <MX_USART2_UART_Init+0x4c>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b5e:	4805      	ldr	r0, [pc, #20]	; (8003b74 <MX_USART2_UART_Init+0x4c>)
 8003b60:	f004 ff86 	bl	8008a70 <HAL_UART_Init>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b6a:	f000 f921 	bl	8003db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000470 	.word	0x20000470
 8003b78:	40004400 	.word	0x40004400

08003b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08a      	sub	sp, #40	; 0x28
 8003b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b82:	f107 0314 	add.w	r3, r7, #20
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	605a      	str	r2, [r3, #4]
 8003b8c:	609a      	str	r2, [r3, #8]
 8003b8e:	60da      	str	r2, [r3, #12]
 8003b90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	4b4c      	ldr	r3, [pc, #304]	; (8003cc8 <MX_GPIO_Init+0x14c>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	4a4b      	ldr	r2, [pc, #300]	; (8003cc8 <MX_GPIO_Init+0x14c>)
 8003b9c:	f043 0304 	orr.w	r3, r3, #4
 8003ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba2:	4b49      	ldr	r3, [pc, #292]	; (8003cc8 <MX_GPIO_Init+0x14c>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	4b45      	ldr	r3, [pc, #276]	; (8003cc8 <MX_GPIO_Init+0x14c>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	4a44      	ldr	r2, [pc, #272]	; (8003cc8 <MX_GPIO_Init+0x14c>)
 8003bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bbe:	4b42      	ldr	r3, [pc, #264]	; (8003cc8 <MX_GPIO_Init+0x14c>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	4b3e      	ldr	r3, [pc, #248]	; (8003cc8 <MX_GPIO_Init+0x14c>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd2:	4a3d      	ldr	r2, [pc, #244]	; (8003cc8 <MX_GPIO_Init+0x14c>)
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bda:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <MX_GPIO_Init+0x14c>)
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	607b      	str	r3, [r7, #4]
 8003bea:	4b37      	ldr	r3, [pc, #220]	; (8003cc8 <MX_GPIO_Init+0x14c>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	4a36      	ldr	r2, [pc, #216]	; (8003cc8 <MX_GPIO_Init+0x14c>)
 8003bf0:	f043 0302 	orr.w	r3, r3, #2
 8003bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bf6:	4b34      	ldr	r3, [pc, #208]	; (8003cc8 <MX_GPIO_Init+0x14c>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	607b      	str	r3, [r7, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS_Sensor_GPIO_Port, DS_Sensor_Pin, GPIO_PIN_RESET);
 8003c02:	2200      	movs	r2, #0
 8003c04:	2102      	movs	r1, #2
 8003c06:	4831      	ldr	r0, [pc, #196]	; (8003ccc <MX_GPIO_Init+0x150>)
 8003c08:	f001 fd70 	bl	80056ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2101      	movs	r1, #1
 8003c10:	482f      	ldr	r0, [pc, #188]	; (8003cd0 <MX_GPIO_Init+0x154>)
 8003c12:	f001 fd6b 	bl	80056ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003c16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c26:	f107 0314 	add.w	r3, r7, #20
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4829      	ldr	r0, [pc, #164]	; (8003cd4 <MX_GPIO_Init+0x158>)
 8003c2e:	f001 fbc1 	bl	80053b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS_Sensor_Pin */
  GPIO_InitStruct.Pin = DS_Sensor_Pin;
 8003c32:	2302      	movs	r3, #2
 8003c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c36:	2301      	movs	r3, #1
 8003c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DS_Sensor_GPIO_Port, &GPIO_InitStruct);
 8003c42:	f107 0314 	add.w	r3, r7, #20
 8003c46:	4619      	mov	r1, r3
 8003c48:	4820      	ldr	r0, [pc, #128]	; (8003ccc <MX_GPIO_Init+0x150>)
 8003c4a:	f001 fbb3 	bl	80053b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c52:	2301      	movs	r3, #1
 8003c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c5e:	f107 0314 	add.w	r3, r7, #20
 8003c62:	4619      	mov	r1, r3
 8003c64:	481a      	ldr	r0, [pc, #104]	; (8003cd0 <MX_GPIO_Init+0x154>)
 8003c66:	f001 fba5 	bl	80053b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Oksimetre_Interrupt_Pin */
  GPIO_InitStruct.Pin = Oksimetre_Interrupt_Pin;
 8003c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c70:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c76:	2301      	movs	r3, #1
 8003c78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Oksimetre_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8003c7a:	f107 0314 	add.w	r3, r7, #20
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4813      	ldr	r0, [pc, #76]	; (8003cd0 <MX_GPIO_Init+0x154>)
 8003c82:	f001 fb97 	bl	80053b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8003c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8003c94:	f107 0314 	add.w	r3, r7, #20
 8003c98:	4619      	mov	r1, r3
 8003c9a:	480d      	ldr	r0, [pc, #52]	; (8003cd0 <MX_GPIO_Init+0x154>)
 8003c9c:	f001 fb8a 	bl	80053b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	2017      	movs	r0, #23
 8003ca6:	f001 fac9 	bl	800523c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003caa:	2017      	movs	r0, #23
 8003cac:	f001 fae2 	bl	8005274 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	2028      	movs	r0, #40	; 0x28
 8003cb6:	f001 fac1 	bl	800523c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003cba:	2028      	movs	r0, #40	; 0x28
 8003cbc:	f001 fada 	bl	8005274 <HAL_NVIC_EnableIRQ>

}
 8003cc0:	bf00      	nop
 8003cc2:	3728      	adds	r7, #40	; 0x28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	40020000 	.word	0x40020000
 8003cd0:	40020400 	.word	0x40020400
 8003cd4:	40020800 	.word	0x40020800

08003cd8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)  //Nabiz hesaplama,Not:EXTI hattında oksimetre 2(counteroutside)*6=12 bpm ekliyor.
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	80fb      	strh	r3, [r7, #6]
	counterOutside++; //For testing only
 8003ce2:	4b11      	ldr	r3, [pc, #68]	; (8003d28 <HAL_GPIO_EXTI_Callback+0x50>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	4a0f      	ldr	r2, [pc, #60]	; (8003d28 <HAL_GPIO_EXTI_Callback+0x50>)
 8003cea:	6013      	str	r3, [r2, #0]
	  currentMillis = HAL_GetTick();
 8003cec:	f000 ff4c 	bl	8004b88 <HAL_GetTick>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <HAL_GPIO_EXTI_Callback+0x54>)
 8003cf6:	601a      	str	r2, [r3, #0]
	  if (GPIO_Pin == GPIO_PIN_13 && (currentMillis - previousMillis > 30))
 8003cf8:	88fb      	ldrh	r3, [r7, #6]
 8003cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cfe:	d10f      	bne.n	8003d20 <HAL_GPIO_EXTI_Callback+0x48>
 8003d00:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <HAL_GPIO_EXTI_Callback+0x54>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <HAL_GPIO_EXTI_Callback+0x58>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b1e      	cmp	r3, #30
 8003d0c:	dd08      	ble.n	8003d20 <HAL_GPIO_EXTI_Callback+0x48>
	  {
	    counterInside++; //For testing only
 8003d0e:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3301      	adds	r3, #1
 8003d14:	4a07      	ldr	r2, [pc, #28]	; (8003d34 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003d16:	6013      	str	r3, [r2, #0]
	    previousMillis = currentMillis;
 8003d18:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <HAL_GPIO_EXTI_Callback+0x54>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a04      	ldr	r2, [pc, #16]	; (8003d30 <HAL_GPIO_EXTI_Callback+0x58>)
 8003d1e:	6013      	str	r3, [r2, #0]
	  }
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	200006fc 	.word	0x200006fc
 8003d2c:	20000708 	.word	0x20000708
 8003d30:	20000704 	.word	0x20000704
 8003d34:	20000700 	.word	0x20000700

08003d38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d48:	d11c      	bne.n	8003d84 <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		milisaniye++;
 8003d4a:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	4a12      	ldr	r2, [pc, #72]	; (8003d9c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003d52:	6013      	str	r3, [r2, #0]
		if(milisaniye==10000)
 8003d54:	4b11      	ldr	r3, [pc, #68]	; (8003d9c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d111      	bne.n	8003d84 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			nabiz_bpm=counterOutside*6;
 8003d60:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	4613      	mov	r3, r2
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	4413      	add	r3, r2
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4b0d      	ldr	r3, [pc, #52]	; (8003da4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003d70:	601a      	str	r2, [r3, #0]
			milisaniye=0;
 8003d72:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
			counterOutside=0;
 8003d78:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
			counterInside=0;
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
		}
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a08      	ldr	r2, [pc, #32]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d101      	bne.n	8003d92 <HAL_TIM_PeriodElapsedCallback+0x5a>
    HAL_IncTick();
 8003d8e:	f000 fee7 	bl	8004b60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	200006f4 	.word	0x200006f4
 8003da0:	200006fc 	.word	0x200006fc
 8003da4:	200006f8 	.word	0x200006f8
 8003da8:	20000700 	.word	0x20000700
 8003dac:	40010000 	.word	0x40010000

08003db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003db4:	b672      	cpsid	i
}
 8003db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003db8:	e7fe      	b.n	8003db8 <Error_Handler+0x8>

08003dba <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b082      	sub	sp, #8
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	2280      	movs	r2, #128	; 0x80
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f009 f886 	bl	800ceec <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3384      	adds	r3, #132	; 0x84
 8003de4:	2280      	movs	r2, #128	; 0x80
 8003de6:	2100      	movs	r1, #0
 8003de8:	4618      	mov	r0, r3
 8003dea:	f009 f87f 	bl	800ceec <memset>
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b088      	sub	sp, #32
 8003dfa:	af02      	add	r7, sp, #8
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	461a      	mov	r2, r3
 8003e02:	460b      	mov	r3, r1
 8003e04:	72fb      	strb	r3, [r7, #11]
 8003e06:	4613      	mov	r3, r2
 8003e08:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8003e0a:	893b      	ldrh	r3, [r7, #8]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f009 f84e 	bl	800ceb0 <malloc>
 8003e14:	4603      	mov	r3, r0
 8003e16:	617b      	str	r3, [r7, #20]
    *payload = reg;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	7afa      	ldrb	r2, [r7, #11]
 8003e1c:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d009      	beq.n	8003e38 <max30102_write+0x42>
 8003e24:	893b      	ldrh	r3, [r7, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d006      	beq.n	8003e38 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	893a      	ldrh	r2, [r7, #8]
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f009 f84c 	bl	800ced0 <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	893b      	ldrh	r3, [r7, #8]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e46:	9200      	str	r2, [sp, #0]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	21ae      	movs	r1, #174	; 0xae
 8003e4c:	f001 fdc4 	bl	80059d8 <HAL_I2C_Master_Transmit>
    free(payload);
 8003e50:	6978      	ldr	r0, [r7, #20]
 8003e52:	f009 f835 	bl	800cec0 <free>
}
 8003e56:	bf00      	nop
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b088      	sub	sp, #32
 8003e62:	af02      	add	r7, sp, #8
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	72fb      	strb	r3, [r7, #11]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 8003e72:	7afb      	ldrb	r3, [r7, #11]
 8003e74:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	f107 0217 	add.w	r2, r7, #23
 8003e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	2301      	movs	r3, #1
 8003e86:	21ae      	movs	r1, #174	; 0xae
 8003e88:	f001 fda6 	bl	80059d8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6818      	ldr	r0, [r3, #0]
 8003e90:	893b      	ldrh	r3, [r7, #8]
 8003e92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e96:	9200      	str	r2, [sp, #0]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	21ae      	movs	r1, #174	; 0xae
 8003e9c:	f001 fe9a 	bl	8005bd4 <HAL_I2C_Master_Receive>
}
 8003ea0:	bf00      	nop
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 8003eb0:	2340      	movs	r3, #64	; 0x40
 8003eb2:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 8003eb4:	f107 020f 	add.w	r2, r7, #15
 8003eb8:	2301      	movs	r3, #1
 8003eba:	2109      	movs	r1, #9
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff ff9a 	bl	8003df6 <max30102_write>
}
 8003ec2:	bf00      	nop
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8003eda:	f107 020f 	add.w	r2, r7, #15
 8003ede:	2301      	movs	r3, #1
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff ffbb 	bl	8003e5e <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
 8003eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 8003ef2:	78fb      	ldrb	r3, [r7, #3]
 8003ef4:	01db      	lsls	r3, r3, #7
 8003ef6:	b25a      	sxtb	r2, r3
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
 8003efa:	b25b      	sxtb	r3, r3
 8003efc:	4313      	orrs	r3, r2
 8003efe:	b25b      	sxtb	r3, r3
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8003f04:	f107 020f 	add.w	r2, r7, #15
 8003f08:	2301      	movs	r3, #1
 8003f0a:	2102      	movs	r1, #2
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff ff72 	bl	8003df6 <max30102_write>
}
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	460b      	mov	r3, r1
 8003f24:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 8003f34:	f107 020f 	add.w	r2, r7, #15
 8003f38:	2301      	movs	r3, #1
 8003f3a:	2103      	movs	r1, #3
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff ff5a 	bl	8003df6 <max30102_write>
}
 8003f42:	bf00      	nop
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	460b      	mov	r3, r1
 8003f54:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 8003f56:	78fb      	ldrb	r3, [r7, #3]
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 8003f64:	f107 020f 	add.w	r2, r7, #15
 8003f68:	2301      	movs	r3, #1
 8003f6a:	2121      	movs	r1, #33	; 0x21
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7ff ff42 	bl	8003df6 <max30102_write>
}
 8003f72:	bf00      	nop
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <max30102_on_interrupt>:
 * @brief Set interrupt flag on interrupt. To be called in the corresponding external interrupt handler.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_on_interrupt(max30102_t *obj)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
    obj->_interrupt_flag = 1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <max30102_has_interrupt>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @return uint8_t Active (1) or inactive (0).
 */
uint8_t max30102_has_interrupt(max30102_t *obj)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
    return obj->_interrupt_flag;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <max30102_interrupt_handler>:
 * @brief Read interrupt status registers (0x00 and 0x01) and perform corresponding tasks.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_interrupt_handler(max30102_t *obj)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
    uint8_t reg[2] = {0x00};
 8003fb8:	2300      	movs	r3, #0
 8003fba:	81bb      	strh	r3, [r7, #12]
    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
    max30102_read(obj, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 8003fbc:	f107 020c 	add.w	r2, r7, #12
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff ff4a 	bl	8003e5e <max30102_read>

    if ((reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 8003fca:	7b3b      	ldrb	r3, [r7, #12]
 8003fcc:	09db      	lsrs	r3, r3, #7
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <max30102_interrupt_handler+0x2e>
    {
        // FIFO almost full
        max30102_read_fifo(obj); //burada okuyor sample dataları
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f94e 	bl	800427a <max30102_read_fifo>
    if ((reg[0] >> MAX30102_INTERRUPT_ALC_OVF) & 0x01)
    {
        // Ambient light overflow
    }

    if ((reg[1] >> MAX30102_INTERRUPT_DIE_TEMP_RDY) & 0x01)
 8003fde:	7b7b      	ldrb	r3, [r7, #13]
 8003fe0:	085b      	lsrs	r3, r3, #1
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d007      	beq.n	8003ffc <max30102_interrupt_handler+0x4c>
    {
        // Temperature data ready
        int8_t temp_int;
        uint8_t temp_frac;
        max30102_read_temp(obj, &temp_int, &temp_frac);
 8003fec:	f107 020a 	add.w	r2, r7, #10
 8003ff0:	f107 030b 	add.w	r3, r7, #11
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f9a6 	bl	8004348 <max30102_read_temp>
        // float temp = temp_int + 0.0625f * temp_frac;
    }

    // Reset interrupt flag
    obj->_interrupt_flag = 0;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
}
 8004004:	bf00      	nop
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 8004018:	f107 020f 	add.w	r2, r7, #15
 800401c:	2301      	movs	r3, #1
 800401e:	2109      	movs	r1, #9
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ff1c 	bl	8003e5e <max30102_read>
    config = (config & 0xf8) | mode;
 8004026:	7bfb      	ldrb	r3, [r7, #15]
 8004028:	b25b      	sxtb	r3, r3
 800402a:	f023 0307 	bic.w	r3, r3, #7
 800402e:	b25a      	sxtb	r2, r3
 8004030:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004034:	4313      	orrs	r3, r2
 8004036:	b25b      	sxtb	r3, r3
 8004038:	b2db      	uxtb	r3, r3
 800403a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 800403c:	f107 020f 	add.w	r2, r7, #15
 8004040:	2301      	movs	r3, #1
 8004042:	2109      	movs	r1, #9
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff fed6 	bl	8003df6 <max30102_write>
    max30102_clear_fifo(obj);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f8f6 	bl	800423c <max30102_clear_fifo>
}
 8004050:	bf00      	nop
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8004064:	f107 020f 	add.w	r2, r7, #15
 8004068:	2301      	movs	r3, #1
 800406a:	210a      	movs	r1, #10
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7ff fef6 	bl	8003e5e <max30102_read>
    config = (config & 0x63) << MAX30102_SPO2_SR;
 8004072:	7bfb      	ldrb	r3, [r7, #15]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800407c:	b2db      	uxtb	r3, r3
 800407e:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8004080:	f107 020f 	add.w	r2, r7, #15
 8004084:	2301      	movs	r3, #1
 8004086:	210a      	movs	r1, #10
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7ff feb4 	bl	8003df6 <max30102_write>
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	460b      	mov	r3, r1
 80040a0:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80040a2:	f107 020f 	add.w	r2, r7, #15
 80040a6:	2301      	movs	r3, #1
 80040a8:	210a      	movs	r1, #10
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7ff fed7 	bl	8003e5e <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	b25b      	sxtb	r3, r3
 80040b4:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80040b8:	b25a      	sxtb	r2, r3
 80040ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040be:	4313      	orrs	r3, r2
 80040c0:	b25b      	sxtb	r3, r3
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80040c6:	f107 020f 	add.w	r2, r7, #15
 80040ca:	2301      	movs	r3, #1
 80040cc:	210a      	movs	r1, #10
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff fe91 	bl	8003df6 <max30102_write>
}
 80040d4:	bf00      	nop
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80040e8:	f107 020f 	add.w	r2, r7, #15
 80040ec:	2301      	movs	r3, #1
 80040ee:	210a      	movs	r1, #10
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7ff feb4 	bl	8003e5e <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	b25b      	sxtb	r3, r3
 80040fa:	f003 031f 	and.w	r3, r3, #31
 80040fe:	b25a      	sxtb	r2, r3
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	015b      	lsls	r3, r3, #5
 8004104:	b25b      	sxtb	r3, r3
 8004106:	4313      	orrs	r3, r2
 8004108:	b25b      	sxtb	r3, r3
 800410a:	b2db      	uxtb	r3, r3
 800410c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 800410e:	f107 020f 	add.w	r2, r7, #15
 8004112:	2301      	movs	r3, #1
 8004114:	210a      	movs	r1, #10
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff fe6d 	bl	8003df6 <max30102_write>
}
 800411c:	bf00      	nop
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	0000      	movs	r0, r0
	...

08004128 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 8004134:	6838      	ldr	r0, [r7, #0]
 8004136:	f7fc fa0f 	bl	8000558 <__aeabi_f2d>
 800413a:	a30d      	add	r3, pc, #52	; (adr r3, 8004170 <max30102_set_led_current_1+0x48>)
 800413c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004140:	f7fc fb8c 	bl	800085c <__aeabi_ddiv>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4610      	mov	r0, r2
 800414a:	4619      	mov	r1, r3
 800414c:	f7fc fd34 	bl	8000bb8 <__aeabi_d2uiz>
 8004150:	4603      	mov	r3, r0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 8004156:	f107 020f 	add.w	r2, r7, #15
 800415a:	2301      	movs	r3, #1
 800415c:	210c      	movs	r1, #12
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff fe49 	bl	8003df6 <max30102_write>
}
 8004164:	bf00      	nop
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	f3af 8000 	nop.w
 8004170:	9999999a 	.word	0x9999999a
 8004174:	3fc99999 	.word	0x3fc99999

08004178 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 8004184:	6838      	ldr	r0, [r7, #0]
 8004186:	f7fc f9e7 	bl	8000558 <__aeabi_f2d>
 800418a:	a30d      	add	r3, pc, #52	; (adr r3, 80041c0 <max30102_set_led_current_2+0x48>)
 800418c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004190:	f7fc fb64 	bl	800085c <__aeabi_ddiv>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4610      	mov	r0, r2
 800419a:	4619      	mov	r1, r3
 800419c:	f7fc fd0c 	bl	8000bb8 <__aeabi_d2uiz>
 80041a0:	4603      	mov	r3, r0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 80041a6:	f107 020f 	add.w	r2, r7, #15
 80041aa:	2301      	movs	r3, #1
 80041ac:	210d      	movs	r1, #13
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff fe21 	bl	8003df6 <max30102_write>
}
 80041b4:	bf00      	nop
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	f3af 8000 	nop.w
 80041c0:	9999999a 	.word	0x9999999a
 80041c4:	3fc99999 	.word	0x3fc99999

080041c8 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	4608      	mov	r0, r1
 80041d2:	4611      	mov	r1, r2
 80041d4:	461a      	mov	r2, r3
 80041d6:	4603      	mov	r3, r0
 80041d8:	70fb      	strb	r3, [r7, #3]
 80041da:	460b      	mov	r3, r1
 80041dc:	70bb      	strb	r3, [r7, #2]
 80041de:	4613      	mov	r3, r2
 80041e0:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 80041e2:	2300      	movs	r3, #0
 80041e4:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	015b      	lsls	r3, r3, #5
 80041ea:	b25a      	sxtb	r2, r3
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
 80041ee:	b25b      	sxtb	r3, r3
 80041f0:	4313      	orrs	r3, r2
 80041f2:	b25b      	sxtb	r3, r3
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 80041f8:	78bb      	ldrb	r3, [r7, #2]
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	b25b      	sxtb	r3, r3
 80041fe:	f003 0310 	and.w	r3, r3, #16
 8004202:	b25a      	sxtb	r2, r3
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	b25b      	sxtb	r3, r3
 8004208:	4313      	orrs	r3, r2
 800420a:	b25b      	sxtb	r3, r3
 800420c:	b2db      	uxtb	r3, r3
 800420e:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8004210:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8004214:	f003 030f 	and.w	r3, r3, #15
 8004218:	b25a      	sxtb	r2, r3
 800421a:	7bfb      	ldrb	r3, [r7, #15]
 800421c:	b25b      	sxtb	r3, r3
 800421e:	4313      	orrs	r3, r2
 8004220:	b25b      	sxtb	r3, r3
 8004222:	b2db      	uxtb	r3, r3
 8004224:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 8004226:	f107 020f 	add.w	r2, r7, #15
 800422a:	2301      	movs	r3, #1
 800422c:	2108      	movs	r1, #8
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff fde1 	bl	8003df6 <max30102_write>
}
 8004234:	bf00      	nop
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 8004244:	2300      	movs	r3, #0
 8004246:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 8004248:	f107 020f 	add.w	r2, r7, #15
 800424c:	2303      	movs	r3, #3
 800424e:	2104      	movs	r1, #4
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff fdd0 	bl	8003df6 <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 8004256:	f107 020f 	add.w	r2, r7, #15
 800425a:	2303      	movs	r3, #3
 800425c:	2106      	movs	r1, #6
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7ff fdc9 	bl	8003df6 <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 8004264:	f107 020f 	add.w	r2, r7, #15
 8004268:	2303      	movs	r3, #3
 800426a:	2105      	movs	r1, #5
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff fdc2 	bl	8003df6 <max30102_write>
}
 8004272:	bf00      	nop
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b088      	sub	sp, #32
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 8004282:	2300      	movs	r3, #0
 8004284:	74fb      	strb	r3, [r7, #19]
 8004286:	2300      	movs	r3, #0
 8004288:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 800428a:	f107 0213 	add.w	r2, r7, #19
 800428e:	2301      	movs	r3, #1
 8004290:	2104      	movs	r1, #4
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff fde3 	bl	8003e5e <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 8004298:	f107 0212 	add.w	r2, r7, #18
 800429c:	2301      	movs	r3, #1
 800429e:	2106      	movs	r1, #6
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff fddc 	bl	8003e5e <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 80042a6:	7cfa      	ldrb	r2, [r7, #19]
 80042a8:	7cbb      	ldrb	r3, [r7, #18]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 80042b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	dc03      	bgt.n	80042c0 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 80042b8:	7ffb      	ldrb	r3, [r7, #31]
 80042ba:	3320      	adds	r3, #32
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	77fb      	strb	r3, [r7, #31]
    }

    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 80042c0:	2300      	movs	r3, #0
 80042c2:	77bb      	strb	r3, [r7, #30]
 80042c4:	e035      	b.n	8004332 <max30102_read_fifo+0xb8>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 80042c6:	f107 020c 	add.w	r2, r7, #12
 80042ca:	2306      	movs	r3, #6
 80042cc:	2107      	movs	r1, #7
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff fdc5 	bl	8003e5e <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 80042d4:	7b3b      	ldrb	r3, [r7, #12]
 80042d6:	041b      	lsls	r3, r3, #16
 80042d8:	461a      	mov	r2, r3
 80042da:	7b7b      	ldrb	r3, [r7, #13]
 80042dc:	021b      	lsls	r3, r3, #8
 80042de:	4313      	orrs	r3, r2
 80042e0:	7bba      	ldrb	r2, [r7, #14]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80042e8:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	041b      	lsls	r3, r3, #16
 80042ee:	461a      	mov	r2, r3
 80042f0:	7c3b      	ldrb	r3, [r7, #16]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	4313      	orrs	r3, r2
 80042f6:	7c7a      	ldrb	r2, [r7, #17]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80042fe:	617b      	str	r3, [r7, #20]
        obj->_ir_samples[i] = ir_sample;
 8004300:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 800430e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	3320      	adds	r3, #32
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	605a      	str	r2, [r3, #4]
        max30102_plot(ir_sample, red_sample);
 800431e:	6979      	ldr	r1, [r7, #20]
 8004320:	69b8      	ldr	r0, [r7, #24]
 8004322:	f7fe ff0b 	bl	800313c <max30102_plot>
    for (int8_t i = 0; i < num_samples; i++)
 8004326:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	3301      	adds	r3, #1
 800432e:	b2db      	uxtb	r3, r3
 8004330:	77bb      	strb	r3, [r7, #30]
 8004332:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8004336:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800433a:	429a      	cmp	r2, r3
 800433c:	dbc3      	blt.n	80042c6 <max30102_read_fifo+0x4c>
    }
}
 800433e:	bf00      	nop
 8004340:	bf00      	nop
 8004342:	3720      	adds	r7, #32
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <max30102_read_temp>:
 * @param temp_int Pointer to store the integer part of temperature. Stored in 2's complement format.
 * @param temp_frac Pointer to store the fractional part of temperature. Increments of 0.0625 deg C.
 */

void max30102_read_temp(max30102_t *obj, int8_t *temp_int, uint8_t *temp_frac)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
    max30102_read(obj, MAX30102_DIE_TINT, (uint8_t *)temp_int, 1);
 8004354:	2301      	movs	r3, #1
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	211f      	movs	r1, #31
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f7ff fd7f 	bl	8003e5e <max30102_read>
    max30102_read(obj, MAX30102_DIE_TFRAC, temp_frac, 1);
 8004360:	2301      	movs	r3, #1
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	2120      	movs	r1, #32
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f7ff fd79 	bl	8003e5e <max30102_read>
}
 800436c:	bf00      	nop
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800437a:	2300      	movs	r3, #0
 800437c:	607b      	str	r3, [r7, #4]
 800437e:	4b10      	ldr	r3, [pc, #64]	; (80043c0 <HAL_MspInit+0x4c>)
 8004380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004382:	4a0f      	ldr	r2, [pc, #60]	; (80043c0 <HAL_MspInit+0x4c>)
 8004384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004388:	6453      	str	r3, [r2, #68]	; 0x44
 800438a:	4b0d      	ldr	r3, [pc, #52]	; (80043c0 <HAL_MspInit+0x4c>)
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004392:	607b      	str	r3, [r7, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004396:	2300      	movs	r3, #0
 8004398:	603b      	str	r3, [r7, #0]
 800439a:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <HAL_MspInit+0x4c>)
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	4a08      	ldr	r2, [pc, #32]	; (80043c0 <HAL_MspInit+0x4c>)
 80043a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a4:	6413      	str	r3, [r2, #64]	; 0x40
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_MspInit+0x4c>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40023800 	.word	0x40023800

080043c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b08a      	sub	sp, #40	; 0x28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043cc:	f107 0314 	add.w	r3, r7, #20
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	605a      	str	r2, [r3, #4]
 80043d6:	609a      	str	r2, [r3, #8]
 80043d8:	60da      	str	r2, [r3, #12]
 80043da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a17      	ldr	r2, [pc, #92]	; (8004440 <HAL_ADC_MspInit+0x7c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d127      	bne.n	8004436 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80043e6:	2300      	movs	r3, #0
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	4b16      	ldr	r3, [pc, #88]	; (8004444 <HAL_ADC_MspInit+0x80>)
 80043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ee:	4a15      	ldr	r2, [pc, #84]	; (8004444 <HAL_ADC_MspInit+0x80>)
 80043f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f4:	6453      	str	r3, [r2, #68]	; 0x44
 80043f6:	4b13      	ldr	r3, [pc, #76]	; (8004444 <HAL_ADC_MspInit+0x80>)
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fe:	613b      	str	r3, [r7, #16]
 8004400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <HAL_ADC_MspInit+0x80>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	4a0e      	ldr	r2, [pc, #56]	; (8004444 <HAL_ADC_MspInit+0x80>)
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	6313      	str	r3, [r2, #48]	; 0x30
 8004412:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <HAL_ADC_MspInit+0x80>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = EKG_Pin;
 800441e:	2301      	movs	r3, #1
 8004420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004422:	2303      	movs	r3, #3
 8004424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004426:	2300      	movs	r3, #0
 8004428:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(EKG_GPIO_Port, &GPIO_InitStruct);
 800442a:	f107 0314 	add.w	r3, r7, #20
 800442e:	4619      	mov	r1, r3
 8004430:	4805      	ldr	r0, [pc, #20]	; (8004448 <HAL_ADC_MspInit+0x84>)
 8004432:	f000 ffbf 	bl	80053b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004436:	bf00      	nop
 8004438:	3728      	adds	r7, #40	; 0x28
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40012000 	.word	0x40012000
 8004444:	40023800 	.word	0x40023800
 8004448:	40020000 	.word	0x40020000

0800444c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08c      	sub	sp, #48	; 0x30
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004454:	f107 031c 	add.w	r3, r7, #28
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	605a      	str	r2, [r3, #4]
 800445e:	609a      	str	r2, [r3, #8]
 8004460:	60da      	str	r2, [r3, #12]
 8004462:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a3a      	ldr	r2, [pc, #232]	; (8004554 <HAL_I2C_MspInit+0x108>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d12c      	bne.n	80044c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800446e:	2300      	movs	r3, #0
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	4b39      	ldr	r3, [pc, #228]	; (8004558 <HAL_I2C_MspInit+0x10c>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	4a38      	ldr	r2, [pc, #224]	; (8004558 <HAL_I2C_MspInit+0x10c>)
 8004478:	f043 0302 	orr.w	r3, r3, #2
 800447c:	6313      	str	r3, [r2, #48]	; 0x30
 800447e:	4b36      	ldr	r3, [pc, #216]	; (8004558 <HAL_I2C_MspInit+0x10c>)
 8004480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	61bb      	str	r3, [r7, #24]
 8004488:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800448a:	23c0      	movs	r3, #192	; 0xc0
 800448c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800448e:	2312      	movs	r3, #18
 8004490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004492:	2300      	movs	r3, #0
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004496:	2303      	movs	r3, #3
 8004498:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800449a:	2304      	movs	r3, #4
 800449c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800449e:	f107 031c 	add.w	r3, r7, #28
 80044a2:	4619      	mov	r1, r3
 80044a4:	482d      	ldr	r0, [pc, #180]	; (800455c <HAL_I2C_MspInit+0x110>)
 80044a6:	f000 ff85 	bl	80053b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	4b2a      	ldr	r3, [pc, #168]	; (8004558 <HAL_I2C_MspInit+0x10c>)
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	4a29      	ldr	r2, [pc, #164]	; (8004558 <HAL_I2C_MspInit+0x10c>)
 80044b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044b8:	6413      	str	r3, [r2, #64]	; 0x40
 80044ba:	4b27      	ldr	r3, [pc, #156]	; (8004558 <HAL_I2C_MspInit+0x10c>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80044c6:	e041      	b.n	800454c <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a24      	ldr	r2, [pc, #144]	; (8004560 <HAL_I2C_MspInit+0x114>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d13c      	bne.n	800454c <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044d2:	2300      	movs	r3, #0
 80044d4:	613b      	str	r3, [r7, #16]
 80044d6:	4b20      	ldr	r3, [pc, #128]	; (8004558 <HAL_I2C_MspInit+0x10c>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	4a1f      	ldr	r2, [pc, #124]	; (8004558 <HAL_I2C_MspInit+0x10c>)
 80044dc:	f043 0302 	orr.w	r3, r3, #2
 80044e0:	6313      	str	r3, [r2, #48]	; 0x30
 80044e2:	4b1d      	ldr	r3, [pc, #116]	; (8004558 <HAL_I2C_MspInit+0x10c>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80044ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044f4:	2312      	movs	r3, #18
 80044f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044fc:	2303      	movs	r3, #3
 80044fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004500:	2304      	movs	r3, #4
 8004502:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004504:	f107 031c 	add.w	r3, r7, #28
 8004508:	4619      	mov	r1, r3
 800450a:	4814      	ldr	r0, [pc, #80]	; (800455c <HAL_I2C_MspInit+0x110>)
 800450c:	f000 ff52 	bl	80053b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004510:	2308      	movs	r3, #8
 8004512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004514:	2312      	movs	r3, #18
 8004516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004518:	2300      	movs	r3, #0
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800451c:	2303      	movs	r3, #3
 800451e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004520:	2309      	movs	r3, #9
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004524:	f107 031c 	add.w	r3, r7, #28
 8004528:	4619      	mov	r1, r3
 800452a:	480c      	ldr	r0, [pc, #48]	; (800455c <HAL_I2C_MspInit+0x110>)
 800452c:	f000 ff42 	bl	80053b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	4b08      	ldr	r3, [pc, #32]	; (8004558 <HAL_I2C_MspInit+0x10c>)
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	4a07      	ldr	r2, [pc, #28]	; (8004558 <HAL_I2C_MspInit+0x10c>)
 800453a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800453e:	6413      	str	r3, [r2, #64]	; 0x40
 8004540:	4b05      	ldr	r3, [pc, #20]	; (8004558 <HAL_I2C_MspInit+0x10c>)
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	68fb      	ldr	r3, [r7, #12]
}
 800454c:	bf00      	nop
 800454e:	3730      	adds	r7, #48	; 0x30
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40005400 	.word	0x40005400
 8004558:	40023800 	.word	0x40023800
 800455c:	40020400 	.word	0x40020400
 8004560:	40005800 	.word	0x40005800

08004564 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b08a      	sub	sp, #40	; 0x28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800456c:	f107 0314 	add.w	r3, r7, #20
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	605a      	str	r2, [r3, #4]
 8004576:	609a      	str	r2, [r3, #8]
 8004578:	60da      	str	r2, [r3, #12]
 800457a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a19      	ldr	r2, [pc, #100]	; (80045e8 <HAL_SPI_MspInit+0x84>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d12b      	bne.n	80045de <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004586:	2300      	movs	r3, #0
 8004588:	613b      	str	r3, [r7, #16]
 800458a:	4b18      	ldr	r3, [pc, #96]	; (80045ec <HAL_SPI_MspInit+0x88>)
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	4a17      	ldr	r2, [pc, #92]	; (80045ec <HAL_SPI_MspInit+0x88>)
 8004590:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004594:	6453      	str	r3, [r2, #68]	; 0x44
 8004596:	4b15      	ldr	r3, [pc, #84]	; (80045ec <HAL_SPI_MspInit+0x88>)
 8004598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800459e:	613b      	str	r3, [r7, #16]
 80045a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045a2:	2300      	movs	r3, #0
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	4b11      	ldr	r3, [pc, #68]	; (80045ec <HAL_SPI_MspInit+0x88>)
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	4a10      	ldr	r2, [pc, #64]	; (80045ec <HAL_SPI_MspInit+0x88>)
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	6313      	str	r3, [r2, #48]	; 0x30
 80045b2:	4b0e      	ldr	r3, [pc, #56]	; (80045ec <HAL_SPI_MspInit+0x88>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80045be:	23e0      	movs	r3, #224	; 0xe0
 80045c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045c2:	2302      	movs	r3, #2
 80045c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ca:	2303      	movs	r3, #3
 80045cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80045ce:	2305      	movs	r3, #5
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045d2:	f107 0314 	add.w	r3, r7, #20
 80045d6:	4619      	mov	r1, r3
 80045d8:	4805      	ldr	r0, [pc, #20]	; (80045f0 <HAL_SPI_MspInit+0x8c>)
 80045da:	f000 feeb 	bl	80053b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80045de:	bf00      	nop
 80045e0:	3728      	adds	r7, #40	; 0x28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	40013000 	.word	0x40013000
 80045ec:	40023800 	.word	0x40023800
 80045f0:	40020000 	.word	0x40020000

080045f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004604:	d116      	bne.n	8004634 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	4b16      	ldr	r3, [pc, #88]	; (8004664 <HAL_TIM_Base_MspInit+0x70>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	4a15      	ldr	r2, [pc, #84]	; (8004664 <HAL_TIM_Base_MspInit+0x70>)
 8004610:	f043 0301 	orr.w	r3, r3, #1
 8004614:	6413      	str	r3, [r2, #64]	; 0x40
 8004616:	4b13      	ldr	r3, [pc, #76]	; (8004664 <HAL_TIM_Base_MspInit+0x70>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004622:	2200      	movs	r2, #0
 8004624:	2100      	movs	r1, #0
 8004626:	201c      	movs	r0, #28
 8004628:	f000 fe08 	bl	800523c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800462c:	201c      	movs	r0, #28
 800462e:	f000 fe21 	bl	8005274 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004632:	e012      	b.n	800465a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a0b      	ldr	r2, [pc, #44]	; (8004668 <HAL_TIM_Base_MspInit+0x74>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d10d      	bne.n	800465a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800463e:	2300      	movs	r3, #0
 8004640:	60bb      	str	r3, [r7, #8]
 8004642:	4b08      	ldr	r3, [pc, #32]	; (8004664 <HAL_TIM_Base_MspInit+0x70>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	4a07      	ldr	r2, [pc, #28]	; (8004664 <HAL_TIM_Base_MspInit+0x70>)
 8004648:	f043 0308 	orr.w	r3, r3, #8
 800464c:	6413      	str	r3, [r2, #64]	; 0x40
 800464e:	4b05      	ldr	r3, [pc, #20]	; (8004664 <HAL_TIM_Base_MspInit+0x70>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	60bb      	str	r3, [r7, #8]
 8004658:	68bb      	ldr	r3, [r7, #8]
}
 800465a:	bf00      	nop
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40023800 	.word	0x40023800
 8004668:	40000c00 	.word	0x40000c00

0800466c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08c      	sub	sp, #48	; 0x30
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004674:	f107 031c 	add.w	r3, r7, #28
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	605a      	str	r2, [r3, #4]
 800467e:	609a      	str	r2, [r3, #8]
 8004680:	60da      	str	r2, [r3, #12]
 8004682:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a36      	ldr	r2, [pc, #216]	; (8004764 <HAL_UART_MspInit+0xf8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d12d      	bne.n	80046ea <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800468e:	2300      	movs	r3, #0
 8004690:	61bb      	str	r3, [r7, #24]
 8004692:	4b35      	ldr	r3, [pc, #212]	; (8004768 <HAL_UART_MspInit+0xfc>)
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	4a34      	ldr	r2, [pc, #208]	; (8004768 <HAL_UART_MspInit+0xfc>)
 8004698:	f043 0310 	orr.w	r3, r3, #16
 800469c:	6453      	str	r3, [r2, #68]	; 0x44
 800469e:	4b32      	ldr	r3, [pc, #200]	; (8004768 <HAL_UART_MspInit+0xfc>)
 80046a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	61bb      	str	r3, [r7, #24]
 80046a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	4b2e      	ldr	r3, [pc, #184]	; (8004768 <HAL_UART_MspInit+0xfc>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	4a2d      	ldr	r2, [pc, #180]	; (8004768 <HAL_UART_MspInit+0xfc>)
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	6313      	str	r3, [r2, #48]	; 0x30
 80046ba:	4b2b      	ldr	r3, [pc, #172]	; (8004768 <HAL_UART_MspInit+0xfc>)
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80046c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80046ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046cc:	2302      	movs	r3, #2
 80046ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046d4:	2303      	movs	r3, #3
 80046d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80046d8:	2307      	movs	r3, #7
 80046da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046dc:	f107 031c 	add.w	r3, r7, #28
 80046e0:	4619      	mov	r1, r3
 80046e2:	4822      	ldr	r0, [pc, #136]	; (800476c <HAL_UART_MspInit+0x100>)
 80046e4:	f000 fe66 	bl	80053b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80046e8:	e038      	b.n	800475c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a20      	ldr	r2, [pc, #128]	; (8004770 <HAL_UART_MspInit+0x104>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d133      	bne.n	800475c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80046f4:	2300      	movs	r3, #0
 80046f6:	613b      	str	r3, [r7, #16]
 80046f8:	4b1b      	ldr	r3, [pc, #108]	; (8004768 <HAL_UART_MspInit+0xfc>)
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	4a1a      	ldr	r2, [pc, #104]	; (8004768 <HAL_UART_MspInit+0xfc>)
 80046fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004702:	6413      	str	r3, [r2, #64]	; 0x40
 8004704:	4b18      	ldr	r3, [pc, #96]	; (8004768 <HAL_UART_MspInit+0xfc>)
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	4b14      	ldr	r3, [pc, #80]	; (8004768 <HAL_UART_MspInit+0xfc>)
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	4a13      	ldr	r2, [pc, #76]	; (8004768 <HAL_UART_MspInit+0xfc>)
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	6313      	str	r3, [r2, #48]	; 0x30
 8004720:	4b11      	ldr	r3, [pc, #68]	; (8004768 <HAL_UART_MspInit+0xfc>)
 8004722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800472c:	230c      	movs	r3, #12
 800472e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004730:	2302      	movs	r3, #2
 8004732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004734:	2300      	movs	r3, #0
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004738:	2303      	movs	r3, #3
 800473a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800473c:	2307      	movs	r3, #7
 800473e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004740:	f107 031c 	add.w	r3, r7, #28
 8004744:	4619      	mov	r1, r3
 8004746:	4809      	ldr	r0, [pc, #36]	; (800476c <HAL_UART_MspInit+0x100>)
 8004748:	f000 fe34 	bl	80053b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800474c:	2200      	movs	r2, #0
 800474e:	2100      	movs	r1, #0
 8004750:	2026      	movs	r0, #38	; 0x26
 8004752:	f000 fd73 	bl	800523c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004756:	2026      	movs	r0, #38	; 0x26
 8004758:	f000 fd8c 	bl	8005274 <HAL_NVIC_EnableIRQ>
}
 800475c:	bf00      	nop
 800475e:	3730      	adds	r7, #48	; 0x30
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40011000 	.word	0x40011000
 8004768:	40023800 	.word	0x40023800
 800476c:	40020000 	.word	0x40020000
 8004770:	40004400 	.word	0x40004400

08004774 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b08c      	sub	sp, #48	; 0x30
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004784:	2300      	movs	r3, #0
 8004786:	60bb      	str	r3, [r7, #8]
 8004788:	4b2e      	ldr	r3, [pc, #184]	; (8004844 <HAL_InitTick+0xd0>)
 800478a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478c:	4a2d      	ldr	r2, [pc, #180]	; (8004844 <HAL_InitTick+0xd0>)
 800478e:	f043 0301 	orr.w	r3, r3, #1
 8004792:	6453      	str	r3, [r2, #68]	; 0x44
 8004794:	4b2b      	ldr	r3, [pc, #172]	; (8004844 <HAL_InitTick+0xd0>)
 8004796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80047a0:	f107 020c 	add.w	r2, r7, #12
 80047a4:	f107 0310 	add.w	r3, r7, #16
 80047a8:	4611      	mov	r1, r2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f003 f85c 	bl	8007868 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80047b0:	f003 f846 	bl	8007840 <HAL_RCC_GetPCLK2Freq>
 80047b4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	4a23      	ldr	r2, [pc, #140]	; (8004848 <HAL_InitTick+0xd4>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	0c9b      	lsrs	r3, r3, #18
 80047c0:	3b01      	subs	r3, #1
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80047c4:	4b21      	ldr	r3, [pc, #132]	; (800484c <HAL_InitTick+0xd8>)
 80047c6:	4a22      	ldr	r2, [pc, #136]	; (8004850 <HAL_InitTick+0xdc>)
 80047c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80047ca:	4b20      	ldr	r3, [pc, #128]	; (800484c <HAL_InitTick+0xd8>)
 80047cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80047d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80047d2:	4a1e      	ldr	r2, [pc, #120]	; (800484c <HAL_InitTick+0xd8>)
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80047d8:	4b1c      	ldr	r3, [pc, #112]	; (800484c <HAL_InitTick+0xd8>)
 80047da:	2200      	movs	r2, #0
 80047dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047de:	4b1b      	ldr	r3, [pc, #108]	; (800484c <HAL_InitTick+0xd8>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047e4:	4b19      	ldr	r3, [pc, #100]	; (800484c <HAL_InitTick+0xd8>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80047ea:	4818      	ldr	r0, [pc, #96]	; (800484c <HAL_InitTick+0xd8>)
 80047ec:	f003 fca0 	bl	8008130 <HAL_TIM_Base_Init>
 80047f0:	4603      	mov	r3, r0
 80047f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80047f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d11b      	bne.n	8004836 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80047fe:	4813      	ldr	r0, [pc, #76]	; (800484c <HAL_InitTick+0xd8>)
 8004800:	f003 fd40 	bl	8008284 <HAL_TIM_Base_Start_IT>
 8004804:	4603      	mov	r3, r0
 8004806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800480a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800480e:	2b00      	cmp	r3, #0
 8004810:	d111      	bne.n	8004836 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004812:	2019      	movs	r0, #25
 8004814:	f000 fd2e 	bl	8005274 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b0f      	cmp	r3, #15
 800481c:	d808      	bhi.n	8004830 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800481e:	2200      	movs	r2, #0
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	2019      	movs	r0, #25
 8004824:	f000 fd0a 	bl	800523c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004828:	4a0a      	ldr	r2, [pc, #40]	; (8004854 <HAL_InitTick+0xe0>)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	e002      	b.n	8004836 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004836:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800483a:	4618      	mov	r0, r3
 800483c:	3730      	adds	r7, #48	; 0x30
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40023800 	.word	0x40023800
 8004848:	431bde83 	.word	0x431bde83
 800484c:	2000288c 	.word	0x2000288c
 8004850:	40010000 	.word	0x40010000
 8004854:	20000008 	.word	0x20000008

08004858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800485c:	e7fe      	b.n	800485c <NMI_Handler+0x4>

0800485e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800485e:	b480      	push	{r7}
 8004860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004862:	e7fe      	b.n	8004862 <HardFault_Handler+0x4>

08004864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004868:	e7fe      	b.n	8004868 <MemManage_Handler+0x4>

0800486a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800486a:	b480      	push	{r7}
 800486c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800486e:	e7fe      	b.n	800486e <BusFault_Handler+0x4>

08004870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004874:	e7fe      	b.n	8004874 <UsageFault_Handler+0x4>

08004876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004876:	b480      	push	{r7}
 8004878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800487a:	bf00      	nop
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004888:	bf00      	nop
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004892:	b480      	push	{r7}
 8004894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004896:	bf00      	nop
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048a4:	bf00      	nop
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
	...

080048b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	max30102_on_interrupt(&max30102);
 80048b4:	4804      	ldr	r0, [pc, #16]	; (80048c8 <EXTI9_5_IRQHandler+0x18>)
 80048b6:	f7ff fb60 	bl	8003f7a <max30102_on_interrupt>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Oksimetre_Interrupt_Pin);
 80048ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80048be:	f000 ff2f 	bl	8005720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80048c2:	bf00      	nop
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	200004b4 	.word	0x200004b4

080048cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048d0:	4802      	ldr	r0, [pc, #8]	; (80048dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80048d2:	f003 fd39 	bl	8008348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	2000288c 	.word	0x2000288c

080048e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80048e4:	4802      	ldr	r0, [pc, #8]	; (80048f0 <TIM2_IRQHandler+0x10>)
 80048e6:	f003 fd2f 	bl	8008348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80048ea:	bf00      	nop
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	2000039c 	.word	0x2000039c

080048f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80048f8:	4802      	ldr	r0, [pc, #8]	; (8004904 <USART2_IRQHandler+0x10>)
 80048fa:	f004 f937 	bl	8008b6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80048fe:	bf00      	nop
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20000470 	.word	0x20000470

08004908 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800490c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004910:	f000 ff06 	bl	8005720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004914:	bf00      	nop
 8004916:	bd80      	pop	{r7, pc}

08004918 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  return 1;
 800491c:	2301      	movs	r3, #1
}
 800491e:	4618      	mov	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <_kill>:

int _kill(int pid, int sig)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004932:	f008 fa93 	bl	800ce5c <__errno>
 8004936:	4603      	mov	r3, r0
 8004938:	2216      	movs	r2, #22
 800493a:	601a      	str	r2, [r3, #0]
  return -1;
 800493c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004940:	4618      	mov	r0, r3
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <_exit>:

void _exit (int status)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004950:	f04f 31ff 	mov.w	r1, #4294967295
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7ff ffe7 	bl	8004928 <_kill>
  while (1) {}    /* Make sure we hang here */
 800495a:	e7fe      	b.n	800495a <_exit+0x12>

0800495c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004968:	2300      	movs	r3, #0
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	e00a      	b.n	8004984 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800496e:	f3af 8000 	nop.w
 8004972:	4601      	mov	r1, r0
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	60ba      	str	r2, [r7, #8]
 800497a:	b2ca      	uxtb	r2, r1
 800497c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	3301      	adds	r3, #1
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	429a      	cmp	r2, r3
 800498a:	dbf0      	blt.n	800496e <_read+0x12>
  }

  return len;
 800498c:	687b      	ldr	r3, [r7, #4]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3718      	adds	r7, #24
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b086      	sub	sp, #24
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	e009      	b.n	80049bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	60ba      	str	r2, [r7, #8]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	3301      	adds	r3, #1
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	dbf1      	blt.n	80049a8 <_write+0x12>
  }
  return len;
 80049c4:	687b      	ldr	r3, [r7, #4]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <_close>:

int _close(int file)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80049d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049da:	4618      	mov	r0, r3
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049f6:	605a      	str	r2, [r3, #4]
  return 0;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <_isatty>:

int _isatty(int file)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004a0e:	2301      	movs	r3, #1
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
	...

08004a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a40:	4a14      	ldr	r2, [pc, #80]	; (8004a94 <_sbrk+0x5c>)
 8004a42:	4b15      	ldr	r3, [pc, #84]	; (8004a98 <_sbrk+0x60>)
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a4c:	4b13      	ldr	r3, [pc, #76]	; (8004a9c <_sbrk+0x64>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d102      	bne.n	8004a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a54:	4b11      	ldr	r3, [pc, #68]	; (8004a9c <_sbrk+0x64>)
 8004a56:	4a12      	ldr	r2, [pc, #72]	; (8004aa0 <_sbrk+0x68>)
 8004a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a5a:	4b10      	ldr	r3, [pc, #64]	; (8004a9c <_sbrk+0x64>)
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4413      	add	r3, r2
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d207      	bcs.n	8004a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a68:	f008 f9f8 	bl	800ce5c <__errno>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	220c      	movs	r2, #12
 8004a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a72:	f04f 33ff 	mov.w	r3, #4294967295
 8004a76:	e009      	b.n	8004a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a78:	4b08      	ldr	r3, [pc, #32]	; (8004a9c <_sbrk+0x64>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a7e:	4b07      	ldr	r3, [pc, #28]	; (8004a9c <_sbrk+0x64>)
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4413      	add	r3, r2
 8004a86:	4a05      	ldr	r2, [pc, #20]	; (8004a9c <_sbrk+0x64>)
 8004a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	20020000 	.word	0x20020000
 8004a98:	00000400 	.word	0x00000400
 8004a9c:	200028d8 	.word	0x200028d8
 8004aa0:	20002b30 	.word	0x20002b30

08004aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004aa8:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <SystemInit+0x20>)
 8004aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aae:	4a05      	ldr	r2, [pc, #20]	; (8004ac4 <SystemInit+0x20>)
 8004ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ab8:	bf00      	nop
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	e000ed00 	.word	0xe000ed00

08004ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004acc:	480d      	ldr	r0, [pc, #52]	; (8004b04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004ace:	490e      	ldr	r1, [pc, #56]	; (8004b08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004ad0:	4a0e      	ldr	r2, [pc, #56]	; (8004b0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ad4:	e002      	b.n	8004adc <LoopCopyDataInit>

08004ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ada:	3304      	adds	r3, #4

08004adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ae0:	d3f9      	bcc.n	8004ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ae2:	4a0b      	ldr	r2, [pc, #44]	; (8004b10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004ae4:	4c0b      	ldr	r4, [pc, #44]	; (8004b14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ae8:	e001      	b.n	8004aee <LoopFillZerobss>

08004aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004aec:	3204      	adds	r2, #4

08004aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004af0:	d3fb      	bcc.n	8004aea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004af2:	f7ff ffd7 	bl	8004aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004af6:	f008 f9b7 	bl	800ce68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004afa:	f7fe fc89 	bl	8003410 <main>
  bx  lr    
 8004afe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004b00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b08:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8004b0c:	08011c9c 	.word	0x08011c9c
  ldr r2, =_sbss
 8004b10:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8004b14:	20002b2c 	.word	0x20002b2c

08004b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b18:	e7fe      	b.n	8004b18 <ADC_IRQHandler>
	...

08004b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b20:	4b0e      	ldr	r3, [pc, #56]	; (8004b5c <HAL_Init+0x40>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a0d      	ldr	r2, [pc, #52]	; (8004b5c <HAL_Init+0x40>)
 8004b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <HAL_Init+0x40>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a0a      	ldr	r2, [pc, #40]	; (8004b5c <HAL_Init+0x40>)
 8004b32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b38:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <HAL_Init+0x40>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a07      	ldr	r2, [pc, #28]	; (8004b5c <HAL_Init+0x40>)
 8004b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b44:	2003      	movs	r0, #3
 8004b46:	f000 fb6e 	bl	8005226 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b4a:	200f      	movs	r0, #15
 8004b4c:	f7ff fe12 	bl	8004774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b50:	f7ff fc10 	bl	8004374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40023c00 	.word	0x40023c00

08004b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b64:	4b06      	ldr	r3, [pc, #24]	; (8004b80 <HAL_IncTick+0x20>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	4b06      	ldr	r3, [pc, #24]	; (8004b84 <HAL_IncTick+0x24>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4413      	add	r3, r2
 8004b70:	4a04      	ldr	r2, [pc, #16]	; (8004b84 <HAL_IncTick+0x24>)
 8004b72:	6013      	str	r3, [r2, #0]
}
 8004b74:	bf00      	nop
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	2000000c 	.word	0x2000000c
 8004b84:	200028dc 	.word	0x200028dc

08004b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b8c:	4b03      	ldr	r3, [pc, #12]	; (8004b9c <HAL_GetTick+0x14>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	200028dc 	.word	0x200028dc

08004ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ba8:	f7ff ffee 	bl	8004b88 <HAL_GetTick>
 8004bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb8:	d005      	beq.n	8004bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bba:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <HAL_Delay+0x44>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004bc6:	bf00      	nop
 8004bc8:	f7ff ffde 	bl	8004b88 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d8f7      	bhi.n	8004bc8 <HAL_Delay+0x28>
  {
  }
}
 8004bd8:	bf00      	nop
 8004bda:	bf00      	nop
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	2000000c 	.word	0x2000000c

08004be8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e033      	b.n	8004c66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff fbdc 	bl	80043c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	f003 0310 	and.w	r3, r3, #16
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d118      	bne.n	8004c58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c2e:	f023 0302 	bic.w	r3, r3, #2
 8004c32:	f043 0202 	orr.w	r2, r3, #2
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f94a 	bl	8004ed4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	f023 0303 	bic.w	r3, r3, #3
 8004c4e:	f043 0201 	orr.w	r2, r3, #1
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	641a      	str	r2, [r3, #64]	; 0x40
 8004c56:	e001      	b.n	8004c5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
	...

08004c70 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d101      	bne.n	8004c8c <HAL_ADC_ConfigChannel+0x1c>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	e113      	b.n	8004eb4 <HAL_ADC_ConfigChannel+0x244>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b09      	cmp	r3, #9
 8004c9a:	d925      	bls.n	8004ce8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68d9      	ldr	r1, [r3, #12]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	461a      	mov	r2, r3
 8004caa:	4613      	mov	r3, r2
 8004cac:	005b      	lsls	r3, r3, #1
 8004cae:	4413      	add	r3, r2
 8004cb0:	3b1e      	subs	r3, #30
 8004cb2:	2207      	movs	r2, #7
 8004cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb8:	43da      	mvns	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	400a      	ands	r2, r1
 8004cc0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68d9      	ldr	r1, [r3, #12]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	4403      	add	r3, r0
 8004cda:	3b1e      	subs	r3, #30
 8004cdc:	409a      	lsls	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	60da      	str	r2, [r3, #12]
 8004ce6:	e022      	b.n	8004d2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6919      	ldr	r1, [r3, #16]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	4413      	add	r3, r2
 8004cfc:	2207      	movs	r2, #7
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43da      	mvns	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	400a      	ands	r2, r1
 8004d0a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6919      	ldr	r1, [r3, #16]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	4603      	mov	r3, r0
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	4403      	add	r3, r0
 8004d24:	409a      	lsls	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b06      	cmp	r3, #6
 8004d34:	d824      	bhi.n	8004d80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	4613      	mov	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	3b05      	subs	r3, #5
 8004d48:	221f      	movs	r2, #31
 8004d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4e:	43da      	mvns	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	400a      	ands	r2, r1
 8004d56:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	4618      	mov	r0, r3
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	3b05      	subs	r3, #5
 8004d72:	fa00 f203 	lsl.w	r2, r0, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	635a      	str	r2, [r3, #52]	; 0x34
 8004d7e:	e04c      	b.n	8004e1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2b0c      	cmp	r3, #12
 8004d86:	d824      	bhi.n	8004dd2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	3b23      	subs	r3, #35	; 0x23
 8004d9a:	221f      	movs	r2, #31
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	43da      	mvns	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	400a      	ands	r2, r1
 8004da8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	4618      	mov	r0, r3
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	3b23      	subs	r3, #35	; 0x23
 8004dc4:	fa00 f203 	lsl.w	r2, r0, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	631a      	str	r2, [r3, #48]	; 0x30
 8004dd0:	e023      	b.n	8004e1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	3b41      	subs	r3, #65	; 0x41
 8004de4:	221f      	movs	r2, #31
 8004de6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dea:	43da      	mvns	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	400a      	ands	r2, r1
 8004df2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	4618      	mov	r0, r3
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	3b41      	subs	r3, #65	; 0x41
 8004e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e1a:	4b29      	ldr	r3, [pc, #164]	; (8004ec0 <HAL_ADC_ConfigChannel+0x250>)
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a28      	ldr	r2, [pc, #160]	; (8004ec4 <HAL_ADC_ConfigChannel+0x254>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d10f      	bne.n	8004e48 <HAL_ADC_ConfigChannel+0x1d8>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b12      	cmp	r3, #18
 8004e2e:	d10b      	bne.n	8004e48 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <HAL_ADC_ConfigChannel+0x254>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d12b      	bne.n	8004eaa <HAL_ADC_ConfigChannel+0x23a>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a1c      	ldr	r2, [pc, #112]	; (8004ec8 <HAL_ADC_ConfigChannel+0x258>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d003      	beq.n	8004e64 <HAL_ADC_ConfigChannel+0x1f4>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b11      	cmp	r3, #17
 8004e62:	d122      	bne.n	8004eaa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a11      	ldr	r2, [pc, #68]	; (8004ec8 <HAL_ADC_ConfigChannel+0x258>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d111      	bne.n	8004eaa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004e86:	4b11      	ldr	r3, [pc, #68]	; (8004ecc <HAL_ADC_ConfigChannel+0x25c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a11      	ldr	r2, [pc, #68]	; (8004ed0 <HAL_ADC_ConfigChannel+0x260>)
 8004e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e90:	0c9a      	lsrs	r2, r3, #18
 8004e92:	4613      	mov	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e9c:	e002      	b.n	8004ea4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1f9      	bne.n	8004e9e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	40012300 	.word	0x40012300
 8004ec4:	40012000 	.word	0x40012000
 8004ec8:	10000012 	.word	0x10000012
 8004ecc:	20000004 	.word	0x20000004
 8004ed0:	431bde83 	.word	0x431bde83

08004ed4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004edc:	4b79      	ldr	r3, [pc, #484]	; (80050c4 <ADC_Init+0x1f0>)
 8004ede:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6859      	ldr	r1, [r3, #4]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	021a      	lsls	r2, r3, #8
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004f2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6859      	ldr	r1, [r3, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6899      	ldr	r1, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f66:	4a58      	ldr	r2, [pc, #352]	; (80050c8 <ADC_Init+0x1f4>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d022      	beq.n	8004fb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6899      	ldr	r1, [r3, #8]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6899      	ldr	r1, [r3, #8]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	609a      	str	r2, [r3, #8]
 8004fb0:	e00f      	b.n	8004fd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004fd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0202 	bic.w	r2, r2, #2
 8004fe0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6899      	ldr	r1, [r3, #8]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	7e1b      	ldrb	r3, [r3, #24]
 8004fec:	005a      	lsls	r2, r3, #1
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d01b      	beq.n	8005038 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800500e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800501e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6859      	ldr	r1, [r3, #4]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	3b01      	subs	r3, #1
 800502c:	035a      	lsls	r2, r3, #13
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
 8005036:	e007      	b.n	8005048 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005046:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005056:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	3b01      	subs	r3, #1
 8005064:	051a      	lsls	r2, r3, #20
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800507c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6899      	ldr	r1, [r3, #8]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800508a:	025a      	lsls	r2, r3, #9
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6899      	ldr	r1, [r3, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	029a      	lsls	r2, r3, #10
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	609a      	str	r2, [r3, #8]
}
 80050b8:	bf00      	nop
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	40012300 	.word	0x40012300
 80050c8:	0f000001 	.word	0x0f000001

080050cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050dc:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <__NVIC_SetPriorityGrouping+0x44>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050e8:	4013      	ands	r3, r2
 80050ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050fe:	4a04      	ldr	r2, [pc, #16]	; (8005110 <__NVIC_SetPriorityGrouping+0x44>)
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	60d3      	str	r3, [r2, #12]
}
 8005104:	bf00      	nop
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	e000ed00 	.word	0xe000ed00

08005114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005118:	4b04      	ldr	r3, [pc, #16]	; (800512c <__NVIC_GetPriorityGrouping+0x18>)
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	0a1b      	lsrs	r3, r3, #8
 800511e:	f003 0307 	and.w	r3, r3, #7
}
 8005122:	4618      	mov	r0, r3
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	e000ed00 	.word	0xe000ed00

08005130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800513a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513e:	2b00      	cmp	r3, #0
 8005140:	db0b      	blt.n	800515a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	f003 021f 	and.w	r2, r3, #31
 8005148:	4907      	ldr	r1, [pc, #28]	; (8005168 <__NVIC_EnableIRQ+0x38>)
 800514a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	2001      	movs	r0, #1
 8005152:	fa00 f202 	lsl.w	r2, r0, r2
 8005156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	e000e100 	.word	0xe000e100

0800516c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	4603      	mov	r3, r0
 8005174:	6039      	str	r1, [r7, #0]
 8005176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517c:	2b00      	cmp	r3, #0
 800517e:	db0a      	blt.n	8005196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	b2da      	uxtb	r2, r3
 8005184:	490c      	ldr	r1, [pc, #48]	; (80051b8 <__NVIC_SetPriority+0x4c>)
 8005186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800518a:	0112      	lsls	r2, r2, #4
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	440b      	add	r3, r1
 8005190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005194:	e00a      	b.n	80051ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	4908      	ldr	r1, [pc, #32]	; (80051bc <__NVIC_SetPriority+0x50>)
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	3b04      	subs	r3, #4
 80051a4:	0112      	lsls	r2, r2, #4
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	440b      	add	r3, r1
 80051aa:	761a      	strb	r2, [r3, #24]
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	e000e100 	.word	0xe000e100
 80051bc:	e000ed00 	.word	0xe000ed00

080051c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b089      	sub	sp, #36	; 0x24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f1c3 0307 	rsb	r3, r3, #7
 80051da:	2b04      	cmp	r3, #4
 80051dc:	bf28      	it	cs
 80051de:	2304      	movcs	r3, #4
 80051e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	3304      	adds	r3, #4
 80051e6:	2b06      	cmp	r3, #6
 80051e8:	d902      	bls.n	80051f0 <NVIC_EncodePriority+0x30>
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	3b03      	subs	r3, #3
 80051ee:	e000      	b.n	80051f2 <NVIC_EncodePriority+0x32>
 80051f0:	2300      	movs	r3, #0
 80051f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051f4:	f04f 32ff 	mov.w	r2, #4294967295
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	fa02 f303 	lsl.w	r3, r2, r3
 80051fe:	43da      	mvns	r2, r3
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	401a      	ands	r2, r3
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005208:	f04f 31ff 	mov.w	r1, #4294967295
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	fa01 f303 	lsl.w	r3, r1, r3
 8005212:	43d9      	mvns	r1, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005218:	4313      	orrs	r3, r2
         );
}
 800521a:	4618      	mov	r0, r3
 800521c:	3724      	adds	r7, #36	; 0x24
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b082      	sub	sp, #8
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7ff ff4c 	bl	80050cc <__NVIC_SetPriorityGrouping>
}
 8005234:	bf00      	nop
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	4603      	mov	r3, r0
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800524e:	f7ff ff61 	bl	8005114 <__NVIC_GetPriorityGrouping>
 8005252:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	6978      	ldr	r0, [r7, #20]
 800525a:	f7ff ffb1 	bl	80051c0 <NVIC_EncodePriority>
 800525e:	4602      	mov	r2, r0
 8005260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005264:	4611      	mov	r1, r2
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff ff80 	bl	800516c <__NVIC_SetPriority>
}
 800526c:	bf00      	nop
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800527e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff ff54 	bl	8005130 <__NVIC_EnableIRQ>
}
 8005288:	bf00      	nop
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800529e:	f7ff fc73 	bl	8004b88 <HAL_GetTick>
 80052a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d008      	beq.n	80052c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2280      	movs	r2, #128	; 0x80
 80052b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e052      	b.n	8005368 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0216 	bic.w	r2, r2, #22
 80052d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	695a      	ldr	r2, [r3, #20]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d103      	bne.n	80052f2 <HAL_DMA_Abort+0x62>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d007      	beq.n	8005302 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0208 	bic.w	r2, r2, #8
 8005300:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0201 	bic.w	r2, r2, #1
 8005310:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005312:	e013      	b.n	800533c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005314:	f7ff fc38 	bl	8004b88 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b05      	cmp	r3, #5
 8005320:	d90c      	bls.n	800533c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2220      	movs	r2, #32
 8005326:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2203      	movs	r2, #3
 800532c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e015      	b.n	8005368 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e4      	bne.n	8005314 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800534e:	223f      	movs	r2, #63	; 0x3f
 8005350:	409a      	lsls	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d004      	beq.n	800538e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2280      	movs	r2, #128	; 0x80
 8005388:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e00c      	b.n	80053a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2205      	movs	r2, #5
 8005392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0201 	bic.w	r2, r2, #1
 80053a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b089      	sub	sp, #36	; 0x24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ca:	2300      	movs	r3, #0
 80053cc:	61fb      	str	r3, [r7, #28]
 80053ce:	e159      	b.n	8005684 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053d0:	2201      	movs	r2, #1
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4013      	ands	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	f040 8148 	bne.w	800567e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d005      	beq.n	8005406 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005402:	2b02      	cmp	r3, #2
 8005404:	d130      	bne.n	8005468 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	2203      	movs	r2, #3
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	43db      	mvns	r3, r3
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	4013      	ands	r3, r2
 800541c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	fa02 f303 	lsl.w	r3, r2, r3
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	4313      	orrs	r3, r2
 800542e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800543c:	2201      	movs	r2, #1
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	43db      	mvns	r3, r3
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	4013      	ands	r3, r2
 800544a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	091b      	lsrs	r3, r3, #4
 8005452:	f003 0201 	and.w	r2, r3, #1
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	fa02 f303 	lsl.w	r3, r2, r3
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	4313      	orrs	r3, r2
 8005460:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f003 0303 	and.w	r3, r3, #3
 8005470:	2b03      	cmp	r3, #3
 8005472:	d017      	beq.n	80054a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	2203      	movs	r2, #3
 8005480:	fa02 f303 	lsl.w	r3, r2, r3
 8005484:	43db      	mvns	r3, r3
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	4013      	ands	r3, r2
 800548a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	fa02 f303 	lsl.w	r3, r2, r3
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	4313      	orrs	r3, r2
 800549c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f003 0303 	and.w	r3, r3, #3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d123      	bne.n	80054f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	08da      	lsrs	r2, r3, #3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3208      	adds	r2, #8
 80054b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	220f      	movs	r2, #15
 80054c8:	fa02 f303 	lsl.w	r3, r2, r3
 80054cc:	43db      	mvns	r3, r3
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	4013      	ands	r3, r2
 80054d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	08da      	lsrs	r2, r3, #3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3208      	adds	r2, #8
 80054f2:	69b9      	ldr	r1, [r7, #24]
 80054f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	2203      	movs	r2, #3
 8005504:	fa02 f303 	lsl.w	r3, r2, r3
 8005508:	43db      	mvns	r3, r3
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	4013      	ands	r3, r2
 800550e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f003 0203 	and.w	r2, r3, #3
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	fa02 f303 	lsl.w	r3, r2, r3
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	4313      	orrs	r3, r2
 8005524:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 80a2 	beq.w	800567e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	4b57      	ldr	r3, [pc, #348]	; (800569c <HAL_GPIO_Init+0x2e8>)
 8005540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005542:	4a56      	ldr	r2, [pc, #344]	; (800569c <HAL_GPIO_Init+0x2e8>)
 8005544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005548:	6453      	str	r3, [r2, #68]	; 0x44
 800554a:	4b54      	ldr	r3, [pc, #336]	; (800569c <HAL_GPIO_Init+0x2e8>)
 800554c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005556:	4a52      	ldr	r2, [pc, #328]	; (80056a0 <HAL_GPIO_Init+0x2ec>)
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	089b      	lsrs	r3, r3, #2
 800555c:	3302      	adds	r3, #2
 800555e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005562:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	220f      	movs	r2, #15
 800556e:	fa02 f303 	lsl.w	r3, r2, r3
 8005572:	43db      	mvns	r3, r3
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	4013      	ands	r3, r2
 8005578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a49      	ldr	r2, [pc, #292]	; (80056a4 <HAL_GPIO_Init+0x2f0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d019      	beq.n	80055b6 <HAL_GPIO_Init+0x202>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a48      	ldr	r2, [pc, #288]	; (80056a8 <HAL_GPIO_Init+0x2f4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d013      	beq.n	80055b2 <HAL_GPIO_Init+0x1fe>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a47      	ldr	r2, [pc, #284]	; (80056ac <HAL_GPIO_Init+0x2f8>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00d      	beq.n	80055ae <HAL_GPIO_Init+0x1fa>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a46      	ldr	r2, [pc, #280]	; (80056b0 <HAL_GPIO_Init+0x2fc>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d007      	beq.n	80055aa <HAL_GPIO_Init+0x1f6>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a45      	ldr	r2, [pc, #276]	; (80056b4 <HAL_GPIO_Init+0x300>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d101      	bne.n	80055a6 <HAL_GPIO_Init+0x1f2>
 80055a2:	2304      	movs	r3, #4
 80055a4:	e008      	b.n	80055b8 <HAL_GPIO_Init+0x204>
 80055a6:	2307      	movs	r3, #7
 80055a8:	e006      	b.n	80055b8 <HAL_GPIO_Init+0x204>
 80055aa:	2303      	movs	r3, #3
 80055ac:	e004      	b.n	80055b8 <HAL_GPIO_Init+0x204>
 80055ae:	2302      	movs	r3, #2
 80055b0:	e002      	b.n	80055b8 <HAL_GPIO_Init+0x204>
 80055b2:	2301      	movs	r3, #1
 80055b4:	e000      	b.n	80055b8 <HAL_GPIO_Init+0x204>
 80055b6:	2300      	movs	r3, #0
 80055b8:	69fa      	ldr	r2, [r7, #28]
 80055ba:	f002 0203 	and.w	r2, r2, #3
 80055be:	0092      	lsls	r2, r2, #2
 80055c0:	4093      	lsls	r3, r2
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055c8:	4935      	ldr	r1, [pc, #212]	; (80056a0 <HAL_GPIO_Init+0x2ec>)
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	089b      	lsrs	r3, r3, #2
 80055ce:	3302      	adds	r3, #2
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055d6:	4b38      	ldr	r3, [pc, #224]	; (80056b8 <HAL_GPIO_Init+0x304>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	43db      	mvns	r3, r3
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	4013      	ands	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055fa:	4a2f      	ldr	r2, [pc, #188]	; (80056b8 <HAL_GPIO_Init+0x304>)
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005600:	4b2d      	ldr	r3, [pc, #180]	; (80056b8 <HAL_GPIO_Init+0x304>)
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	43db      	mvns	r3, r3
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	4013      	ands	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	4313      	orrs	r3, r2
 8005622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005624:	4a24      	ldr	r2, [pc, #144]	; (80056b8 <HAL_GPIO_Init+0x304>)
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800562a:	4b23      	ldr	r3, [pc, #140]	; (80056b8 <HAL_GPIO_Init+0x304>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	43db      	mvns	r3, r3
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	4013      	ands	r3, r2
 8005638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	4313      	orrs	r3, r2
 800564c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800564e:	4a1a      	ldr	r2, [pc, #104]	; (80056b8 <HAL_GPIO_Init+0x304>)
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005654:	4b18      	ldr	r3, [pc, #96]	; (80056b8 <HAL_GPIO_Init+0x304>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	43db      	mvns	r3, r3
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	4013      	ands	r3, r2
 8005662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005678:	4a0f      	ldr	r2, [pc, #60]	; (80056b8 <HAL_GPIO_Init+0x304>)
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	3301      	adds	r3, #1
 8005682:	61fb      	str	r3, [r7, #28]
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	2b0f      	cmp	r3, #15
 8005688:	f67f aea2 	bls.w	80053d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800568c:	bf00      	nop
 800568e:	bf00      	nop
 8005690:	3724      	adds	r7, #36	; 0x24
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40023800 	.word	0x40023800
 80056a0:	40013800 	.word	0x40013800
 80056a4:	40020000 	.word	0x40020000
 80056a8:	40020400 	.word	0x40020400
 80056ac:	40020800 	.word	0x40020800
 80056b0:	40020c00 	.word	0x40020c00
 80056b4:	40021000 	.word	0x40021000
 80056b8:	40013c00 	.word	0x40013c00

080056bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	460b      	mov	r3, r1
 80056c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691a      	ldr	r2, [r3, #16]
 80056cc:	887b      	ldrh	r3, [r7, #2]
 80056ce:	4013      	ands	r3, r2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80056d4:	2301      	movs	r3, #1
 80056d6:	73fb      	strb	r3, [r7, #15]
 80056d8:	e001      	b.n	80056de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80056da:	2300      	movs	r3, #0
 80056dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80056de:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	460b      	mov	r3, r1
 80056f6:	807b      	strh	r3, [r7, #2]
 80056f8:	4613      	mov	r3, r2
 80056fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80056fc:	787b      	ldrb	r3, [r7, #1]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005702:	887a      	ldrh	r2, [r7, #2]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005708:	e003      	b.n	8005712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800570a:	887b      	ldrh	r3, [r7, #2]
 800570c:	041a      	lsls	r2, r3, #16
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	619a      	str	r2, [r3, #24]
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
	...

08005720 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	4603      	mov	r3, r0
 8005728:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800572a:	4b08      	ldr	r3, [pc, #32]	; (800574c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800572c:	695a      	ldr	r2, [r3, #20]
 800572e:	88fb      	ldrh	r3, [r7, #6]
 8005730:	4013      	ands	r3, r2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d006      	beq.n	8005744 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005736:	4a05      	ldr	r2, [pc, #20]	; (800574c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005738:	88fb      	ldrh	r3, [r7, #6]
 800573a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800573c:	88fb      	ldrh	r3, [r7, #6]
 800573e:	4618      	mov	r0, r3
 8005740:	f7fe faca 	bl	8003cd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005744:	bf00      	nop
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40013c00 	.word	0x40013c00

08005750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e12b      	b.n	80059ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7fe fe68 	bl	800444c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2224      	movs	r2, #36	; 0x24
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0201 	bic.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80057b4:	f002 f830 	bl	8007818 <HAL_RCC_GetPCLK1Freq>
 80057b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	4a81      	ldr	r2, [pc, #516]	; (80059c4 <HAL_I2C_Init+0x274>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d807      	bhi.n	80057d4 <HAL_I2C_Init+0x84>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4a80      	ldr	r2, [pc, #512]	; (80059c8 <HAL_I2C_Init+0x278>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	bf94      	ite	ls
 80057cc:	2301      	movls	r3, #1
 80057ce:	2300      	movhi	r3, #0
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	e006      	b.n	80057e2 <HAL_I2C_Init+0x92>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4a7d      	ldr	r2, [pc, #500]	; (80059cc <HAL_I2C_Init+0x27c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	bf94      	ite	ls
 80057dc:	2301      	movls	r3, #1
 80057de:	2300      	movhi	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e0e7      	b.n	80059ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4a78      	ldr	r2, [pc, #480]	; (80059d0 <HAL_I2C_Init+0x280>)
 80057ee:	fba2 2303 	umull	r2, r3, r2, r3
 80057f2:	0c9b      	lsrs	r3, r3, #18
 80057f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	430a      	orrs	r2, r1
 8005808:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	4a6a      	ldr	r2, [pc, #424]	; (80059c4 <HAL_I2C_Init+0x274>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d802      	bhi.n	8005824 <HAL_I2C_Init+0xd4>
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	3301      	adds	r3, #1
 8005822:	e009      	b.n	8005838 <HAL_I2C_Init+0xe8>
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800582a:	fb02 f303 	mul.w	r3, r2, r3
 800582e:	4a69      	ldr	r2, [pc, #420]	; (80059d4 <HAL_I2C_Init+0x284>)
 8005830:	fba2 2303 	umull	r2, r3, r2, r3
 8005834:	099b      	lsrs	r3, r3, #6
 8005836:	3301      	adds	r3, #1
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6812      	ldr	r2, [r2, #0]
 800583c:	430b      	orrs	r3, r1
 800583e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800584a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	495c      	ldr	r1, [pc, #368]	; (80059c4 <HAL_I2C_Init+0x274>)
 8005854:	428b      	cmp	r3, r1
 8005856:	d819      	bhi.n	800588c <HAL_I2C_Init+0x13c>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	1e59      	subs	r1, r3, #1
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	fbb1 f3f3 	udiv	r3, r1, r3
 8005866:	1c59      	adds	r1, r3, #1
 8005868:	f640 73fc 	movw	r3, #4092	; 0xffc
 800586c:	400b      	ands	r3, r1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <HAL_I2C_Init+0x138>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	1e59      	subs	r1, r3, #1
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005880:	3301      	adds	r3, #1
 8005882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005886:	e051      	b.n	800592c <HAL_I2C_Init+0x1dc>
 8005888:	2304      	movs	r3, #4
 800588a:	e04f      	b.n	800592c <HAL_I2C_Init+0x1dc>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d111      	bne.n	80058b8 <HAL_I2C_Init+0x168>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	1e58      	subs	r0, r3, #1
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6859      	ldr	r1, [r3, #4]
 800589c:	460b      	mov	r3, r1
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	440b      	add	r3, r1
 80058a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80058a6:	3301      	adds	r3, #1
 80058a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	bf0c      	ite	eq
 80058b0:	2301      	moveq	r3, #1
 80058b2:	2300      	movne	r3, #0
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	e012      	b.n	80058de <HAL_I2C_Init+0x18e>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	1e58      	subs	r0, r3, #1
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6859      	ldr	r1, [r3, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	440b      	add	r3, r1
 80058c6:	0099      	lsls	r1, r3, #2
 80058c8:	440b      	add	r3, r1
 80058ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80058ce:	3301      	adds	r3, #1
 80058d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	bf0c      	ite	eq
 80058d8:	2301      	moveq	r3, #1
 80058da:	2300      	movne	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <HAL_I2C_Init+0x196>
 80058e2:	2301      	movs	r3, #1
 80058e4:	e022      	b.n	800592c <HAL_I2C_Init+0x1dc>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10e      	bne.n	800590c <HAL_I2C_Init+0x1bc>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	1e58      	subs	r0, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6859      	ldr	r1, [r3, #4]
 80058f6:	460b      	mov	r3, r1
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	440b      	add	r3, r1
 80058fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005900:	3301      	adds	r3, #1
 8005902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800590a:	e00f      	b.n	800592c <HAL_I2C_Init+0x1dc>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	1e58      	subs	r0, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6859      	ldr	r1, [r3, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	0099      	lsls	r1, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005922:	3301      	adds	r3, #1
 8005924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005928:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	6809      	ldr	r1, [r1, #0]
 8005930:	4313      	orrs	r3, r2
 8005932:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69da      	ldr	r2, [r3, #28]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800595a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6911      	ldr	r1, [r2, #16]
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	68d2      	ldr	r2, [r2, #12]
 8005966:	4311      	orrs	r1, r2
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6812      	ldr	r2, [r2, #0]
 800596c:	430b      	orrs	r3, r1
 800596e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	695a      	ldr	r2, [r3, #20]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	000186a0 	.word	0x000186a0
 80059c8:	001e847f 	.word	0x001e847f
 80059cc:	003d08ff 	.word	0x003d08ff
 80059d0:	431bde83 	.word	0x431bde83
 80059d4:	10624dd3 	.word	0x10624dd3

080059d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af02      	add	r7, sp, #8
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	607a      	str	r2, [r7, #4]
 80059e2:	461a      	mov	r2, r3
 80059e4:	460b      	mov	r3, r1
 80059e6:	817b      	strh	r3, [r7, #10]
 80059e8:	4613      	mov	r3, r2
 80059ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059ec:	f7ff f8cc 	bl	8004b88 <HAL_GetTick>
 80059f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b20      	cmp	r3, #32
 80059fc:	f040 80e0 	bne.w	8005bc0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	2319      	movs	r3, #25
 8005a06:	2201      	movs	r2, #1
 8005a08:	4970      	ldr	r1, [pc, #448]	; (8005bcc <HAL_I2C_Master_Transmit+0x1f4>)
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f001 f8f6 	bl	8006bfc <I2C_WaitOnFlagUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005a16:	2302      	movs	r3, #2
 8005a18:	e0d3      	b.n	8005bc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d101      	bne.n	8005a28 <HAL_I2C_Master_Transmit+0x50>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e0cc      	b.n	8005bc2 <HAL_I2C_Master_Transmit+0x1ea>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d007      	beq.n	8005a4e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f042 0201 	orr.w	r2, r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2221      	movs	r2, #33	; 0x21
 8005a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2210      	movs	r2, #16
 8005a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	893a      	ldrh	r2, [r7, #8]
 8005a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4a50      	ldr	r2, [pc, #320]	; (8005bd0 <HAL_I2C_Master_Transmit+0x1f8>)
 8005a8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005a90:	8979      	ldrh	r1, [r7, #10]
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	6a3a      	ldr	r2, [r7, #32]
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 fde2 	bl	8006660 <I2C_MasterRequestWrite>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e08d      	b.n	8005bc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	613b      	str	r3, [r7, #16]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	613b      	str	r3, [r7, #16]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	613b      	str	r3, [r7, #16]
 8005aba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005abc:	e066      	b.n	8005b8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	6a39      	ldr	r1, [r7, #32]
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f001 f970 	bl	8006da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00d      	beq.n	8005aea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d107      	bne.n	8005ae6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ae4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e06b      	b.n	8005bc2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	781a      	ldrb	r2, [r3, #0]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	1c5a      	adds	r2, r3, #1
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	3b01      	subs	r3, #1
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b12:	3b01      	subs	r3, #1
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d11b      	bne.n	8005b60 <HAL_I2C_Master_Transmit+0x188>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d017      	beq.n	8005b60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	781a      	ldrb	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	1c5a      	adds	r2, r3, #1
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	6a39      	ldr	r1, [r7, #32]
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f001 f960 	bl	8006e2a <I2C_WaitOnBTFFlagUntilTimeout>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00d      	beq.n	8005b8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b74:	2b04      	cmp	r3, #4
 8005b76:	d107      	bne.n	8005b88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e01a      	b.n	8005bc2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d194      	bne.n	8005abe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	e000      	b.n	8005bc2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005bc0:	2302      	movs	r3, #2
  }
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	00100002 	.word	0x00100002
 8005bd0:	ffff0000 	.word	0xffff0000

08005bd4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08c      	sub	sp, #48	; 0x30
 8005bd8:	af02      	add	r7, sp, #8
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	607a      	str	r2, [r7, #4]
 8005bde:	461a      	mov	r2, r3
 8005be0:	460b      	mov	r3, r1
 8005be2:	817b      	strh	r3, [r7, #10]
 8005be4:	4613      	mov	r3, r2
 8005be6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005be8:	f7fe ffce 	bl	8004b88 <HAL_GetTick>
 8005bec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	f040 820b 	bne.w	8006012 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	2319      	movs	r3, #25
 8005c02:	2201      	movs	r2, #1
 8005c04:	497c      	ldr	r1, [pc, #496]	; (8005df8 <HAL_I2C_Master_Receive+0x224>)
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f000 fff8 	bl	8006bfc <I2C_WaitOnFlagUntilTimeout>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005c12:	2302      	movs	r3, #2
 8005c14:	e1fe      	b.n	8006014 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_I2C_Master_Receive+0x50>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e1f7      	b.n	8006014 <HAL_I2C_Master_Receive+0x440>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d007      	beq.n	8005c4a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f042 0201 	orr.w	r2, r2, #1
 8005c48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2222      	movs	r2, #34	; 0x22
 8005c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2210      	movs	r2, #16
 8005c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	893a      	ldrh	r2, [r7, #8]
 8005c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4a5c      	ldr	r2, [pc, #368]	; (8005dfc <HAL_I2C_Master_Receive+0x228>)
 8005c8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005c8c:	8979      	ldrh	r1, [r7, #10]
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 fd66 	bl	8006764 <I2C_MasterRequestRead>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e1b8      	b.n	8006014 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d113      	bne.n	8005cd2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005caa:	2300      	movs	r3, #0
 8005cac:	623b      	str	r3, [r7, #32]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	623b      	str	r3, [r7, #32]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	623b      	str	r3, [r7, #32]
 8005cbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	e18c      	b.n	8005fec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d11b      	bne.n	8005d12 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cea:	2300      	movs	r3, #0
 8005cec:	61fb      	str	r3, [r7, #28]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	61fb      	str	r3, [r7, #28]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	61fb      	str	r3, [r7, #28]
 8005cfe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	e16c      	b.n	8005fec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d11b      	bne.n	8005d52 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	61bb      	str	r3, [r7, #24]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	61bb      	str	r3, [r7, #24]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	e14c      	b.n	8005fec <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d62:	2300      	movs	r3, #0
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	617b      	str	r3, [r7, #20]
 8005d76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005d78:	e138      	b.n	8005fec <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	f200 80f1 	bhi.w	8005f66 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d123      	bne.n	8005dd4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f001 f88b 	bl	8006eac <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e139      	b.n	8006014 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691a      	ldr	r2, [r3, #16]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dd2:	e10b      	b.n	8005fec <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d14e      	bne.n	8005e7a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de2:	2200      	movs	r2, #0
 8005de4:	4906      	ldr	r1, [pc, #24]	; (8005e00 <HAL_I2C_Master_Receive+0x22c>)
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 ff08 	bl	8006bfc <I2C_WaitOnFlagUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d008      	beq.n	8005e04 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e10e      	b.n	8006014 <HAL_I2C_Master_Receive+0x440>
 8005df6:	bf00      	nop
 8005df8:	00100002 	.word	0x00100002
 8005dfc:	ffff0000 	.word	0xffff0000
 8005e00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691a      	ldr	r2, [r3, #16]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	691a      	ldr	r2, [r3, #16]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e62:	3b01      	subs	r3, #1
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	3b01      	subs	r3, #1
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e78:	e0b8      	b.n	8005fec <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	2200      	movs	r2, #0
 8005e82:	4966      	ldr	r1, [pc, #408]	; (800601c <HAL_I2C_Master_Receive+0x448>)
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 feb9 	bl	8006bfc <I2C_WaitOnFlagUntilTimeout>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e0bf      	b.n	8006014 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ea2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691a      	ldr	r2, [r3, #16]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005edc:	2200      	movs	r2, #0
 8005ede:	494f      	ldr	r1, [pc, #316]	; (800601c <HAL_I2C_Master_Receive+0x448>)
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 fe8b 	bl	8006bfc <I2C_WaitOnFlagUntilTimeout>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e091      	b.n	8006014 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005efe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691a      	ldr	r2, [r3, #16]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	691a      	ldr	r2, [r3, #16]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f64:	e042      	b.n	8005fec <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 ff9e 	bl	8006eac <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e04c      	b.n	8006014 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	691a      	ldr	r2, [r3, #16]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	b2d2      	uxtb	r2, r2
 8005f86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f96:	3b01      	subs	r3, #1
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	f003 0304 	and.w	r3, r3, #4
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d118      	bne.n	8005fec <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	691a      	ldr	r2, [r3, #16]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	b2d2      	uxtb	r2, r2
 8005fc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	1c5a      	adds	r2, r3, #1
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f47f aec2 	bne.w	8005d7a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	e000      	b.n	8006014 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006012:	2302      	movs	r3, #2
  }
}
 8006014:	4618      	mov	r0, r3
 8006016:	3728      	adds	r7, #40	; 0x28
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	00010004 	.word	0x00010004

08006020 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af02      	add	r7, sp, #8
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	4608      	mov	r0, r1
 800602a:	4611      	mov	r1, r2
 800602c:	461a      	mov	r2, r3
 800602e:	4603      	mov	r3, r0
 8006030:	817b      	strh	r3, [r7, #10]
 8006032:	460b      	mov	r3, r1
 8006034:	813b      	strh	r3, [r7, #8]
 8006036:	4613      	mov	r3, r2
 8006038:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800603a:	f7fe fda5 	bl	8004b88 <HAL_GetTick>
 800603e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b20      	cmp	r3, #32
 800604a:	f040 80d9 	bne.w	8006200 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	2319      	movs	r3, #25
 8006054:	2201      	movs	r2, #1
 8006056:	496d      	ldr	r1, [pc, #436]	; (800620c <HAL_I2C_Mem_Write+0x1ec>)
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 fdcf 	bl	8006bfc <I2C_WaitOnFlagUntilTimeout>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006064:	2302      	movs	r3, #2
 8006066:	e0cc      	b.n	8006202 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800606e:	2b01      	cmp	r3, #1
 8006070:	d101      	bne.n	8006076 <HAL_I2C_Mem_Write+0x56>
 8006072:	2302      	movs	r3, #2
 8006074:	e0c5      	b.n	8006202 <HAL_I2C_Mem_Write+0x1e2>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b01      	cmp	r3, #1
 800608a:	d007      	beq.n	800609c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f042 0201 	orr.w	r2, r2, #1
 800609a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2221      	movs	r2, #33	; 0x21
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2240      	movs	r2, #64	; 0x40
 80060b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6a3a      	ldr	r2, [r7, #32]
 80060c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4a4d      	ldr	r2, [pc, #308]	; (8006210 <HAL_I2C_Mem_Write+0x1f0>)
 80060dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060de:	88f8      	ldrh	r0, [r7, #6]
 80060e0:	893a      	ldrh	r2, [r7, #8]
 80060e2:	8979      	ldrh	r1, [r7, #10]
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	9301      	str	r3, [sp, #4]
 80060e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	4603      	mov	r3, r0
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 fc06 	bl	8006900 <I2C_RequestMemoryWrite>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d052      	beq.n	80061a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e081      	b.n	8006202 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 fe50 	bl	8006da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00d      	beq.n	800612a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	2b04      	cmp	r3, #4
 8006114:	d107      	bne.n	8006126 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006124:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e06b      	b.n	8006202 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612e:	781a      	ldrb	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006144:	3b01      	subs	r3, #1
 8006146:	b29a      	uxth	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006150:	b29b      	uxth	r3, r3
 8006152:	3b01      	subs	r3, #1
 8006154:	b29a      	uxth	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	2b04      	cmp	r3, #4
 8006166:	d11b      	bne.n	80061a0 <HAL_I2C_Mem_Write+0x180>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800616c:	2b00      	cmp	r3, #0
 800616e:	d017      	beq.n	80061a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	781a      	ldrb	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006196:	b29b      	uxth	r3, r3
 8006198:	3b01      	subs	r3, #1
 800619a:	b29a      	uxth	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1aa      	bne.n	80060fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f000 fe3c 	bl	8006e2a <I2C_WaitOnBTFFlagUntilTimeout>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00d      	beq.n	80061d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061bc:	2b04      	cmp	r3, #4
 80061be:	d107      	bne.n	80061d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e016      	b.n	8006202 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80061fc:	2300      	movs	r3, #0
 80061fe:	e000      	b.n	8006202 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006200:	2302      	movs	r3, #2
  }
}
 8006202:	4618      	mov	r0, r3
 8006204:	3718      	adds	r7, #24
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	00100002 	.word	0x00100002
 8006210:	ffff0000 	.word	0xffff0000

08006214 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b08c      	sub	sp, #48	; 0x30
 8006218:	af02      	add	r7, sp, #8
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	4608      	mov	r0, r1
 800621e:	4611      	mov	r1, r2
 8006220:	461a      	mov	r2, r3
 8006222:	4603      	mov	r3, r0
 8006224:	817b      	strh	r3, [r7, #10]
 8006226:	460b      	mov	r3, r1
 8006228:	813b      	strh	r3, [r7, #8]
 800622a:	4613      	mov	r3, r2
 800622c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800622e:	f7fe fcab 	bl	8004b88 <HAL_GetTick>
 8006232:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b20      	cmp	r3, #32
 800623e:	f040 8208 	bne.w	8006652 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	2319      	movs	r3, #25
 8006248:	2201      	movs	r2, #1
 800624a:	497b      	ldr	r1, [pc, #492]	; (8006438 <HAL_I2C_Mem_Read+0x224>)
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 fcd5 	bl	8006bfc <I2C_WaitOnFlagUntilTimeout>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006258:	2302      	movs	r3, #2
 800625a:	e1fb      	b.n	8006654 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006262:	2b01      	cmp	r3, #1
 8006264:	d101      	bne.n	800626a <HAL_I2C_Mem_Read+0x56>
 8006266:	2302      	movs	r3, #2
 8006268:	e1f4      	b.n	8006654 <HAL_I2C_Mem_Read+0x440>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b01      	cmp	r3, #1
 800627e:	d007      	beq.n	8006290 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f042 0201 	orr.w	r2, r2, #1
 800628e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800629e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2222      	movs	r2, #34	; 0x22
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2240      	movs	r2, #64	; 0x40
 80062ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80062c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4a5b      	ldr	r2, [pc, #364]	; (800643c <HAL_I2C_Mem_Read+0x228>)
 80062d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062d2:	88f8      	ldrh	r0, [r7, #6]
 80062d4:	893a      	ldrh	r2, [r7, #8]
 80062d6:	8979      	ldrh	r1, [r7, #10]
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	9301      	str	r3, [sp, #4]
 80062dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	4603      	mov	r3, r0
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f000 fba2 	bl	8006a2c <I2C_RequestMemoryRead>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e1b0      	b.n	8006654 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d113      	bne.n	8006322 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062fa:	2300      	movs	r3, #0
 80062fc:	623b      	str	r3, [r7, #32]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	623b      	str	r3, [r7, #32]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	623b      	str	r3, [r7, #32]
 800630e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	e184      	b.n	800662c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006326:	2b01      	cmp	r3, #1
 8006328:	d11b      	bne.n	8006362 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006338:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800633a:	2300      	movs	r3, #0
 800633c:	61fb      	str	r3, [r7, #28]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	61fb      	str	r3, [r7, #28]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	61fb      	str	r3, [r7, #28]
 800634e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	e164      	b.n	800662c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006366:	2b02      	cmp	r3, #2
 8006368:	d11b      	bne.n	80063a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006378:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006388:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800638a:	2300      	movs	r3, #0
 800638c:	61bb      	str	r3, [r7, #24]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	61bb      	str	r3, [r7, #24]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	61bb      	str	r3, [r7, #24]
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	e144      	b.n	800662c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063a2:	2300      	movs	r3, #0
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	617b      	str	r3, [r7, #20]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	617b      	str	r3, [r7, #20]
 80063b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80063b8:	e138      	b.n	800662c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063be:	2b03      	cmp	r3, #3
 80063c0:	f200 80f1 	bhi.w	80065a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d123      	bne.n	8006414 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 fd6b 	bl	8006eac <I2C_WaitOnRXNEFlagUntilTimeout>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e139      	b.n	8006654 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	691a      	ldr	r2, [r3, #16]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	1c5a      	adds	r2, r3, #1
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063fc:	3b01      	subs	r3, #1
 80063fe:	b29a      	uxth	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006408:	b29b      	uxth	r3, r3
 800640a:	3b01      	subs	r3, #1
 800640c:	b29a      	uxth	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006412:	e10b      	b.n	800662c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006418:	2b02      	cmp	r3, #2
 800641a:	d14e      	bne.n	80064ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006422:	2200      	movs	r2, #0
 8006424:	4906      	ldr	r1, [pc, #24]	; (8006440 <HAL_I2C_Mem_Read+0x22c>)
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 fbe8 	bl	8006bfc <I2C_WaitOnFlagUntilTimeout>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d008      	beq.n	8006444 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e10e      	b.n	8006654 <HAL_I2C_Mem_Read+0x440>
 8006436:	bf00      	nop
 8006438:	00100002 	.word	0x00100002
 800643c:	ffff0000 	.word	0xffff0000
 8006440:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006452:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	691a      	ldr	r2, [r3, #16]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	b2d2      	uxtb	r2, r2
 8006460:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006470:	3b01      	subs	r3, #1
 8006472:	b29a      	uxth	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800647c:	b29b      	uxth	r3, r3
 800647e:	3b01      	subs	r3, #1
 8006480:	b29a      	uxth	r2, r3
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	691a      	ldr	r2, [r3, #16]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a2:	3b01      	subs	r3, #1
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	3b01      	subs	r3, #1
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064b8:	e0b8      	b.n	800662c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	2200      	movs	r2, #0
 80064c2:	4966      	ldr	r1, [pc, #408]	; (800665c <HAL_I2C_Mem_Read+0x448>)
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 fb99 	bl	8006bfc <I2C_WaitOnFlagUntilTimeout>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e0bf      	b.n	8006654 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	691a      	ldr	r2, [r3, #16]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	1c5a      	adds	r2, r3, #1
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006500:	3b01      	subs	r3, #1
 8006502:	b29a      	uxth	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650c:	b29b      	uxth	r3, r3
 800650e:	3b01      	subs	r3, #1
 8006510:	b29a      	uxth	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651c:	2200      	movs	r2, #0
 800651e:	494f      	ldr	r1, [pc, #316]	; (800665c <HAL_I2C_Mem_Read+0x448>)
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 fb6b 	bl	8006bfc <I2C_WaitOnFlagUntilTimeout>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e091      	b.n	8006654 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800653e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	691a      	ldr	r2, [r3, #16]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	b2d2      	uxtb	r2, r2
 800654c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655c:	3b01      	subs	r3, #1
 800655e:	b29a      	uxth	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006568:	b29b      	uxth	r3, r3
 800656a:	3b01      	subs	r3, #1
 800656c:	b29a      	uxth	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	691a      	ldr	r2, [r3, #16]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	b2d2      	uxtb	r2, r2
 800657e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800658e:	3b01      	subs	r3, #1
 8006590:	b29a      	uxth	r2, r3
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659a:	b29b      	uxth	r3, r3
 800659c:	3b01      	subs	r3, #1
 800659e:	b29a      	uxth	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80065a4:	e042      	b.n	800662c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 fc7e 	bl	8006eac <I2C_WaitOnRXNEFlagUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e04c      	b.n	8006654 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	b2d2      	uxtb	r2, r2
 80065c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d6:	3b01      	subs	r3, #1
 80065d8:	b29a      	uxth	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	3b01      	subs	r3, #1
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	f003 0304 	and.w	r3, r3, #4
 80065f6:	2b04      	cmp	r3, #4
 80065f8:	d118      	bne.n	800662c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	691a      	ldr	r2, [r3, #16]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	b2d2      	uxtb	r2, r2
 8006606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006616:	3b01      	subs	r3, #1
 8006618:	b29a      	uxth	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006622:	b29b      	uxth	r3, r3
 8006624:	3b01      	subs	r3, #1
 8006626:	b29a      	uxth	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006630:	2b00      	cmp	r3, #0
 8006632:	f47f aec2 	bne.w	80063ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2220      	movs	r2, #32
 800663a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	e000      	b.n	8006654 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006652:	2302      	movs	r3, #2
  }
}
 8006654:	4618      	mov	r0, r3
 8006656:	3728      	adds	r7, #40	; 0x28
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	00010004 	.word	0x00010004

08006660 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b088      	sub	sp, #32
 8006664:	af02      	add	r7, sp, #8
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	607a      	str	r2, [r7, #4]
 800666a:	603b      	str	r3, [r7, #0]
 800666c:	460b      	mov	r3, r1
 800666e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006674:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2b08      	cmp	r3, #8
 800667a:	d006      	beq.n	800668a <I2C_MasterRequestWrite+0x2a>
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d003      	beq.n	800668a <I2C_MasterRequestWrite+0x2a>
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006688:	d108      	bne.n	800669c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	e00b      	b.n	80066b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a0:	2b12      	cmp	r3, #18
 80066a2:	d107      	bne.n	80066b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f000 fa9b 	bl	8006bfc <I2C_WaitOnFlagUntilTimeout>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00d      	beq.n	80066e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066da:	d103      	bne.n	80066e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e035      	b.n	8006754 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066f0:	d108      	bne.n	8006704 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066f2:	897b      	ldrh	r3, [r7, #10]
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	461a      	mov	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006700:	611a      	str	r2, [r3, #16]
 8006702:	e01b      	b.n	800673c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006704:	897b      	ldrh	r3, [r7, #10]
 8006706:	11db      	asrs	r3, r3, #7
 8006708:	b2db      	uxtb	r3, r3
 800670a:	f003 0306 	and.w	r3, r3, #6
 800670e:	b2db      	uxtb	r3, r3
 8006710:	f063 030f 	orn	r3, r3, #15
 8006714:	b2da      	uxtb	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	490e      	ldr	r1, [pc, #56]	; (800675c <I2C_MasterRequestWrite+0xfc>)
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 fac1 	bl	8006caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e010      	b.n	8006754 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006732:	897b      	ldrh	r3, [r7, #10]
 8006734:	b2da      	uxtb	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	4907      	ldr	r1, [pc, #28]	; (8006760 <I2C_MasterRequestWrite+0x100>)
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 fab1 	bl	8006caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e000      	b.n	8006754 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3718      	adds	r7, #24
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	00010008 	.word	0x00010008
 8006760:	00010002 	.word	0x00010002

08006764 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af02      	add	r7, sp, #8
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	607a      	str	r2, [r7, #4]
 800676e:	603b      	str	r3, [r7, #0]
 8006770:	460b      	mov	r3, r1
 8006772:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006778:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006788:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	2b08      	cmp	r3, #8
 800678e:	d006      	beq.n	800679e <I2C_MasterRequestRead+0x3a>
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d003      	beq.n	800679e <I2C_MasterRequestRead+0x3a>
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800679c:	d108      	bne.n	80067b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	e00b      	b.n	80067c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b4:	2b11      	cmp	r3, #17
 80067b6:	d107      	bne.n	80067c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 fa11 	bl	8006bfc <I2C_WaitOnFlagUntilTimeout>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00d      	beq.n	80067fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ee:	d103      	bne.n	80067f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e079      	b.n	80068f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006804:	d108      	bne.n	8006818 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006806:	897b      	ldrh	r3, [r7, #10]
 8006808:	b2db      	uxtb	r3, r3
 800680a:	f043 0301 	orr.w	r3, r3, #1
 800680e:	b2da      	uxtb	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	611a      	str	r2, [r3, #16]
 8006816:	e05f      	b.n	80068d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006818:	897b      	ldrh	r3, [r7, #10]
 800681a:	11db      	asrs	r3, r3, #7
 800681c:	b2db      	uxtb	r3, r3
 800681e:	f003 0306 	and.w	r3, r3, #6
 8006822:	b2db      	uxtb	r3, r3
 8006824:	f063 030f 	orn	r3, r3, #15
 8006828:	b2da      	uxtb	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	4930      	ldr	r1, [pc, #192]	; (80068f8 <I2C_MasterRequestRead+0x194>)
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 fa37 	bl	8006caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e054      	b.n	80068f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006846:	897b      	ldrh	r3, [r7, #10]
 8006848:	b2da      	uxtb	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	4929      	ldr	r1, [pc, #164]	; (80068fc <I2C_MasterRequestRead+0x198>)
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 fa27 	bl	8006caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e044      	b.n	80068f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006866:	2300      	movs	r3, #0
 8006868:	613b      	str	r3, [r7, #16]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	613b      	str	r3, [r7, #16]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	613b      	str	r3, [r7, #16]
 800687a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800688a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 f9af 	bl	8006bfc <I2C_WaitOnFlagUntilTimeout>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00d      	beq.n	80068c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068b2:	d103      	bne.n	80068bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068ba:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e017      	b.n	80068f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80068c0:	897b      	ldrh	r3, [r7, #10]
 80068c2:	11db      	asrs	r3, r3, #7
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	f003 0306 	and.w	r3, r3, #6
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	f063 030e 	orn	r3, r3, #14
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	4907      	ldr	r1, [pc, #28]	; (80068fc <I2C_MasterRequestRead+0x198>)
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 f9e3 	bl	8006caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e000      	b.n	80068f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3718      	adds	r7, #24
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	00010008 	.word	0x00010008
 80068fc:	00010002 	.word	0x00010002

08006900 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b088      	sub	sp, #32
 8006904:	af02      	add	r7, sp, #8
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	4608      	mov	r0, r1
 800690a:	4611      	mov	r1, r2
 800690c:	461a      	mov	r2, r3
 800690e:	4603      	mov	r3, r0
 8006910:	817b      	strh	r3, [r7, #10]
 8006912:	460b      	mov	r3, r1
 8006914:	813b      	strh	r3, [r7, #8]
 8006916:	4613      	mov	r3, r2
 8006918:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006928:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	2200      	movs	r2, #0
 8006932:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 f960 	bl	8006bfc <I2C_WaitOnFlagUntilTimeout>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00d      	beq.n	800695e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800694c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006950:	d103      	bne.n	800695a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006958:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e05f      	b.n	8006a1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800695e:	897b      	ldrh	r3, [r7, #10]
 8006960:	b2db      	uxtb	r3, r3
 8006962:	461a      	mov	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800696c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	6a3a      	ldr	r2, [r7, #32]
 8006972:	492d      	ldr	r1, [pc, #180]	; (8006a28 <I2C_RequestMemoryWrite+0x128>)
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 f998 	bl	8006caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d001      	beq.n	8006984 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e04c      	b.n	8006a1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006984:	2300      	movs	r3, #0
 8006986:	617b      	str	r3, [r7, #20]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800699a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800699c:	6a39      	ldr	r1, [r7, #32]
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 fa02 	bl	8006da8 <I2C_WaitOnTXEFlagUntilTimeout>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00d      	beq.n	80069c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	2b04      	cmp	r3, #4
 80069b0:	d107      	bne.n	80069c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e02b      	b.n	8006a1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069c6:	88fb      	ldrh	r3, [r7, #6]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d105      	bne.n	80069d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069cc:	893b      	ldrh	r3, [r7, #8]
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	611a      	str	r2, [r3, #16]
 80069d6:	e021      	b.n	8006a1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80069d8:	893b      	ldrh	r3, [r7, #8]
 80069da:	0a1b      	lsrs	r3, r3, #8
 80069dc:	b29b      	uxth	r3, r3
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e8:	6a39      	ldr	r1, [r7, #32]
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 f9dc 	bl	8006da8 <I2C_WaitOnTXEFlagUntilTimeout>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00d      	beq.n	8006a12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d107      	bne.n	8006a0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e005      	b.n	8006a1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a12:	893b      	ldrh	r3, [r7, #8]
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	00010002 	.word	0x00010002

08006a2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b088      	sub	sp, #32
 8006a30:	af02      	add	r7, sp, #8
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	4608      	mov	r0, r1
 8006a36:	4611      	mov	r1, r2
 8006a38:	461a      	mov	r2, r3
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	817b      	strh	r3, [r7, #10]
 8006a3e:	460b      	mov	r3, r1
 8006a40:	813b      	strh	r3, [r7, #8]
 8006a42:	4613      	mov	r3, r2
 8006a44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f8c2 	bl	8006bfc <I2C_WaitOnFlagUntilTimeout>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00d      	beq.n	8006a9a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a8c:	d103      	bne.n	8006a96 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e0aa      	b.n	8006bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a9a:	897b      	ldrh	r3, [r7, #10]
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006aa8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	6a3a      	ldr	r2, [r7, #32]
 8006aae:	4952      	ldr	r1, [pc, #328]	; (8006bf8 <I2C_RequestMemoryRead+0x1cc>)
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 f8fa 	bl	8006caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e097      	b.n	8006bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	617b      	str	r3, [r7, #20]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	617b      	str	r3, [r7, #20]
 8006ad4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ad8:	6a39      	ldr	r1, [r7, #32]
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 f964 	bl	8006da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00d      	beq.n	8006b02 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	d107      	bne.n	8006afe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006afc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e076      	b.n	8006bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b02:	88fb      	ldrh	r3, [r7, #6]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d105      	bne.n	8006b14 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b08:	893b      	ldrh	r3, [r7, #8]
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	611a      	str	r2, [r3, #16]
 8006b12:	e021      	b.n	8006b58 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b14:	893b      	ldrh	r3, [r7, #8]
 8006b16:	0a1b      	lsrs	r3, r3, #8
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b24:	6a39      	ldr	r1, [r7, #32]
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f000 f93e 	bl	8006da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00d      	beq.n	8006b4e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d107      	bne.n	8006b4a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e050      	b.n	8006bf0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b4e:	893b      	ldrh	r3, [r7, #8]
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b5a:	6a39      	ldr	r1, [r7, #32]
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f000 f923 	bl	8006da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00d      	beq.n	8006b84 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6c:	2b04      	cmp	r3, #4
 8006b6e:	d107      	bne.n	8006b80 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b7e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e035      	b.n	8006bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b92:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 f82b 	bl	8006bfc <I2C_WaitOnFlagUntilTimeout>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00d      	beq.n	8006bc8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bba:	d103      	bne.n	8006bc4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e013      	b.n	8006bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006bc8:	897b      	ldrh	r3, [r7, #10]
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	f043 0301 	orr.w	r3, r3, #1
 8006bd0:	b2da      	uxtb	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	6a3a      	ldr	r2, [r7, #32]
 8006bdc:	4906      	ldr	r1, [pc, #24]	; (8006bf8 <I2C_RequestMemoryRead+0x1cc>)
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 f863 	bl	8006caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e000      	b.n	8006bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3718      	adds	r7, #24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	00010002 	.word	0x00010002

08006bfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	603b      	str	r3, [r7, #0]
 8006c08:	4613      	mov	r3, r2
 8006c0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c0c:	e025      	b.n	8006c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c14:	d021      	beq.n	8006c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c16:	f7fd ffb7 	bl	8004b88 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d302      	bcc.n	8006c2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d116      	bne.n	8006c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	f043 0220 	orr.w	r2, r3, #32
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e023      	b.n	8006ca2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	0c1b      	lsrs	r3, r3, #16
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d10d      	bne.n	8006c80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	43da      	mvns	r2, r3
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4013      	ands	r3, r2
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	bf0c      	ite	eq
 8006c76:	2301      	moveq	r3, #1
 8006c78:	2300      	movne	r3, #0
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	e00c      	b.n	8006c9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	43da      	mvns	r2, r3
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	bf0c      	ite	eq
 8006c92:	2301      	moveq	r3, #1
 8006c94:	2300      	movne	r3, #0
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	461a      	mov	r2, r3
 8006c9a:	79fb      	ldrb	r3, [r7, #7]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d0b6      	beq.n	8006c0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b084      	sub	sp, #16
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	60f8      	str	r0, [r7, #12]
 8006cb2:	60b9      	str	r1, [r7, #8]
 8006cb4:	607a      	str	r2, [r7, #4]
 8006cb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006cb8:	e051      	b.n	8006d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cc8:	d123      	bne.n	8006d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cd8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ce2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2220      	movs	r2, #32
 8006cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfe:	f043 0204 	orr.w	r2, r3, #4
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e046      	b.n	8006da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d18:	d021      	beq.n	8006d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d1a:	f7fd ff35 	bl	8004b88 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d302      	bcc.n	8006d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d116      	bne.n	8006d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	f043 0220 	orr.w	r2, r3, #32
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e020      	b.n	8006da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	0c1b      	lsrs	r3, r3, #16
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d10c      	bne.n	8006d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	43da      	mvns	r2, r3
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	4013      	ands	r3, r2
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	bf14      	ite	ne
 8006d7a:	2301      	movne	r3, #1
 8006d7c:	2300      	moveq	r3, #0
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	e00b      	b.n	8006d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	43da      	mvns	r2, r3
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	bf14      	ite	ne
 8006d94:	2301      	movne	r3, #1
 8006d96:	2300      	moveq	r3, #0
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d18d      	bne.n	8006cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006db4:	e02d      	b.n	8006e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f000 f8ce 	bl	8006f58 <I2C_IsAcknowledgeFailed>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e02d      	b.n	8006e22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dcc:	d021      	beq.n	8006e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dce:	f7fd fedb 	bl	8004b88 <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d302      	bcc.n	8006de4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d116      	bne.n	8006e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2220      	movs	r2, #32
 8006dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfe:	f043 0220 	orr.w	r2, r3, #32
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e007      	b.n	8006e22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e1c:	2b80      	cmp	r3, #128	; 0x80
 8006e1e:	d1ca      	bne.n	8006db6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e36:	e02d      	b.n	8006e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 f88d 	bl	8006f58 <I2C_IsAcknowledgeFailed>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e02d      	b.n	8006ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4e:	d021      	beq.n	8006e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e50:	f7fd fe9a 	bl	8004b88 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d302      	bcc.n	8006e66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d116      	bne.n	8006e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e80:	f043 0220 	orr.w	r2, r3, #32
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e007      	b.n	8006ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	f003 0304 	and.w	r3, r3, #4
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	d1ca      	bne.n	8006e38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006eb8:	e042      	b.n	8006f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	f003 0310 	and.w	r3, r3, #16
 8006ec4:	2b10      	cmp	r3, #16
 8006ec6:	d119      	bne.n	8006efc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f06f 0210 	mvn.w	r2, #16
 8006ed0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2220      	movs	r2, #32
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e029      	b.n	8006f50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006efc:	f7fd fe44 	bl	8004b88 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d302      	bcc.n	8006f12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d116      	bne.n	8006f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2c:	f043 0220 	orr.w	r2, r3, #32
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e007      	b.n	8006f50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	695b      	ldr	r3, [r3, #20]
 8006f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f4a:	2b40      	cmp	r3, #64	; 0x40
 8006f4c:	d1b5      	bne.n	8006eba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f6e:	d11b      	bne.n	8006fa8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2220      	movs	r2, #32
 8006f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f94:	f043 0204 	orr.w	r2, r3, #4
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e000      	b.n	8006faa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
	...

08006fb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e267      	b.n	800749a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d075      	beq.n	80070c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006fd6:	4b88      	ldr	r3, [pc, #544]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f003 030c 	and.w	r3, r3, #12
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d00c      	beq.n	8006ffc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fe2:	4b85      	ldr	r3, [pc, #532]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006fea:	2b08      	cmp	r3, #8
 8006fec:	d112      	bne.n	8007014 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fee:	4b82      	ldr	r3, [pc, #520]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ffa:	d10b      	bne.n	8007014 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ffc:	4b7e      	ldr	r3, [pc, #504]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d05b      	beq.n	80070c0 <HAL_RCC_OscConfig+0x108>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d157      	bne.n	80070c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e242      	b.n	800749a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800701c:	d106      	bne.n	800702c <HAL_RCC_OscConfig+0x74>
 800701e:	4b76      	ldr	r3, [pc, #472]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a75      	ldr	r2, [pc, #468]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 8007024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	e01d      	b.n	8007068 <HAL_RCC_OscConfig+0xb0>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007034:	d10c      	bne.n	8007050 <HAL_RCC_OscConfig+0x98>
 8007036:	4b70      	ldr	r3, [pc, #448]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a6f      	ldr	r2, [pc, #444]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 800703c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	4b6d      	ldr	r3, [pc, #436]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a6c      	ldr	r2, [pc, #432]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 8007048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800704c:	6013      	str	r3, [r2, #0]
 800704e:	e00b      	b.n	8007068 <HAL_RCC_OscConfig+0xb0>
 8007050:	4b69      	ldr	r3, [pc, #420]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a68      	ldr	r2, [pc, #416]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 8007056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	4b66      	ldr	r3, [pc, #408]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a65      	ldr	r2, [pc, #404]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 8007062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d013      	beq.n	8007098 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007070:	f7fd fd8a 	bl	8004b88 <HAL_GetTick>
 8007074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007076:	e008      	b.n	800708a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007078:	f7fd fd86 	bl	8004b88 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	2b64      	cmp	r3, #100	; 0x64
 8007084:	d901      	bls.n	800708a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e207      	b.n	800749a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800708a:	4b5b      	ldr	r3, [pc, #364]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0f0      	beq.n	8007078 <HAL_RCC_OscConfig+0xc0>
 8007096:	e014      	b.n	80070c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007098:	f7fd fd76 	bl	8004b88 <HAL_GetTick>
 800709c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800709e:	e008      	b.n	80070b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070a0:	f7fd fd72 	bl	8004b88 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	2b64      	cmp	r3, #100	; 0x64
 80070ac:	d901      	bls.n	80070b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e1f3      	b.n	800749a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070b2:	4b51      	ldr	r3, [pc, #324]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1f0      	bne.n	80070a0 <HAL_RCC_OscConfig+0xe8>
 80070be:	e000      	b.n	80070c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d063      	beq.n	8007196 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070ce:	4b4a      	ldr	r3, [pc, #296]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f003 030c 	and.w	r3, r3, #12
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00b      	beq.n	80070f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070da:	4b47      	ldr	r3, [pc, #284]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070e2:	2b08      	cmp	r3, #8
 80070e4:	d11c      	bne.n	8007120 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070e6:	4b44      	ldr	r3, [pc, #272]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d116      	bne.n	8007120 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070f2:	4b41      	ldr	r3, [pc, #260]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d005      	beq.n	800710a <HAL_RCC_OscConfig+0x152>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d001      	beq.n	800710a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e1c7      	b.n	800749a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800710a:	4b3b      	ldr	r3, [pc, #236]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	4937      	ldr	r1, [pc, #220]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 800711a:	4313      	orrs	r3, r2
 800711c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800711e:	e03a      	b.n	8007196 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d020      	beq.n	800716a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007128:	4b34      	ldr	r3, [pc, #208]	; (80071fc <HAL_RCC_OscConfig+0x244>)
 800712a:	2201      	movs	r2, #1
 800712c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800712e:	f7fd fd2b 	bl	8004b88 <HAL_GetTick>
 8007132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007134:	e008      	b.n	8007148 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007136:	f7fd fd27 	bl	8004b88 <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	2b02      	cmp	r3, #2
 8007142:	d901      	bls.n	8007148 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e1a8      	b.n	800749a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007148:	4b2b      	ldr	r3, [pc, #172]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0f0      	beq.n	8007136 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007154:	4b28      	ldr	r3, [pc, #160]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	00db      	lsls	r3, r3, #3
 8007162:	4925      	ldr	r1, [pc, #148]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 8007164:	4313      	orrs	r3, r2
 8007166:	600b      	str	r3, [r1, #0]
 8007168:	e015      	b.n	8007196 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800716a:	4b24      	ldr	r3, [pc, #144]	; (80071fc <HAL_RCC_OscConfig+0x244>)
 800716c:	2200      	movs	r2, #0
 800716e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007170:	f7fd fd0a 	bl	8004b88 <HAL_GetTick>
 8007174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007176:	e008      	b.n	800718a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007178:	f7fd fd06 	bl	8004b88 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	2b02      	cmp	r3, #2
 8007184:	d901      	bls.n	800718a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e187      	b.n	800749a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800718a:	4b1b      	ldr	r3, [pc, #108]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1f0      	bne.n	8007178 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0308 	and.w	r3, r3, #8
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d036      	beq.n	8007210 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d016      	beq.n	80071d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071aa:	4b15      	ldr	r3, [pc, #84]	; (8007200 <HAL_RCC_OscConfig+0x248>)
 80071ac:	2201      	movs	r2, #1
 80071ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071b0:	f7fd fcea 	bl	8004b88 <HAL_GetTick>
 80071b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071b6:	e008      	b.n	80071ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071b8:	f7fd fce6 	bl	8004b88 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e167      	b.n	800749a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071ca:	4b0b      	ldr	r3, [pc, #44]	; (80071f8 <HAL_RCC_OscConfig+0x240>)
 80071cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d0f0      	beq.n	80071b8 <HAL_RCC_OscConfig+0x200>
 80071d6:	e01b      	b.n	8007210 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071d8:	4b09      	ldr	r3, [pc, #36]	; (8007200 <HAL_RCC_OscConfig+0x248>)
 80071da:	2200      	movs	r2, #0
 80071dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071de:	f7fd fcd3 	bl	8004b88 <HAL_GetTick>
 80071e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071e4:	e00e      	b.n	8007204 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071e6:	f7fd fccf 	bl	8004b88 <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d907      	bls.n	8007204 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e150      	b.n	800749a <HAL_RCC_OscConfig+0x4e2>
 80071f8:	40023800 	.word	0x40023800
 80071fc:	42470000 	.word	0x42470000
 8007200:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007204:	4b88      	ldr	r3, [pc, #544]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 8007206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007208:	f003 0302 	and.w	r3, r3, #2
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1ea      	bne.n	80071e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 8097 	beq.w	800734c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800721e:	2300      	movs	r3, #0
 8007220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007222:	4b81      	ldr	r3, [pc, #516]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 8007224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10f      	bne.n	800724e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800722e:	2300      	movs	r3, #0
 8007230:	60bb      	str	r3, [r7, #8]
 8007232:	4b7d      	ldr	r3, [pc, #500]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 8007234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007236:	4a7c      	ldr	r2, [pc, #496]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 8007238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800723c:	6413      	str	r3, [r2, #64]	; 0x40
 800723e:	4b7a      	ldr	r3, [pc, #488]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 8007240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007246:	60bb      	str	r3, [r7, #8]
 8007248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800724a:	2301      	movs	r3, #1
 800724c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800724e:	4b77      	ldr	r3, [pc, #476]	; (800742c <HAL_RCC_OscConfig+0x474>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007256:	2b00      	cmp	r3, #0
 8007258:	d118      	bne.n	800728c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800725a:	4b74      	ldr	r3, [pc, #464]	; (800742c <HAL_RCC_OscConfig+0x474>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a73      	ldr	r2, [pc, #460]	; (800742c <HAL_RCC_OscConfig+0x474>)
 8007260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007266:	f7fd fc8f 	bl	8004b88 <HAL_GetTick>
 800726a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800726c:	e008      	b.n	8007280 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800726e:	f7fd fc8b 	bl	8004b88 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	2b02      	cmp	r3, #2
 800727a:	d901      	bls.n	8007280 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e10c      	b.n	800749a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007280:	4b6a      	ldr	r3, [pc, #424]	; (800742c <HAL_RCC_OscConfig+0x474>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0f0      	beq.n	800726e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d106      	bne.n	80072a2 <HAL_RCC_OscConfig+0x2ea>
 8007294:	4b64      	ldr	r3, [pc, #400]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 8007296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007298:	4a63      	ldr	r2, [pc, #396]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 800729a:	f043 0301 	orr.w	r3, r3, #1
 800729e:	6713      	str	r3, [r2, #112]	; 0x70
 80072a0:	e01c      	b.n	80072dc <HAL_RCC_OscConfig+0x324>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	2b05      	cmp	r3, #5
 80072a8:	d10c      	bne.n	80072c4 <HAL_RCC_OscConfig+0x30c>
 80072aa:	4b5f      	ldr	r3, [pc, #380]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 80072ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ae:	4a5e      	ldr	r2, [pc, #376]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 80072b0:	f043 0304 	orr.w	r3, r3, #4
 80072b4:	6713      	str	r3, [r2, #112]	; 0x70
 80072b6:	4b5c      	ldr	r3, [pc, #368]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 80072b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ba:	4a5b      	ldr	r2, [pc, #364]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 80072bc:	f043 0301 	orr.w	r3, r3, #1
 80072c0:	6713      	str	r3, [r2, #112]	; 0x70
 80072c2:	e00b      	b.n	80072dc <HAL_RCC_OscConfig+0x324>
 80072c4:	4b58      	ldr	r3, [pc, #352]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 80072c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c8:	4a57      	ldr	r2, [pc, #348]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 80072ca:	f023 0301 	bic.w	r3, r3, #1
 80072ce:	6713      	str	r3, [r2, #112]	; 0x70
 80072d0:	4b55      	ldr	r3, [pc, #340]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 80072d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d4:	4a54      	ldr	r2, [pc, #336]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 80072d6:	f023 0304 	bic.w	r3, r3, #4
 80072da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d015      	beq.n	8007310 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072e4:	f7fd fc50 	bl	8004b88 <HAL_GetTick>
 80072e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072ea:	e00a      	b.n	8007302 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072ec:	f7fd fc4c 	bl	8004b88 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d901      	bls.n	8007302 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e0cb      	b.n	800749a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007302:	4b49      	ldr	r3, [pc, #292]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 8007304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d0ee      	beq.n	80072ec <HAL_RCC_OscConfig+0x334>
 800730e:	e014      	b.n	800733a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007310:	f7fd fc3a 	bl	8004b88 <HAL_GetTick>
 8007314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007316:	e00a      	b.n	800732e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007318:	f7fd fc36 	bl	8004b88 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	f241 3288 	movw	r2, #5000	; 0x1388
 8007326:	4293      	cmp	r3, r2
 8007328:	d901      	bls.n	800732e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e0b5      	b.n	800749a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800732e:	4b3e      	ldr	r3, [pc, #248]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 8007330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1ee      	bne.n	8007318 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800733a:	7dfb      	ldrb	r3, [r7, #23]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d105      	bne.n	800734c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007340:	4b39      	ldr	r3, [pc, #228]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 8007342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007344:	4a38      	ldr	r2, [pc, #224]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 8007346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800734a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 80a1 	beq.w	8007498 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007356:	4b34      	ldr	r3, [pc, #208]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f003 030c 	and.w	r3, r3, #12
 800735e:	2b08      	cmp	r3, #8
 8007360:	d05c      	beq.n	800741c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	2b02      	cmp	r3, #2
 8007368:	d141      	bne.n	80073ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800736a:	4b31      	ldr	r3, [pc, #196]	; (8007430 <HAL_RCC_OscConfig+0x478>)
 800736c:	2200      	movs	r2, #0
 800736e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007370:	f7fd fc0a 	bl	8004b88 <HAL_GetTick>
 8007374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007376:	e008      	b.n	800738a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007378:	f7fd fc06 	bl	8004b88 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	2b02      	cmp	r3, #2
 8007384:	d901      	bls.n	800738a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e087      	b.n	800749a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800738a:	4b27      	ldr	r3, [pc, #156]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1f0      	bne.n	8007378 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69da      	ldr	r2, [r3, #28]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	431a      	orrs	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	019b      	lsls	r3, r3, #6
 80073a6:	431a      	orrs	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ac:	085b      	lsrs	r3, r3, #1
 80073ae:	3b01      	subs	r3, #1
 80073b0:	041b      	lsls	r3, r3, #16
 80073b2:	431a      	orrs	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b8:	061b      	lsls	r3, r3, #24
 80073ba:	491b      	ldr	r1, [pc, #108]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073c0:	4b1b      	ldr	r3, [pc, #108]	; (8007430 <HAL_RCC_OscConfig+0x478>)
 80073c2:	2201      	movs	r2, #1
 80073c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073c6:	f7fd fbdf 	bl	8004b88 <HAL_GetTick>
 80073ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073cc:	e008      	b.n	80073e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073ce:	f7fd fbdb 	bl	8004b88 <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d901      	bls.n	80073e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e05c      	b.n	800749a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073e0:	4b11      	ldr	r3, [pc, #68]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d0f0      	beq.n	80073ce <HAL_RCC_OscConfig+0x416>
 80073ec:	e054      	b.n	8007498 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073ee:	4b10      	ldr	r3, [pc, #64]	; (8007430 <HAL_RCC_OscConfig+0x478>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073f4:	f7fd fbc8 	bl	8004b88 <HAL_GetTick>
 80073f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073fa:	e008      	b.n	800740e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073fc:	f7fd fbc4 	bl	8004b88 <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	2b02      	cmp	r3, #2
 8007408:	d901      	bls.n	800740e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e045      	b.n	800749a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800740e:	4b06      	ldr	r3, [pc, #24]	; (8007428 <HAL_RCC_OscConfig+0x470>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1f0      	bne.n	80073fc <HAL_RCC_OscConfig+0x444>
 800741a:	e03d      	b.n	8007498 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d107      	bne.n	8007434 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e038      	b.n	800749a <HAL_RCC_OscConfig+0x4e2>
 8007428:	40023800 	.word	0x40023800
 800742c:	40007000 	.word	0x40007000
 8007430:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007434:	4b1b      	ldr	r3, [pc, #108]	; (80074a4 <HAL_RCC_OscConfig+0x4ec>)
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d028      	beq.n	8007494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800744c:	429a      	cmp	r2, r3
 800744e:	d121      	bne.n	8007494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800745a:	429a      	cmp	r2, r3
 800745c:	d11a      	bne.n	8007494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007464:	4013      	ands	r3, r2
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800746a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800746c:	4293      	cmp	r3, r2
 800746e:	d111      	bne.n	8007494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747a:	085b      	lsrs	r3, r3, #1
 800747c:	3b01      	subs	r3, #1
 800747e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007480:	429a      	cmp	r2, r3
 8007482:	d107      	bne.n	8007494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007490:	429a      	cmp	r2, r3
 8007492:	d001      	beq.n	8007498 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e000      	b.n	800749a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	40023800 	.word	0x40023800

080074a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e0cc      	b.n	8007656 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074bc:	4b68      	ldr	r3, [pc, #416]	; (8007660 <HAL_RCC_ClockConfig+0x1b8>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0307 	and.w	r3, r3, #7
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d90c      	bls.n	80074e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074ca:	4b65      	ldr	r3, [pc, #404]	; (8007660 <HAL_RCC_ClockConfig+0x1b8>)
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	b2d2      	uxtb	r2, r2
 80074d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074d2:	4b63      	ldr	r3, [pc, #396]	; (8007660 <HAL_RCC_ClockConfig+0x1b8>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d001      	beq.n	80074e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e0b8      	b.n	8007656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d020      	beq.n	8007532 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0304 	and.w	r3, r3, #4
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d005      	beq.n	8007508 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074fc:	4b59      	ldr	r3, [pc, #356]	; (8007664 <HAL_RCC_ClockConfig+0x1bc>)
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	4a58      	ldr	r2, [pc, #352]	; (8007664 <HAL_RCC_ClockConfig+0x1bc>)
 8007502:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007506:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0308 	and.w	r3, r3, #8
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007514:	4b53      	ldr	r3, [pc, #332]	; (8007664 <HAL_RCC_ClockConfig+0x1bc>)
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	4a52      	ldr	r2, [pc, #328]	; (8007664 <HAL_RCC_ClockConfig+0x1bc>)
 800751a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800751e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007520:	4b50      	ldr	r3, [pc, #320]	; (8007664 <HAL_RCC_ClockConfig+0x1bc>)
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	494d      	ldr	r1, [pc, #308]	; (8007664 <HAL_RCC_ClockConfig+0x1bc>)
 800752e:	4313      	orrs	r3, r2
 8007530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	d044      	beq.n	80075c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d107      	bne.n	8007556 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007546:	4b47      	ldr	r3, [pc, #284]	; (8007664 <HAL_RCC_ClockConfig+0x1bc>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d119      	bne.n	8007586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e07f      	b.n	8007656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	2b02      	cmp	r3, #2
 800755c:	d003      	beq.n	8007566 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007562:	2b03      	cmp	r3, #3
 8007564:	d107      	bne.n	8007576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007566:	4b3f      	ldr	r3, [pc, #252]	; (8007664 <HAL_RCC_ClockConfig+0x1bc>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d109      	bne.n	8007586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e06f      	b.n	8007656 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007576:	4b3b      	ldr	r3, [pc, #236]	; (8007664 <HAL_RCC_ClockConfig+0x1bc>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0302 	and.w	r3, r3, #2
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e067      	b.n	8007656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007586:	4b37      	ldr	r3, [pc, #220]	; (8007664 <HAL_RCC_ClockConfig+0x1bc>)
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f023 0203 	bic.w	r2, r3, #3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	4934      	ldr	r1, [pc, #208]	; (8007664 <HAL_RCC_ClockConfig+0x1bc>)
 8007594:	4313      	orrs	r3, r2
 8007596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007598:	f7fd faf6 	bl	8004b88 <HAL_GetTick>
 800759c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800759e:	e00a      	b.n	80075b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075a0:	f7fd faf2 	bl	8004b88 <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d901      	bls.n	80075b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e04f      	b.n	8007656 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075b6:	4b2b      	ldr	r3, [pc, #172]	; (8007664 <HAL_RCC_ClockConfig+0x1bc>)
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f003 020c 	and.w	r2, r3, #12
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d1eb      	bne.n	80075a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075c8:	4b25      	ldr	r3, [pc, #148]	; (8007660 <HAL_RCC_ClockConfig+0x1b8>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0307 	and.w	r3, r3, #7
 80075d0:	683a      	ldr	r2, [r7, #0]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d20c      	bcs.n	80075f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075d6:	4b22      	ldr	r3, [pc, #136]	; (8007660 <HAL_RCC_ClockConfig+0x1b8>)
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	b2d2      	uxtb	r2, r2
 80075dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075de:	4b20      	ldr	r3, [pc, #128]	; (8007660 <HAL_RCC_ClockConfig+0x1b8>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0307 	and.w	r3, r3, #7
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d001      	beq.n	80075f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e032      	b.n	8007656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d008      	beq.n	800760e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075fc:	4b19      	ldr	r3, [pc, #100]	; (8007664 <HAL_RCC_ClockConfig+0x1bc>)
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	4916      	ldr	r1, [pc, #88]	; (8007664 <HAL_RCC_ClockConfig+0x1bc>)
 800760a:	4313      	orrs	r3, r2
 800760c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0308 	and.w	r3, r3, #8
 8007616:	2b00      	cmp	r3, #0
 8007618:	d009      	beq.n	800762e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800761a:	4b12      	ldr	r3, [pc, #72]	; (8007664 <HAL_RCC_ClockConfig+0x1bc>)
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	00db      	lsls	r3, r3, #3
 8007628:	490e      	ldr	r1, [pc, #56]	; (8007664 <HAL_RCC_ClockConfig+0x1bc>)
 800762a:	4313      	orrs	r3, r2
 800762c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800762e:	f000 f821 	bl	8007674 <HAL_RCC_GetSysClockFreq>
 8007632:	4602      	mov	r2, r0
 8007634:	4b0b      	ldr	r3, [pc, #44]	; (8007664 <HAL_RCC_ClockConfig+0x1bc>)
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	091b      	lsrs	r3, r3, #4
 800763a:	f003 030f 	and.w	r3, r3, #15
 800763e:	490a      	ldr	r1, [pc, #40]	; (8007668 <HAL_RCC_ClockConfig+0x1c0>)
 8007640:	5ccb      	ldrb	r3, [r1, r3]
 8007642:	fa22 f303 	lsr.w	r3, r2, r3
 8007646:	4a09      	ldr	r2, [pc, #36]	; (800766c <HAL_RCC_ClockConfig+0x1c4>)
 8007648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800764a:	4b09      	ldr	r3, [pc, #36]	; (8007670 <HAL_RCC_ClockConfig+0x1c8>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4618      	mov	r0, r3
 8007650:	f7fd f890 	bl	8004774 <HAL_InitTick>

  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	40023c00 	.word	0x40023c00
 8007664:	40023800 	.word	0x40023800
 8007668:	08011394 	.word	0x08011394
 800766c:	20000004 	.word	0x20000004
 8007670:	20000008 	.word	0x20000008

08007674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007678:	b090      	sub	sp, #64	; 0x40
 800767a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800767c:	2300      	movs	r3, #0
 800767e:	637b      	str	r3, [r7, #52]	; 0x34
 8007680:	2300      	movs	r3, #0
 8007682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007684:	2300      	movs	r3, #0
 8007686:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007688:	2300      	movs	r3, #0
 800768a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800768c:	4b59      	ldr	r3, [pc, #356]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f003 030c 	and.w	r3, r3, #12
 8007694:	2b08      	cmp	r3, #8
 8007696:	d00d      	beq.n	80076b4 <HAL_RCC_GetSysClockFreq+0x40>
 8007698:	2b08      	cmp	r3, #8
 800769a:	f200 80a1 	bhi.w	80077e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <HAL_RCC_GetSysClockFreq+0x34>
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	d003      	beq.n	80076ae <HAL_RCC_GetSysClockFreq+0x3a>
 80076a6:	e09b      	b.n	80077e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076a8:	4b53      	ldr	r3, [pc, #332]	; (80077f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80076aa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80076ac:	e09b      	b.n	80077e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076ae:	4b53      	ldr	r3, [pc, #332]	; (80077fc <HAL_RCC_GetSysClockFreq+0x188>)
 80076b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80076b2:	e098      	b.n	80077e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076b4:	4b4f      	ldr	r3, [pc, #316]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076be:	4b4d      	ldr	r3, [pc, #308]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d028      	beq.n	800771c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076ca:	4b4a      	ldr	r3, [pc, #296]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	099b      	lsrs	r3, r3, #6
 80076d0:	2200      	movs	r2, #0
 80076d2:	623b      	str	r3, [r7, #32]
 80076d4:	627a      	str	r2, [r7, #36]	; 0x24
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80076dc:	2100      	movs	r1, #0
 80076de:	4b47      	ldr	r3, [pc, #284]	; (80077fc <HAL_RCC_GetSysClockFreq+0x188>)
 80076e0:	fb03 f201 	mul.w	r2, r3, r1
 80076e4:	2300      	movs	r3, #0
 80076e6:	fb00 f303 	mul.w	r3, r0, r3
 80076ea:	4413      	add	r3, r2
 80076ec:	4a43      	ldr	r2, [pc, #268]	; (80077fc <HAL_RCC_GetSysClockFreq+0x188>)
 80076ee:	fba0 1202 	umull	r1, r2, r0, r2
 80076f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076f4:	460a      	mov	r2, r1
 80076f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80076f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076fa:	4413      	add	r3, r2
 80076fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007700:	2200      	movs	r2, #0
 8007702:	61bb      	str	r3, [r7, #24]
 8007704:	61fa      	str	r2, [r7, #28]
 8007706:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800770a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800770e:	f7f9 fb13 	bl	8000d38 <__aeabi_uldivmod>
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	4613      	mov	r3, r2
 8007718:	63fb      	str	r3, [r7, #60]	; 0x3c
 800771a:	e053      	b.n	80077c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800771c:	4b35      	ldr	r3, [pc, #212]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	099b      	lsrs	r3, r3, #6
 8007722:	2200      	movs	r2, #0
 8007724:	613b      	str	r3, [r7, #16]
 8007726:	617a      	str	r2, [r7, #20]
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800772e:	f04f 0b00 	mov.w	fp, #0
 8007732:	4652      	mov	r2, sl
 8007734:	465b      	mov	r3, fp
 8007736:	f04f 0000 	mov.w	r0, #0
 800773a:	f04f 0100 	mov.w	r1, #0
 800773e:	0159      	lsls	r1, r3, #5
 8007740:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007744:	0150      	lsls	r0, r2, #5
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	ebb2 080a 	subs.w	r8, r2, sl
 800774e:	eb63 090b 	sbc.w	r9, r3, fp
 8007752:	f04f 0200 	mov.w	r2, #0
 8007756:	f04f 0300 	mov.w	r3, #0
 800775a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800775e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007762:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007766:	ebb2 0408 	subs.w	r4, r2, r8
 800776a:	eb63 0509 	sbc.w	r5, r3, r9
 800776e:	f04f 0200 	mov.w	r2, #0
 8007772:	f04f 0300 	mov.w	r3, #0
 8007776:	00eb      	lsls	r3, r5, #3
 8007778:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800777c:	00e2      	lsls	r2, r4, #3
 800777e:	4614      	mov	r4, r2
 8007780:	461d      	mov	r5, r3
 8007782:	eb14 030a 	adds.w	r3, r4, sl
 8007786:	603b      	str	r3, [r7, #0]
 8007788:	eb45 030b 	adc.w	r3, r5, fp
 800778c:	607b      	str	r3, [r7, #4]
 800778e:	f04f 0200 	mov.w	r2, #0
 8007792:	f04f 0300 	mov.w	r3, #0
 8007796:	e9d7 4500 	ldrd	r4, r5, [r7]
 800779a:	4629      	mov	r1, r5
 800779c:	028b      	lsls	r3, r1, #10
 800779e:	4621      	mov	r1, r4
 80077a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80077a4:	4621      	mov	r1, r4
 80077a6:	028a      	lsls	r2, r1, #10
 80077a8:	4610      	mov	r0, r2
 80077aa:	4619      	mov	r1, r3
 80077ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ae:	2200      	movs	r2, #0
 80077b0:	60bb      	str	r3, [r7, #8]
 80077b2:	60fa      	str	r2, [r7, #12]
 80077b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077b8:	f7f9 fabe 	bl	8000d38 <__aeabi_uldivmod>
 80077bc:	4602      	mov	r2, r0
 80077be:	460b      	mov	r3, r1
 80077c0:	4613      	mov	r3, r2
 80077c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80077c4:	4b0b      	ldr	r3, [pc, #44]	; (80077f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	0c1b      	lsrs	r3, r3, #16
 80077ca:	f003 0303 	and.w	r3, r3, #3
 80077ce:	3301      	adds	r3, #1
 80077d0:	005b      	lsls	r3, r3, #1
 80077d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80077d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80077de:	e002      	b.n	80077e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80077e0:	4b05      	ldr	r3, [pc, #20]	; (80077f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80077e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80077e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80077e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3740      	adds	r7, #64	; 0x40
 80077ec:	46bd      	mov	sp, r7
 80077ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077f2:	bf00      	nop
 80077f4:	40023800 	.word	0x40023800
 80077f8:	00f42400 	.word	0x00f42400
 80077fc:	017d7840 	.word	0x017d7840

08007800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007800:	b480      	push	{r7}
 8007802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007804:	4b03      	ldr	r3, [pc, #12]	; (8007814 <HAL_RCC_GetHCLKFreq+0x14>)
 8007806:	681b      	ldr	r3, [r3, #0]
}
 8007808:	4618      	mov	r0, r3
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	20000004 	.word	0x20000004

08007818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800781c:	f7ff fff0 	bl	8007800 <HAL_RCC_GetHCLKFreq>
 8007820:	4602      	mov	r2, r0
 8007822:	4b05      	ldr	r3, [pc, #20]	; (8007838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	0a9b      	lsrs	r3, r3, #10
 8007828:	f003 0307 	and.w	r3, r3, #7
 800782c:	4903      	ldr	r1, [pc, #12]	; (800783c <HAL_RCC_GetPCLK1Freq+0x24>)
 800782e:	5ccb      	ldrb	r3, [r1, r3]
 8007830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007834:	4618      	mov	r0, r3
 8007836:	bd80      	pop	{r7, pc}
 8007838:	40023800 	.word	0x40023800
 800783c:	080113a4 	.word	0x080113a4

08007840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007844:	f7ff ffdc 	bl	8007800 <HAL_RCC_GetHCLKFreq>
 8007848:	4602      	mov	r2, r0
 800784a:	4b05      	ldr	r3, [pc, #20]	; (8007860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	0b5b      	lsrs	r3, r3, #13
 8007850:	f003 0307 	and.w	r3, r3, #7
 8007854:	4903      	ldr	r1, [pc, #12]	; (8007864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007856:	5ccb      	ldrb	r3, [r1, r3]
 8007858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800785c:	4618      	mov	r0, r3
 800785e:	bd80      	pop	{r7, pc}
 8007860:	40023800 	.word	0x40023800
 8007864:	080113a4 	.word	0x080113a4

08007868 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	220f      	movs	r2, #15
 8007876:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007878:	4b12      	ldr	r3, [pc, #72]	; (80078c4 <HAL_RCC_GetClockConfig+0x5c>)
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f003 0203 	and.w	r2, r3, #3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007884:	4b0f      	ldr	r3, [pc, #60]	; (80078c4 <HAL_RCC_GetClockConfig+0x5c>)
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007890:	4b0c      	ldr	r3, [pc, #48]	; (80078c4 <HAL_RCC_GetClockConfig+0x5c>)
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800789c:	4b09      	ldr	r3, [pc, #36]	; (80078c4 <HAL_RCC_GetClockConfig+0x5c>)
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	08db      	lsrs	r3, r3, #3
 80078a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80078aa:	4b07      	ldr	r3, [pc, #28]	; (80078c8 <HAL_RCC_GetClockConfig+0x60>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0207 	and.w	r2, r3, #7
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	601a      	str	r2, [r3, #0]
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	40023800 	.word	0x40023800
 80078c8:	40023c00 	.word	0x40023c00

080078cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e07b      	b.n	80079d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d108      	bne.n	80078f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078ee:	d009      	beq.n	8007904 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	61da      	str	r2, [r3, #28]
 80078f6:	e005      	b.n	8007904 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d106      	bne.n	8007924 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7fc fe20 	bl	8004564 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2202      	movs	r2, #2
 8007928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800793a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800794c:	431a      	orrs	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007956:	431a      	orrs	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	f003 0302 	and.w	r3, r3, #2
 8007960:	431a      	orrs	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	f003 0301 	and.w	r3, r3, #1
 800796a:	431a      	orrs	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007974:	431a      	orrs	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800797e:	431a      	orrs	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a1b      	ldr	r3, [r3, #32]
 8007984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007988:	ea42 0103 	orr.w	r1, r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007990:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	430a      	orrs	r2, r1
 800799a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	0c1b      	lsrs	r3, r3, #16
 80079a2:	f003 0104 	and.w	r1, r3, #4
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079aa:	f003 0210 	and.w	r2, r3, #16
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	69da      	ldr	r2, [r3, #28]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b088      	sub	sp, #32
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	60b9      	str	r1, [r7, #8]
 80079e8:	603b      	str	r3, [r7, #0]
 80079ea:	4613      	mov	r3, r2
 80079ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d101      	bne.n	8007a00 <HAL_SPI_Transmit+0x22>
 80079fc:	2302      	movs	r3, #2
 80079fe:	e126      	b.n	8007c4e <HAL_SPI_Transmit+0x270>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a08:	f7fd f8be 	bl	8004b88 <HAL_GetTick>
 8007a0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007a0e:	88fb      	ldrh	r3, [r7, #6]
 8007a10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d002      	beq.n	8007a24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007a1e:	2302      	movs	r3, #2
 8007a20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a22:	e10b      	b.n	8007c3c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d002      	beq.n	8007a30 <HAL_SPI_Transmit+0x52>
 8007a2a:	88fb      	ldrh	r3, [r7, #6]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d102      	bne.n	8007a36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007a34:	e102      	b.n	8007c3c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2203      	movs	r2, #3
 8007a3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	88fa      	ldrh	r2, [r7, #6]
 8007a4e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	88fa      	ldrh	r2, [r7, #6]
 8007a54:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a7c:	d10f      	bne.n	8007a9e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa8:	2b40      	cmp	r3, #64	; 0x40
 8007aaa:	d007      	beq.n	8007abc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ac4:	d14b      	bne.n	8007b5e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <HAL_SPI_Transmit+0xf6>
 8007ace:	8afb      	ldrh	r3, [r7, #22]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d13e      	bne.n	8007b52 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad8:	881a      	ldrh	r2, [r3, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae4:	1c9a      	adds	r2, r3, #2
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	3b01      	subs	r3, #1
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007af8:	e02b      	b.n	8007b52 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d112      	bne.n	8007b2e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0c:	881a      	ldrh	r2, [r3, #0]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b18:	1c9a      	adds	r2, r3, #2
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8007b2c:	e011      	b.n	8007b52 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b2e:	f7fd f82b 	bl	8004b88 <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	683a      	ldr	r2, [r7, #0]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d803      	bhi.n	8007b46 <HAL_SPI_Transmit+0x168>
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b44:	d102      	bne.n	8007b4c <HAL_SPI_Transmit+0x16e>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d102      	bne.n	8007b52 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007b50:	e074      	b.n	8007c3c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1ce      	bne.n	8007afa <HAL_SPI_Transmit+0x11c>
 8007b5c:	e04c      	b.n	8007bf8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d002      	beq.n	8007b6c <HAL_SPI_Transmit+0x18e>
 8007b66:	8afb      	ldrh	r3, [r7, #22]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d140      	bne.n	8007bee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	330c      	adds	r3, #12
 8007b76:	7812      	ldrb	r2, [r2, #0]
 8007b78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7e:	1c5a      	adds	r2, r3, #1
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007b92:	e02c      	b.n	8007bee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d113      	bne.n	8007bca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	330c      	adds	r3, #12
 8007bac:	7812      	ldrb	r2, [r2, #0]
 8007bae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb4:	1c5a      	adds	r2, r3, #1
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	86da      	strh	r2, [r3, #54]	; 0x36
 8007bc8:	e011      	b.n	8007bee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bca:	f7fc ffdd 	bl	8004b88 <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d803      	bhi.n	8007be2 <HAL_SPI_Transmit+0x204>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be0:	d102      	bne.n	8007be8 <HAL_SPI_Transmit+0x20a>
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d102      	bne.n	8007bee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007bec:	e026      	b.n	8007c3c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1cd      	bne.n	8007b94 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bf8:	69ba      	ldr	r2, [r7, #24]
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 fa55 	bl	80080ac <SPI_EndRxTxTransaction>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d002      	beq.n	8007c0e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10a      	bne.n	8007c2c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c16:	2300      	movs	r3, #0
 8007c18:	613b      	str	r3, [r7, #16]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	613b      	str	r3, [r7, #16]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	613b      	str	r3, [r7, #16]
 8007c2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	77fb      	strb	r3, [r7, #31]
 8007c38:	e000      	b.n	8007c3c <HAL_SPI_Transmit+0x25e>
  }

error:
 8007c3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3720      	adds	r7, #32
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b08c      	sub	sp, #48	; 0x30
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	60f8      	str	r0, [r7, #12]
 8007c5e:	60b9      	str	r1, [r7, #8]
 8007c60:	607a      	str	r2, [r7, #4]
 8007c62:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c64:	2301      	movs	r3, #1
 8007c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d101      	bne.n	8007c7c <HAL_SPI_TransmitReceive+0x26>
 8007c78:	2302      	movs	r3, #2
 8007c7a:	e18a      	b.n	8007f92 <HAL_SPI_TransmitReceive+0x33c>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c84:	f7fc ff80 	bl	8004b88 <HAL_GetTick>
 8007c88:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007c9a:	887b      	ldrh	r3, [r7, #2]
 8007c9c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d00f      	beq.n	8007cc6 <HAL_SPI_TransmitReceive+0x70>
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cac:	d107      	bne.n	8007cbe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d103      	bne.n	8007cbe <HAL_SPI_TransmitReceive+0x68>
 8007cb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cba:	2b04      	cmp	r3, #4
 8007cbc:	d003      	beq.n	8007cc6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007cc4:	e15b      	b.n	8007f7e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d005      	beq.n	8007cd8 <HAL_SPI_TransmitReceive+0x82>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <HAL_SPI_TransmitReceive+0x82>
 8007cd2:	887b      	ldrh	r3, [r7, #2]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d103      	bne.n	8007ce0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007cde:	e14e      	b.n	8007f7e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b04      	cmp	r3, #4
 8007cea:	d003      	beq.n	8007cf4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2205      	movs	r2, #5
 8007cf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	887a      	ldrh	r2, [r7, #2]
 8007d04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	887a      	ldrh	r2, [r7, #2]
 8007d0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	887a      	ldrh	r2, [r7, #2]
 8007d16:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	887a      	ldrh	r2, [r7, #2]
 8007d1c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d34:	2b40      	cmp	r3, #64	; 0x40
 8007d36:	d007      	beq.n	8007d48 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d50:	d178      	bne.n	8007e44 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d002      	beq.n	8007d60 <HAL_SPI_TransmitReceive+0x10a>
 8007d5a:	8b7b      	ldrh	r3, [r7, #26]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d166      	bne.n	8007e2e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d64:	881a      	ldrh	r2, [r3, #0]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d70:	1c9a      	adds	r2, r3, #2
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d84:	e053      	b.n	8007e2e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	f003 0302 	and.w	r3, r3, #2
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d11b      	bne.n	8007dcc <HAL_SPI_TransmitReceive+0x176>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d016      	beq.n	8007dcc <HAL_SPI_TransmitReceive+0x176>
 8007d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d113      	bne.n	8007dcc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da8:	881a      	ldrh	r2, [r3, #0]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db4:	1c9a      	adds	r2, r3, #2
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d119      	bne.n	8007e0e <HAL_SPI_TransmitReceive+0x1b8>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d014      	beq.n	8007e0e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68da      	ldr	r2, [r3, #12]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dee:	b292      	uxth	r2, r2
 8007df0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df6:	1c9a      	adds	r2, r3, #2
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	3b01      	subs	r3, #1
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e0e:	f7fc febb 	bl	8004b88 <HAL_GetTick>
 8007e12:	4602      	mov	r2, r0
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d807      	bhi.n	8007e2e <HAL_SPI_TransmitReceive+0x1d8>
 8007e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e24:	d003      	beq.n	8007e2e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007e2c:	e0a7      	b.n	8007f7e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1a6      	bne.n	8007d86 <HAL_SPI_TransmitReceive+0x130>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1a1      	bne.n	8007d86 <HAL_SPI_TransmitReceive+0x130>
 8007e42:	e07c      	b.n	8007f3e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <HAL_SPI_TransmitReceive+0x1fc>
 8007e4c:	8b7b      	ldrh	r3, [r7, #26]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d16b      	bne.n	8007f2a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	330c      	adds	r3, #12
 8007e5c:	7812      	ldrb	r2, [r2, #0]
 8007e5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	3b01      	subs	r3, #1
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e78:	e057      	b.n	8007f2a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f003 0302 	and.w	r3, r3, #2
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d11c      	bne.n	8007ec2 <HAL_SPI_TransmitReceive+0x26c>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d017      	beq.n	8007ec2 <HAL_SPI_TransmitReceive+0x26c>
 8007e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d114      	bne.n	8007ec2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	330c      	adds	r3, #12
 8007ea2:	7812      	ldrb	r2, [r2, #0]
 8007ea4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eaa:	1c5a      	adds	r2, r3, #1
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	f003 0301 	and.w	r3, r3, #1
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d119      	bne.n	8007f04 <HAL_SPI_TransmitReceive+0x2ae>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d014      	beq.n	8007f04 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68da      	ldr	r2, [r3, #12]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee4:	b2d2      	uxtb	r2, r2
 8007ee6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eec:	1c5a      	adds	r2, r3, #1
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f00:	2301      	movs	r3, #1
 8007f02:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007f04:	f7fc fe40 	bl	8004b88 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d803      	bhi.n	8007f1c <HAL_SPI_TransmitReceive+0x2c6>
 8007f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1a:	d102      	bne.n	8007f22 <HAL_SPI_TransmitReceive+0x2cc>
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d103      	bne.n	8007f2a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007f28:	e029      	b.n	8007f7e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1a2      	bne.n	8007e7a <HAL_SPI_TransmitReceive+0x224>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d19d      	bne.n	8007e7a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f000 f8b2 	bl	80080ac <SPI_EndRxTxTransaction>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d006      	beq.n	8007f5c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2220      	movs	r2, #32
 8007f58:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007f5a:	e010      	b.n	8007f7e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10b      	bne.n	8007f7c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f64:	2300      	movs	r3, #0
 8007f66:	617b      	str	r3, [r7, #20]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	617b      	str	r3, [r7, #20]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	617b      	str	r3, [r7, #20]
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	e000      	b.n	8007f7e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007f7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007f8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3730      	adds	r7, #48	; 0x30
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
	...

08007f9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b088      	sub	sp, #32
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	603b      	str	r3, [r7, #0]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007fac:	f7fc fdec 	bl	8004b88 <HAL_GetTick>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb4:	1a9b      	subs	r3, r3, r2
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	4413      	add	r3, r2
 8007fba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007fbc:	f7fc fde4 	bl	8004b88 <HAL_GetTick>
 8007fc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007fc2:	4b39      	ldr	r3, [pc, #228]	; (80080a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	015b      	lsls	r3, r3, #5
 8007fc8:	0d1b      	lsrs	r3, r3, #20
 8007fca:	69fa      	ldr	r2, [r7, #28]
 8007fcc:	fb02 f303 	mul.w	r3, r2, r3
 8007fd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fd2:	e054      	b.n	800807e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fda:	d050      	beq.n	800807e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fdc:	f7fc fdd4 	bl	8004b88 <HAL_GetTick>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	69fa      	ldr	r2, [r7, #28]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d902      	bls.n	8007ff2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d13d      	bne.n	800806e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008000:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800800a:	d111      	bne.n	8008030 <SPI_WaitFlagStateUntilTimeout+0x94>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008014:	d004      	beq.n	8008020 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800801e:	d107      	bne.n	8008030 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800802e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008038:	d10f      	bne.n	800805a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008048:	601a      	str	r2, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008058:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e017      	b.n	800809e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d101      	bne.n	8008078 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008074:	2300      	movs	r3, #0
 8008076:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	3b01      	subs	r3, #1
 800807c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	689a      	ldr	r2, [r3, #8]
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	4013      	ands	r3, r2
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	429a      	cmp	r2, r3
 800808c:	bf0c      	ite	eq
 800808e:	2301      	moveq	r3, #1
 8008090:	2300      	movne	r3, #0
 8008092:	b2db      	uxtb	r3, r3
 8008094:	461a      	mov	r2, r3
 8008096:	79fb      	ldrb	r3, [r7, #7]
 8008098:	429a      	cmp	r2, r3
 800809a:	d19b      	bne.n	8007fd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3720      	adds	r7, #32
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	20000004 	.word	0x20000004

080080ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b088      	sub	sp, #32
 80080b0:	af02      	add	r7, sp, #8
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80080b8:	4b1b      	ldr	r3, [pc, #108]	; (8008128 <SPI_EndRxTxTransaction+0x7c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a1b      	ldr	r2, [pc, #108]	; (800812c <SPI_EndRxTxTransaction+0x80>)
 80080be:	fba2 2303 	umull	r2, r3, r2, r3
 80080c2:	0d5b      	lsrs	r3, r3, #21
 80080c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80080c8:	fb02 f303 	mul.w	r3, r2, r3
 80080cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080d6:	d112      	bne.n	80080fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	2200      	movs	r2, #0
 80080e0:	2180      	movs	r1, #128	; 0x80
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f7ff ff5a 	bl	8007f9c <SPI_WaitFlagStateUntilTimeout>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d016      	beq.n	800811c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f2:	f043 0220 	orr.w	r2, r3, #32
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e00f      	b.n	800811e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00a      	beq.n	800811a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	3b01      	subs	r3, #1
 8008108:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008114:	2b80      	cmp	r3, #128	; 0x80
 8008116:	d0f2      	beq.n	80080fe <SPI_EndRxTxTransaction+0x52>
 8008118:	e000      	b.n	800811c <SPI_EndRxTxTransaction+0x70>
        break;
 800811a:	bf00      	nop
  }

  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20000004 	.word	0x20000004
 800812c:	165e9f81 	.word	0x165e9f81

08008130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e041      	b.n	80081c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d106      	bne.n	800815c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7fc fa4c 	bl	80045f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2202      	movs	r2, #2
 8008160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	3304      	adds	r3, #4
 800816c:	4619      	mov	r1, r3
 800816e:	4610      	mov	r0, r2
 8008170:	f000 fae2 	bl	8008738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
	...

080081d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d001      	beq.n	80081e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e03c      	b.n	8008262 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2202      	movs	r2, #2
 80081ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a1e      	ldr	r2, [pc, #120]	; (8008270 <HAL_TIM_Base_Start+0xa0>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d018      	beq.n	800822c <HAL_TIM_Base_Start+0x5c>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008202:	d013      	beq.n	800822c <HAL_TIM_Base_Start+0x5c>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a1a      	ldr	r2, [pc, #104]	; (8008274 <HAL_TIM_Base_Start+0xa4>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d00e      	beq.n	800822c <HAL_TIM_Base_Start+0x5c>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a19      	ldr	r2, [pc, #100]	; (8008278 <HAL_TIM_Base_Start+0xa8>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d009      	beq.n	800822c <HAL_TIM_Base_Start+0x5c>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a17      	ldr	r2, [pc, #92]	; (800827c <HAL_TIM_Base_Start+0xac>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d004      	beq.n	800822c <HAL_TIM_Base_Start+0x5c>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a16      	ldr	r2, [pc, #88]	; (8008280 <HAL_TIM_Base_Start+0xb0>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d111      	bne.n	8008250 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f003 0307 	and.w	r3, r3, #7
 8008236:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2b06      	cmp	r3, #6
 800823c:	d010      	beq.n	8008260 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f042 0201 	orr.w	r2, r2, #1
 800824c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800824e:	e007      	b.n	8008260 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f042 0201 	orr.w	r2, r2, #1
 800825e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	40010000 	.word	0x40010000
 8008274:	40000400 	.word	0x40000400
 8008278:	40000800 	.word	0x40000800
 800827c:	40000c00 	.word	0x40000c00
 8008280:	40014000 	.word	0x40014000

08008284 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008292:	b2db      	uxtb	r3, r3
 8008294:	2b01      	cmp	r3, #1
 8008296:	d001      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e044      	b.n	8008326 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2202      	movs	r2, #2
 80082a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68da      	ldr	r2, [r3, #12]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f042 0201 	orr.w	r2, r2, #1
 80082b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a1e      	ldr	r2, [pc, #120]	; (8008334 <HAL_TIM_Base_Start_IT+0xb0>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d018      	beq.n	80082f0 <HAL_TIM_Base_Start_IT+0x6c>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082c6:	d013      	beq.n	80082f0 <HAL_TIM_Base_Start_IT+0x6c>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a1a      	ldr	r2, [pc, #104]	; (8008338 <HAL_TIM_Base_Start_IT+0xb4>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d00e      	beq.n	80082f0 <HAL_TIM_Base_Start_IT+0x6c>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a19      	ldr	r2, [pc, #100]	; (800833c <HAL_TIM_Base_Start_IT+0xb8>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d009      	beq.n	80082f0 <HAL_TIM_Base_Start_IT+0x6c>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a17      	ldr	r2, [pc, #92]	; (8008340 <HAL_TIM_Base_Start_IT+0xbc>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d004      	beq.n	80082f0 <HAL_TIM_Base_Start_IT+0x6c>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a16      	ldr	r2, [pc, #88]	; (8008344 <HAL_TIM_Base_Start_IT+0xc0>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d111      	bne.n	8008314 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f003 0307 	and.w	r3, r3, #7
 80082fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2b06      	cmp	r3, #6
 8008300:	d010      	beq.n	8008324 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f042 0201 	orr.w	r2, r2, #1
 8008310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008312:	e007      	b.n	8008324 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f042 0201 	orr.w	r2, r2, #1
 8008322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	40010000 	.word	0x40010000
 8008338:	40000400 	.word	0x40000400
 800833c:	40000800 	.word	0x40000800
 8008340:	40000c00 	.word	0x40000c00
 8008344:	40014000 	.word	0x40014000

08008348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	f003 0302 	and.w	r3, r3, #2
 800835a:	2b02      	cmp	r3, #2
 800835c:	d122      	bne.n	80083a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	f003 0302 	and.w	r3, r3, #2
 8008368:	2b02      	cmp	r3, #2
 800836a:	d11b      	bne.n	80083a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f06f 0202 	mvn.w	r2, #2
 8008374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2201      	movs	r2, #1
 800837a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	f003 0303 	and.w	r3, r3, #3
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f9b5 	bl	80086fa <HAL_TIM_IC_CaptureCallback>
 8008390:	e005      	b.n	800839e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f9a7 	bl	80086e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f9b8 	bl	800870e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	f003 0304 	and.w	r3, r3, #4
 80083ae:	2b04      	cmp	r3, #4
 80083b0:	d122      	bne.n	80083f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	f003 0304 	and.w	r3, r3, #4
 80083bc:	2b04      	cmp	r3, #4
 80083be:	d11b      	bne.n	80083f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f06f 0204 	mvn.w	r2, #4
 80083c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2202      	movs	r2, #2
 80083ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d003      	beq.n	80083e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f98b 	bl	80086fa <HAL_TIM_IC_CaptureCallback>
 80083e4:	e005      	b.n	80083f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f97d 	bl	80086e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f98e 	bl	800870e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	f003 0308 	and.w	r3, r3, #8
 8008402:	2b08      	cmp	r3, #8
 8008404:	d122      	bne.n	800844c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	f003 0308 	and.w	r3, r3, #8
 8008410:	2b08      	cmp	r3, #8
 8008412:	d11b      	bne.n	800844c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f06f 0208 	mvn.w	r2, #8
 800841c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2204      	movs	r2, #4
 8008422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	69db      	ldr	r3, [r3, #28]
 800842a:	f003 0303 	and.w	r3, r3, #3
 800842e:	2b00      	cmp	r3, #0
 8008430:	d003      	beq.n	800843a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f961 	bl	80086fa <HAL_TIM_IC_CaptureCallback>
 8008438:	e005      	b.n	8008446 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f953 	bl	80086e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f964 	bl	800870e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	f003 0310 	and.w	r3, r3, #16
 8008456:	2b10      	cmp	r3, #16
 8008458:	d122      	bne.n	80084a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	f003 0310 	and.w	r3, r3, #16
 8008464:	2b10      	cmp	r3, #16
 8008466:	d11b      	bne.n	80084a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f06f 0210 	mvn.w	r2, #16
 8008470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2208      	movs	r2, #8
 8008476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	69db      	ldr	r3, [r3, #28]
 800847e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f937 	bl	80086fa <HAL_TIM_IC_CaptureCallback>
 800848c:	e005      	b.n	800849a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f929 	bl	80086e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 f93a 	bl	800870e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d10e      	bne.n	80084cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	f003 0301 	and.w	r3, r3, #1
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d107      	bne.n	80084cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f06f 0201 	mvn.w	r2, #1
 80084c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f7fb fc36 	bl	8003d38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084d6:	2b80      	cmp	r3, #128	; 0x80
 80084d8:	d10e      	bne.n	80084f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084e4:	2b80      	cmp	r3, #128	; 0x80
 80084e6:	d107      	bne.n	80084f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80084f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fab2 	bl	8008a5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008502:	2b40      	cmp	r3, #64	; 0x40
 8008504:	d10e      	bne.n	8008524 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008510:	2b40      	cmp	r3, #64	; 0x40
 8008512:	d107      	bne.n	8008524 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800851c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f8ff 	bl	8008722 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	f003 0320 	and.w	r3, r3, #32
 800852e:	2b20      	cmp	r3, #32
 8008530:	d10e      	bne.n	8008550 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	f003 0320 	and.w	r3, r3, #32
 800853c:	2b20      	cmp	r3, #32
 800853e:	d107      	bne.n	8008550 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f06f 0220 	mvn.w	r2, #32
 8008548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fa7c 	bl	8008a48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008550:	bf00      	nop
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800856c:	2b01      	cmp	r3, #1
 800856e:	d101      	bne.n	8008574 <HAL_TIM_ConfigClockSource+0x1c>
 8008570:	2302      	movs	r3, #2
 8008572:	e0b4      	b.n	80086de <HAL_TIM_ConfigClockSource+0x186>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2202      	movs	r2, #2
 8008580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800859a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085ac:	d03e      	beq.n	800862c <HAL_TIM_ConfigClockSource+0xd4>
 80085ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085b2:	f200 8087 	bhi.w	80086c4 <HAL_TIM_ConfigClockSource+0x16c>
 80085b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ba:	f000 8086 	beq.w	80086ca <HAL_TIM_ConfigClockSource+0x172>
 80085be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085c2:	d87f      	bhi.n	80086c4 <HAL_TIM_ConfigClockSource+0x16c>
 80085c4:	2b70      	cmp	r3, #112	; 0x70
 80085c6:	d01a      	beq.n	80085fe <HAL_TIM_ConfigClockSource+0xa6>
 80085c8:	2b70      	cmp	r3, #112	; 0x70
 80085ca:	d87b      	bhi.n	80086c4 <HAL_TIM_ConfigClockSource+0x16c>
 80085cc:	2b60      	cmp	r3, #96	; 0x60
 80085ce:	d050      	beq.n	8008672 <HAL_TIM_ConfigClockSource+0x11a>
 80085d0:	2b60      	cmp	r3, #96	; 0x60
 80085d2:	d877      	bhi.n	80086c4 <HAL_TIM_ConfigClockSource+0x16c>
 80085d4:	2b50      	cmp	r3, #80	; 0x50
 80085d6:	d03c      	beq.n	8008652 <HAL_TIM_ConfigClockSource+0xfa>
 80085d8:	2b50      	cmp	r3, #80	; 0x50
 80085da:	d873      	bhi.n	80086c4 <HAL_TIM_ConfigClockSource+0x16c>
 80085dc:	2b40      	cmp	r3, #64	; 0x40
 80085de:	d058      	beq.n	8008692 <HAL_TIM_ConfigClockSource+0x13a>
 80085e0:	2b40      	cmp	r3, #64	; 0x40
 80085e2:	d86f      	bhi.n	80086c4 <HAL_TIM_ConfigClockSource+0x16c>
 80085e4:	2b30      	cmp	r3, #48	; 0x30
 80085e6:	d064      	beq.n	80086b2 <HAL_TIM_ConfigClockSource+0x15a>
 80085e8:	2b30      	cmp	r3, #48	; 0x30
 80085ea:	d86b      	bhi.n	80086c4 <HAL_TIM_ConfigClockSource+0x16c>
 80085ec:	2b20      	cmp	r3, #32
 80085ee:	d060      	beq.n	80086b2 <HAL_TIM_ConfigClockSource+0x15a>
 80085f0:	2b20      	cmp	r3, #32
 80085f2:	d867      	bhi.n	80086c4 <HAL_TIM_ConfigClockSource+0x16c>
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d05c      	beq.n	80086b2 <HAL_TIM_ConfigClockSource+0x15a>
 80085f8:	2b10      	cmp	r3, #16
 80085fa:	d05a      	beq.n	80086b2 <HAL_TIM_ConfigClockSource+0x15a>
 80085fc:	e062      	b.n	80086c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6818      	ldr	r0, [r3, #0]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	6899      	ldr	r1, [r3, #8]
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	685a      	ldr	r2, [r3, #4]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	f000 f98d 	bl	800892c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008620:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	609a      	str	r2, [r3, #8]
      break;
 800862a:	e04f      	b.n	80086cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6818      	ldr	r0, [r3, #0]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	6899      	ldr	r1, [r3, #8]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	685a      	ldr	r2, [r3, #4]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	f000 f976 	bl	800892c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	689a      	ldr	r2, [r3, #8]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800864e:	609a      	str	r2, [r3, #8]
      break;
 8008650:	e03c      	b.n	80086cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6818      	ldr	r0, [r3, #0]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	6859      	ldr	r1, [r3, #4]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	461a      	mov	r2, r3
 8008660:	f000 f8ea 	bl	8008838 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2150      	movs	r1, #80	; 0x50
 800866a:	4618      	mov	r0, r3
 800866c:	f000 f943 	bl	80088f6 <TIM_ITRx_SetConfig>
      break;
 8008670:	e02c      	b.n	80086cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6818      	ldr	r0, [r3, #0]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	6859      	ldr	r1, [r3, #4]
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	461a      	mov	r2, r3
 8008680:	f000 f909 	bl	8008896 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2160      	movs	r1, #96	; 0x60
 800868a:	4618      	mov	r0, r3
 800868c:	f000 f933 	bl	80088f6 <TIM_ITRx_SetConfig>
      break;
 8008690:	e01c      	b.n	80086cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6818      	ldr	r0, [r3, #0]
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	6859      	ldr	r1, [r3, #4]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	461a      	mov	r2, r3
 80086a0:	f000 f8ca 	bl	8008838 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2140      	movs	r1, #64	; 0x40
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 f923 	bl	80088f6 <TIM_ITRx_SetConfig>
      break;
 80086b0:	e00c      	b.n	80086cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4619      	mov	r1, r3
 80086bc:	4610      	mov	r0, r2
 80086be:	f000 f91a 	bl	80088f6 <TIM_ITRx_SetConfig>
      break;
 80086c2:	e003      	b.n	80086cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	73fb      	strb	r3, [r7, #15]
      break;
 80086c8:	e000      	b.n	80086cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80086ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086e6:	b480      	push	{r7}
 80086e8:	b083      	sub	sp, #12
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086ee:	bf00      	nop
 80086f0:	370c      	adds	r7, #12
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008702:	bf00      	nop
 8008704:	370c      	adds	r7, #12
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800870e:	b480      	push	{r7}
 8008710:	b083      	sub	sp, #12
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008716:	bf00      	nop
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008722:	b480      	push	{r7}
 8008724:	b083      	sub	sp, #12
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800872a:	bf00      	nop
 800872c:	370c      	adds	r7, #12
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
	...

08008738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a34      	ldr	r2, [pc, #208]	; (800881c <TIM_Base_SetConfig+0xe4>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d00f      	beq.n	8008770 <TIM_Base_SetConfig+0x38>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008756:	d00b      	beq.n	8008770 <TIM_Base_SetConfig+0x38>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a31      	ldr	r2, [pc, #196]	; (8008820 <TIM_Base_SetConfig+0xe8>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d007      	beq.n	8008770 <TIM_Base_SetConfig+0x38>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a30      	ldr	r2, [pc, #192]	; (8008824 <TIM_Base_SetConfig+0xec>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d003      	beq.n	8008770 <TIM_Base_SetConfig+0x38>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a2f      	ldr	r2, [pc, #188]	; (8008828 <TIM_Base_SetConfig+0xf0>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d108      	bne.n	8008782 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	4313      	orrs	r3, r2
 8008780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a25      	ldr	r2, [pc, #148]	; (800881c <TIM_Base_SetConfig+0xe4>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d01b      	beq.n	80087c2 <TIM_Base_SetConfig+0x8a>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008790:	d017      	beq.n	80087c2 <TIM_Base_SetConfig+0x8a>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a22      	ldr	r2, [pc, #136]	; (8008820 <TIM_Base_SetConfig+0xe8>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d013      	beq.n	80087c2 <TIM_Base_SetConfig+0x8a>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a21      	ldr	r2, [pc, #132]	; (8008824 <TIM_Base_SetConfig+0xec>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d00f      	beq.n	80087c2 <TIM_Base_SetConfig+0x8a>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a20      	ldr	r2, [pc, #128]	; (8008828 <TIM_Base_SetConfig+0xf0>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d00b      	beq.n	80087c2 <TIM_Base_SetConfig+0x8a>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a1f      	ldr	r2, [pc, #124]	; (800882c <TIM_Base_SetConfig+0xf4>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d007      	beq.n	80087c2 <TIM_Base_SetConfig+0x8a>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a1e      	ldr	r2, [pc, #120]	; (8008830 <TIM_Base_SetConfig+0xf8>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d003      	beq.n	80087c2 <TIM_Base_SetConfig+0x8a>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a1d      	ldr	r2, [pc, #116]	; (8008834 <TIM_Base_SetConfig+0xfc>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d108      	bne.n	80087d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	4313      	orrs	r3, r2
 80087e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	689a      	ldr	r2, [r3, #8]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a08      	ldr	r2, [pc, #32]	; (800881c <TIM_Base_SetConfig+0xe4>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d103      	bne.n	8008808 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	691a      	ldr	r2, [r3, #16]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	615a      	str	r2, [r3, #20]
}
 800880e:	bf00      	nop
 8008810:	3714      	adds	r7, #20
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	40010000 	.word	0x40010000
 8008820:	40000400 	.word	0x40000400
 8008824:	40000800 	.word	0x40000800
 8008828:	40000c00 	.word	0x40000c00
 800882c:	40014000 	.word	0x40014000
 8008830:	40014400 	.word	0x40014400
 8008834:	40014800 	.word	0x40014800

08008838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008838:	b480      	push	{r7}
 800883a:	b087      	sub	sp, #28
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6a1b      	ldr	r3, [r3, #32]
 8008848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6a1b      	ldr	r3, [r3, #32]
 800884e:	f023 0201 	bic.w	r2, r3, #1
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	011b      	lsls	r3, r3, #4
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	4313      	orrs	r3, r2
 800886c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	f023 030a 	bic.w	r3, r3, #10
 8008874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	4313      	orrs	r3, r2
 800887c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	621a      	str	r2, [r3, #32]
}
 800888a:	bf00      	nop
 800888c:	371c      	adds	r7, #28
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008896:	b480      	push	{r7}
 8008898:	b087      	sub	sp, #28
 800889a:	af00      	add	r7, sp, #0
 800889c:	60f8      	str	r0, [r7, #12]
 800889e:	60b9      	str	r1, [r7, #8]
 80088a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	f023 0210 	bic.w	r2, r3, #16
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6a1b      	ldr	r3, [r3, #32]
 80088b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	031b      	lsls	r3, r3, #12
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	011b      	lsls	r3, r3, #4
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	4313      	orrs	r3, r2
 80088dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	621a      	str	r2, [r3, #32]
}
 80088ea:	bf00      	nop
 80088ec:	371c      	adds	r7, #28
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b085      	sub	sp, #20
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800890c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4313      	orrs	r3, r2
 8008914:	f043 0307 	orr.w	r3, r3, #7
 8008918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	609a      	str	r2, [r3, #8]
}
 8008920:	bf00      	nop
 8008922:	3714      	adds	r7, #20
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800892c:	b480      	push	{r7}
 800892e:	b087      	sub	sp, #28
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
 8008938:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008946:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	021a      	lsls	r2, r3, #8
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	431a      	orrs	r2, r3
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4313      	orrs	r3, r2
 8008954:	697a      	ldr	r2, [r7, #20]
 8008956:	4313      	orrs	r3, r2
 8008958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	609a      	str	r2, [r3, #8]
}
 8008960:	bf00      	nop
 8008962:	371c      	adds	r7, #28
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800897c:	2b01      	cmp	r3, #1
 800897e:	d101      	bne.n	8008984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008980:	2302      	movs	r3, #2
 8008982:	e050      	b.n	8008a26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2202      	movs	r2, #2
 8008990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a1c      	ldr	r2, [pc, #112]	; (8008a34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d018      	beq.n	80089fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d0:	d013      	beq.n	80089fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a18      	ldr	r2, [pc, #96]	; (8008a38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d00e      	beq.n	80089fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a16      	ldr	r2, [pc, #88]	; (8008a3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d009      	beq.n	80089fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a15      	ldr	r2, [pc, #84]	; (8008a40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d004      	beq.n	80089fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a13      	ldr	r2, [pc, #76]	; (8008a44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d10c      	bne.n	8008a14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3714      	adds	r7, #20
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	40010000 	.word	0x40010000
 8008a38:	40000400 	.word	0x40000400
 8008a3c:	40000800 	.word	0x40000800
 8008a40:	40000c00 	.word	0x40000c00
 8008a44:	40014000 	.word	0x40014000

08008a48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a50:	bf00      	nop
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d101      	bne.n	8008a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e03f      	b.n	8008b02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d106      	bne.n	8008a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f7fb fde8 	bl	800466c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2224      	movs	r2, #36	; 0x24
 8008aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68da      	ldr	r2, [r3, #12]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ab2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fcdf 	bl	8009478 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	691a      	ldr	r2, [r3, #16]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	695a      	ldr	r2, [r3, #20]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ad8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	68da      	ldr	r2, [r3, #12]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2220      	movs	r2, #32
 8008af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2220      	movs	r2, #32
 8008afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	60f8      	str	r0, [r7, #12]
 8008b12:	60b9      	str	r1, [r7, #8]
 8008b14:	4613      	mov	r3, r2
 8008b16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b20      	cmp	r3, #32
 8008b22:	d11d      	bne.n	8008b60 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d002      	beq.n	8008b30 <HAL_UART_Receive_IT+0x26>
 8008b2a:	88fb      	ldrh	r3, [r7, #6]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d101      	bne.n	8008b34 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e016      	b.n	8008b62 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d101      	bne.n	8008b42 <HAL_UART_Receive_IT+0x38>
 8008b3e:	2302      	movs	r3, #2
 8008b40:	e00f      	b.n	8008b62 <HAL_UART_Receive_IT+0x58>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2201      	movs	r2, #1
 8008b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008b50:	88fb      	ldrh	r3, [r7, #6]
 8008b52:	461a      	mov	r2, r3
 8008b54:	68b9      	ldr	r1, [r7, #8]
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f000 fab6 	bl	80090c8 <UART_Start_Receive_IT>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	e000      	b.n	8008b62 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008b60:	2302      	movs	r3, #2
  }
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
	...

08008b6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b0ba      	sub	sp, #232	; 0xe8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008b92:	2300      	movs	r3, #0
 8008b94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ba2:	f003 030f 	and.w	r3, r3, #15
 8008ba6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008baa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10f      	bne.n	8008bd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bb6:	f003 0320 	and.w	r3, r3, #32
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d009      	beq.n	8008bd2 <HAL_UART_IRQHandler+0x66>
 8008bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bc2:	f003 0320 	and.w	r3, r3, #32
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d003      	beq.n	8008bd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fb99 	bl	8009302 <UART_Receive_IT>
      return;
 8008bd0:	e256      	b.n	8009080 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008bd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f000 80de 	beq.w	8008d98 <HAL_UART_IRQHandler+0x22c>
 8008bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d106      	bne.n	8008bf6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f000 80d1 	beq.w	8008d98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00b      	beq.n	8008c1a <HAL_UART_IRQHandler+0xae>
 8008c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d005      	beq.n	8008c1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c12:	f043 0201 	orr.w	r2, r3, #1
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c1e:	f003 0304 	and.w	r3, r3, #4
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00b      	beq.n	8008c3e <HAL_UART_IRQHandler+0xd2>
 8008c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c2a:	f003 0301 	and.w	r3, r3, #1
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d005      	beq.n	8008c3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c36:	f043 0202 	orr.w	r2, r3, #2
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c42:	f003 0302 	and.w	r3, r3, #2
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00b      	beq.n	8008c62 <HAL_UART_IRQHandler+0xf6>
 8008c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d005      	beq.n	8008c62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5a:	f043 0204 	orr.w	r2, r3, #4
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c66:	f003 0308 	and.w	r3, r3, #8
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d011      	beq.n	8008c92 <HAL_UART_IRQHandler+0x126>
 8008c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c72:	f003 0320 	and.w	r3, r3, #32
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d105      	bne.n	8008c86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c7e:	f003 0301 	and.w	r3, r3, #1
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d005      	beq.n	8008c92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8a:	f043 0208 	orr.w	r2, r3, #8
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f000 81ed 	beq.w	8009076 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ca0:	f003 0320 	and.w	r3, r3, #32
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d008      	beq.n	8008cba <HAL_UART_IRQHandler+0x14e>
 8008ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cac:	f003 0320 	and.w	r3, r3, #32
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fb24 	bl	8009302 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc4:	2b40      	cmp	r3, #64	; 0x40
 8008cc6:	bf0c      	ite	eq
 8008cc8:	2301      	moveq	r3, #1
 8008cca:	2300      	movne	r3, #0
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd6:	f003 0308 	and.w	r3, r3, #8
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d103      	bne.n	8008ce6 <HAL_UART_IRQHandler+0x17a>
 8008cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d04f      	beq.n	8008d86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fa2c 	bl	8009144 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf6:	2b40      	cmp	r3, #64	; 0x40
 8008cf8:	d141      	bne.n	8008d7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	3314      	adds	r3, #20
 8008d00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d08:	e853 3f00 	ldrex	r3, [r3]
 8008d0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008d10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3314      	adds	r3, #20
 8008d22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008d26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008d32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008d3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1d9      	bne.n	8008cfa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d013      	beq.n	8008d76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d52:	4a7d      	ldr	r2, [pc, #500]	; (8008f48 <HAL_UART_IRQHandler+0x3dc>)
 8008d54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7fc fb08 	bl	8005370 <HAL_DMA_Abort_IT>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d016      	beq.n	8008d94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008d70:	4610      	mov	r0, r2
 8008d72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d74:	e00e      	b.n	8008d94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f990 	bl	800909c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d7c:	e00a      	b.n	8008d94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f98c 	bl	800909c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d84:	e006      	b.n	8008d94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f988 	bl	800909c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008d92:	e170      	b.n	8009076 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d94:	bf00      	nop
    return;
 8008d96:	e16e      	b.n	8009076 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	f040 814a 	bne.w	8009036 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008da6:	f003 0310 	and.w	r3, r3, #16
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f000 8143 	beq.w	8009036 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008db4:	f003 0310 	and.w	r3, r3, #16
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f000 813c 	beq.w	8009036 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	60bb      	str	r3, [r7, #8]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	60bb      	str	r3, [r7, #8]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	60bb      	str	r3, [r7, #8]
 8008dd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dde:	2b40      	cmp	r3, #64	; 0x40
 8008de0:	f040 80b4 	bne.w	8008f4c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008df0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 8140 	beq.w	800907a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008dfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e02:	429a      	cmp	r2, r3
 8008e04:	f080 8139 	bcs.w	800907a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e14:	69db      	ldr	r3, [r3, #28]
 8008e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e1a:	f000 8088 	beq.w	8008f2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	330c      	adds	r3, #12
 8008e24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e2c:	e853 3f00 	ldrex	r3, [r3]
 8008e30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008e34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	330c      	adds	r3, #12
 8008e46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008e4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008e56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008e5a:	e841 2300 	strex	r3, r2, [r1]
 8008e5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1d9      	bne.n	8008e1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3314      	adds	r3, #20
 8008e70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008e7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e7c:	f023 0301 	bic.w	r3, r3, #1
 8008e80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	3314      	adds	r3, #20
 8008e8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008e8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008e92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008e96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008e9a:	e841 2300 	strex	r3, r2, [r1]
 8008e9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008ea0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1e1      	bne.n	8008e6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3314      	adds	r3, #20
 8008eac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008eb0:	e853 3f00 	ldrex	r3, [r3]
 8008eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	3314      	adds	r3, #20
 8008ec6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008eca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008ecc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ece:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ed0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ed2:	e841 2300 	strex	r3, r2, [r1]
 8008ed6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1e3      	bne.n	8008ea6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	330c      	adds	r3, #12
 8008ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ef6:	e853 3f00 	ldrex	r3, [r3]
 8008efa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008efe:	f023 0310 	bic.w	r3, r3, #16
 8008f02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	330c      	adds	r3, #12
 8008f0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008f10:	65ba      	str	r2, [r7, #88]	; 0x58
 8008f12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f18:	e841 2300 	strex	r3, r2, [r1]
 8008f1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1e3      	bne.n	8008eec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7fc f9b1 	bl	8005290 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f8b6 	bl	80090b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f44:	e099      	b.n	800907a <HAL_UART_IRQHandler+0x50e>
 8008f46:	bf00      	nop
 8008f48:	0800920b 	.word	0x0800920b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f000 808b 	beq.w	800907e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008f68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 8086 	beq.w	800907e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	330c      	adds	r3, #12
 8008f78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7c:	e853 3f00 	ldrex	r3, [r3]
 8008f80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	330c      	adds	r3, #12
 8008f92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008f96:	647a      	str	r2, [r7, #68]	; 0x44
 8008f98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f9e:	e841 2300 	strex	r3, r2, [r1]
 8008fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1e3      	bne.n	8008f72 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	3314      	adds	r3, #20
 8008fb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	e853 3f00 	ldrex	r3, [r3]
 8008fb8:	623b      	str	r3, [r7, #32]
   return(result);
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	f023 0301 	bic.w	r3, r3, #1
 8008fc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	3314      	adds	r3, #20
 8008fca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008fce:	633a      	str	r2, [r7, #48]	; 0x30
 8008fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fd6:	e841 2300 	strex	r3, r2, [r1]
 8008fda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1e3      	bne.n	8008faa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2220      	movs	r2, #32
 8008fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	330c      	adds	r3, #12
 8008ff6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	e853 3f00 	ldrex	r3, [r3]
 8008ffe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f023 0310 	bic.w	r3, r3, #16
 8009006:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	330c      	adds	r3, #12
 8009010:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009014:	61fa      	str	r2, [r7, #28]
 8009016:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009018:	69b9      	ldr	r1, [r7, #24]
 800901a:	69fa      	ldr	r2, [r7, #28]
 800901c:	e841 2300 	strex	r3, r2, [r1]
 8009020:	617b      	str	r3, [r7, #20]
   return(result);
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1e3      	bne.n	8008ff0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009028:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f83e 	bl	80090b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009034:	e023      	b.n	800907e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800903a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800903e:	2b00      	cmp	r3, #0
 8009040:	d009      	beq.n	8009056 <HAL_UART_IRQHandler+0x4ea>
 8009042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f8ef 	bl	8009232 <UART_Transmit_IT>
    return;
 8009054:	e014      	b.n	8009080 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800905a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00e      	beq.n	8009080 <HAL_UART_IRQHandler+0x514>
 8009062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800906a:	2b00      	cmp	r3, #0
 800906c:	d008      	beq.n	8009080 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f92f 	bl	80092d2 <UART_EndTransmit_IT>
    return;
 8009074:	e004      	b.n	8009080 <HAL_UART_IRQHandler+0x514>
    return;
 8009076:	bf00      	nop
 8009078:	e002      	b.n	8009080 <HAL_UART_IRQHandler+0x514>
      return;
 800907a:	bf00      	nop
 800907c:	e000      	b.n	8009080 <HAL_UART_IRQHandler+0x514>
      return;
 800907e:	bf00      	nop
  }
}
 8009080:	37e8      	adds	r7, #232	; 0xe8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop

08009088 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009090:	bf00      	nop
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80090a4:	bf00      	nop
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	460b      	mov	r3, r1
 80090ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80090bc:	bf00      	nop
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	4613      	mov	r3, r2
 80090d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	88fa      	ldrh	r2, [r7, #6]
 80090e0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	88fa      	ldrh	r2, [r7, #6]
 80090e6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2222      	movs	r2, #34	; 0x22
 80090f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	691b      	ldr	r3, [r3, #16]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d007      	beq.n	8009116 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68da      	ldr	r2, [r3, #12]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009114:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	695a      	ldr	r2, [r3, #20]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f042 0201 	orr.w	r2, r2, #1
 8009124:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68da      	ldr	r2, [r3, #12]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f042 0220 	orr.w	r2, r2, #32
 8009134:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3714      	adds	r7, #20
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009144:	b480      	push	{r7}
 8009146:	b095      	sub	sp, #84	; 0x54
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	330c      	adds	r3, #12
 8009152:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009156:	e853 3f00 	ldrex	r3, [r3]
 800915a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800915c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	330c      	adds	r3, #12
 800916a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800916c:	643a      	str	r2, [r7, #64]	; 0x40
 800916e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009170:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009172:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009174:	e841 2300 	strex	r3, r2, [r1]
 8009178:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800917a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1e5      	bne.n	800914c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	3314      	adds	r3, #20
 8009186:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009188:	6a3b      	ldr	r3, [r7, #32]
 800918a:	e853 3f00 	ldrex	r3, [r3]
 800918e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	f023 0301 	bic.w	r3, r3, #1
 8009196:	64bb      	str	r3, [r7, #72]	; 0x48
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	3314      	adds	r3, #20
 800919e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091a8:	e841 2300 	strex	r3, r2, [r1]
 80091ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1e5      	bne.n	8009180 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d119      	bne.n	80091f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	330c      	adds	r3, #12
 80091c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	e853 3f00 	ldrex	r3, [r3]
 80091ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	f023 0310 	bic.w	r3, r3, #16
 80091d2:	647b      	str	r3, [r7, #68]	; 0x44
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	330c      	adds	r3, #12
 80091da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091dc:	61ba      	str	r2, [r7, #24]
 80091de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e0:	6979      	ldr	r1, [r7, #20]
 80091e2:	69ba      	ldr	r2, [r7, #24]
 80091e4:	e841 2300 	strex	r3, r2, [r1]
 80091e8:	613b      	str	r3, [r7, #16]
   return(result);
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1e5      	bne.n	80091bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2220      	movs	r2, #32
 80091f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80091fe:	bf00      	nop
 8009200:	3754      	adds	r7, #84	; 0x54
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b084      	sub	sp, #16
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009216:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f7ff ff39 	bl	800909c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800922a:	bf00      	nop
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009232:	b480      	push	{r7}
 8009234:	b085      	sub	sp, #20
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2b21      	cmp	r3, #33	; 0x21
 8009244:	d13e      	bne.n	80092c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800924e:	d114      	bne.n	800927a <UART_Transmit_IT+0x48>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d110      	bne.n	800927a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6a1b      	ldr	r3, [r3, #32]
 800925c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	881b      	ldrh	r3, [r3, #0]
 8009262:	461a      	mov	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800926c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	1c9a      	adds	r2, r3, #2
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	621a      	str	r2, [r3, #32]
 8009278:	e008      	b.n	800928c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a1b      	ldr	r3, [r3, #32]
 800927e:	1c59      	adds	r1, r3, #1
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	6211      	str	r1, [r2, #32]
 8009284:	781a      	ldrb	r2, [r3, #0]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009290:	b29b      	uxth	r3, r3
 8009292:	3b01      	subs	r3, #1
 8009294:	b29b      	uxth	r3, r3
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	4619      	mov	r1, r3
 800929a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10f      	bne.n	80092c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68da      	ldr	r2, [r3, #12]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68da      	ldr	r2, [r3, #12]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80092c0:	2300      	movs	r3, #0
 80092c2:	e000      	b.n	80092c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80092c4:	2302      	movs	r3, #2
  }
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b082      	sub	sp, #8
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68da      	ldr	r2, [r3, #12]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2220      	movs	r2, #32
 80092ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7ff fec8 	bl	8009088 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b08c      	sub	sp, #48	; 0x30
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b22      	cmp	r3, #34	; 0x22
 8009314:	f040 80ab 	bne.w	800946e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009320:	d117      	bne.n	8009352 <UART_Receive_IT+0x50>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d113      	bne.n	8009352 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800932a:	2300      	movs	r3, #0
 800932c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009332:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	b29b      	uxth	r3, r3
 800933c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009340:	b29a      	uxth	r2, r3
 8009342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009344:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934a:	1c9a      	adds	r2, r3, #2
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	629a      	str	r2, [r3, #40]	; 0x28
 8009350:	e026      	b.n	80093a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009356:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009358:	2300      	movs	r3, #0
 800935a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009364:	d007      	beq.n	8009376 <UART_Receive_IT+0x74>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d10a      	bne.n	8009384 <UART_Receive_IT+0x82>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d106      	bne.n	8009384 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	b2da      	uxtb	r2, r3
 800937e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009380:	701a      	strb	r2, [r3, #0]
 8009382:	e008      	b.n	8009396 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	b2db      	uxtb	r3, r3
 800938c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009390:	b2da      	uxtb	r2, r3
 8009392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009394:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800939a:	1c5a      	adds	r2, r3, #1
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	3b01      	subs	r3, #1
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	4619      	mov	r1, r3
 80093ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d15a      	bne.n	800946a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68da      	ldr	r2, [r3, #12]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f022 0220 	bic.w	r2, r2, #32
 80093c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68da      	ldr	r2, [r3, #12]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	695a      	ldr	r2, [r3, #20]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f022 0201 	bic.w	r2, r2, #1
 80093e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2220      	movs	r2, #32
 80093e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d135      	bne.n	8009460 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	330c      	adds	r3, #12
 8009400:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	e853 3f00 	ldrex	r3, [r3]
 8009408:	613b      	str	r3, [r7, #16]
   return(result);
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	f023 0310 	bic.w	r3, r3, #16
 8009410:	627b      	str	r3, [r7, #36]	; 0x24
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	330c      	adds	r3, #12
 8009418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800941a:	623a      	str	r2, [r7, #32]
 800941c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941e:	69f9      	ldr	r1, [r7, #28]
 8009420:	6a3a      	ldr	r2, [r7, #32]
 8009422:	e841 2300 	strex	r3, r2, [r1]
 8009426:	61bb      	str	r3, [r7, #24]
   return(result);
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1e5      	bne.n	80093fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 0310 	and.w	r3, r3, #16
 8009438:	2b10      	cmp	r3, #16
 800943a:	d10a      	bne.n	8009452 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800943c:	2300      	movs	r3, #0
 800943e:	60fb      	str	r3, [r7, #12]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	60fb      	str	r3, [r7, #12]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	60fb      	str	r3, [r7, #12]
 8009450:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009456:	4619      	mov	r1, r3
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f7ff fe29 	bl	80090b0 <HAL_UARTEx_RxEventCallback>
 800945e:	e002      	b.n	8009466 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7f9 fe8d 	bl	8003180 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	e002      	b.n	8009470 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800946a:	2300      	movs	r3, #0
 800946c:	e000      	b.n	8009470 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800946e:	2302      	movs	r3, #2
  }
}
 8009470:	4618      	mov	r0, r3
 8009472:	3730      	adds	r7, #48	; 0x30
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800947c:	b0c0      	sub	sp, #256	; 0x100
 800947e:	af00      	add	r7, sp, #0
 8009480:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009494:	68d9      	ldr	r1, [r3, #12]
 8009496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	ea40 0301 	orr.w	r3, r0, r1
 80094a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80094a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094a6:	689a      	ldr	r2, [r3, #8]
 80094a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	431a      	orrs	r2, r3
 80094b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094b4:	695b      	ldr	r3, [r3, #20]
 80094b6:	431a      	orrs	r2, r3
 80094b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094bc:	69db      	ldr	r3, [r3, #28]
 80094be:	4313      	orrs	r3, r2
 80094c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80094c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80094d0:	f021 010c 	bic.w	r1, r1, #12
 80094d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80094de:	430b      	orrs	r3, r1
 80094e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80094e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	695b      	ldr	r3, [r3, #20]
 80094ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80094ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094f2:	6999      	ldr	r1, [r3, #24]
 80094f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	ea40 0301 	orr.w	r3, r0, r1
 80094fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	4b8f      	ldr	r3, [pc, #572]	; (8009744 <UART_SetConfig+0x2cc>)
 8009508:	429a      	cmp	r2, r3
 800950a:	d005      	beq.n	8009518 <UART_SetConfig+0xa0>
 800950c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	4b8d      	ldr	r3, [pc, #564]	; (8009748 <UART_SetConfig+0x2d0>)
 8009514:	429a      	cmp	r2, r3
 8009516:	d104      	bne.n	8009522 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009518:	f7fe f992 	bl	8007840 <HAL_RCC_GetPCLK2Freq>
 800951c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009520:	e003      	b.n	800952a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009522:	f7fe f979 	bl	8007818 <HAL_RCC_GetPCLK1Freq>
 8009526:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800952a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800952e:	69db      	ldr	r3, [r3, #28]
 8009530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009534:	f040 810c 	bne.w	8009750 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800953c:	2200      	movs	r2, #0
 800953e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009542:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009546:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800954a:	4622      	mov	r2, r4
 800954c:	462b      	mov	r3, r5
 800954e:	1891      	adds	r1, r2, r2
 8009550:	65b9      	str	r1, [r7, #88]	; 0x58
 8009552:	415b      	adcs	r3, r3
 8009554:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009556:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800955a:	4621      	mov	r1, r4
 800955c:	eb12 0801 	adds.w	r8, r2, r1
 8009560:	4629      	mov	r1, r5
 8009562:	eb43 0901 	adc.w	r9, r3, r1
 8009566:	f04f 0200 	mov.w	r2, #0
 800956a:	f04f 0300 	mov.w	r3, #0
 800956e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009572:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009576:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800957a:	4690      	mov	r8, r2
 800957c:	4699      	mov	r9, r3
 800957e:	4623      	mov	r3, r4
 8009580:	eb18 0303 	adds.w	r3, r8, r3
 8009584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009588:	462b      	mov	r3, r5
 800958a:	eb49 0303 	adc.w	r3, r9, r3
 800958e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800959e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80095a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80095a6:	460b      	mov	r3, r1
 80095a8:	18db      	adds	r3, r3, r3
 80095aa:	653b      	str	r3, [r7, #80]	; 0x50
 80095ac:	4613      	mov	r3, r2
 80095ae:	eb42 0303 	adc.w	r3, r2, r3
 80095b2:	657b      	str	r3, [r7, #84]	; 0x54
 80095b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80095b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80095bc:	f7f7 fbbc 	bl	8000d38 <__aeabi_uldivmod>
 80095c0:	4602      	mov	r2, r0
 80095c2:	460b      	mov	r3, r1
 80095c4:	4b61      	ldr	r3, [pc, #388]	; (800974c <UART_SetConfig+0x2d4>)
 80095c6:	fba3 2302 	umull	r2, r3, r3, r2
 80095ca:	095b      	lsrs	r3, r3, #5
 80095cc:	011c      	lsls	r4, r3, #4
 80095ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095d2:	2200      	movs	r2, #0
 80095d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80095d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80095dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80095e0:	4642      	mov	r2, r8
 80095e2:	464b      	mov	r3, r9
 80095e4:	1891      	adds	r1, r2, r2
 80095e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80095e8:	415b      	adcs	r3, r3
 80095ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80095f0:	4641      	mov	r1, r8
 80095f2:	eb12 0a01 	adds.w	sl, r2, r1
 80095f6:	4649      	mov	r1, r9
 80095f8:	eb43 0b01 	adc.w	fp, r3, r1
 80095fc:	f04f 0200 	mov.w	r2, #0
 8009600:	f04f 0300 	mov.w	r3, #0
 8009604:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009608:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800960c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009610:	4692      	mov	sl, r2
 8009612:	469b      	mov	fp, r3
 8009614:	4643      	mov	r3, r8
 8009616:	eb1a 0303 	adds.w	r3, sl, r3
 800961a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800961e:	464b      	mov	r3, r9
 8009620:	eb4b 0303 	adc.w	r3, fp, r3
 8009624:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009634:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009638:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800963c:	460b      	mov	r3, r1
 800963e:	18db      	adds	r3, r3, r3
 8009640:	643b      	str	r3, [r7, #64]	; 0x40
 8009642:	4613      	mov	r3, r2
 8009644:	eb42 0303 	adc.w	r3, r2, r3
 8009648:	647b      	str	r3, [r7, #68]	; 0x44
 800964a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800964e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009652:	f7f7 fb71 	bl	8000d38 <__aeabi_uldivmod>
 8009656:	4602      	mov	r2, r0
 8009658:	460b      	mov	r3, r1
 800965a:	4611      	mov	r1, r2
 800965c:	4b3b      	ldr	r3, [pc, #236]	; (800974c <UART_SetConfig+0x2d4>)
 800965e:	fba3 2301 	umull	r2, r3, r3, r1
 8009662:	095b      	lsrs	r3, r3, #5
 8009664:	2264      	movs	r2, #100	; 0x64
 8009666:	fb02 f303 	mul.w	r3, r2, r3
 800966a:	1acb      	subs	r3, r1, r3
 800966c:	00db      	lsls	r3, r3, #3
 800966e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009672:	4b36      	ldr	r3, [pc, #216]	; (800974c <UART_SetConfig+0x2d4>)
 8009674:	fba3 2302 	umull	r2, r3, r3, r2
 8009678:	095b      	lsrs	r3, r3, #5
 800967a:	005b      	lsls	r3, r3, #1
 800967c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009680:	441c      	add	r4, r3
 8009682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009686:	2200      	movs	r2, #0
 8009688:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800968c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009690:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009694:	4642      	mov	r2, r8
 8009696:	464b      	mov	r3, r9
 8009698:	1891      	adds	r1, r2, r2
 800969a:	63b9      	str	r1, [r7, #56]	; 0x38
 800969c:	415b      	adcs	r3, r3
 800969e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80096a4:	4641      	mov	r1, r8
 80096a6:	1851      	adds	r1, r2, r1
 80096a8:	6339      	str	r1, [r7, #48]	; 0x30
 80096aa:	4649      	mov	r1, r9
 80096ac:	414b      	adcs	r3, r1
 80096ae:	637b      	str	r3, [r7, #52]	; 0x34
 80096b0:	f04f 0200 	mov.w	r2, #0
 80096b4:	f04f 0300 	mov.w	r3, #0
 80096b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80096bc:	4659      	mov	r1, fp
 80096be:	00cb      	lsls	r3, r1, #3
 80096c0:	4651      	mov	r1, sl
 80096c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096c6:	4651      	mov	r1, sl
 80096c8:	00ca      	lsls	r2, r1, #3
 80096ca:	4610      	mov	r0, r2
 80096cc:	4619      	mov	r1, r3
 80096ce:	4603      	mov	r3, r0
 80096d0:	4642      	mov	r2, r8
 80096d2:	189b      	adds	r3, r3, r2
 80096d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80096d8:	464b      	mov	r3, r9
 80096da:	460a      	mov	r2, r1
 80096dc:	eb42 0303 	adc.w	r3, r2, r3
 80096e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80096e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80096f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80096f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80096f8:	460b      	mov	r3, r1
 80096fa:	18db      	adds	r3, r3, r3
 80096fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80096fe:	4613      	mov	r3, r2
 8009700:	eb42 0303 	adc.w	r3, r2, r3
 8009704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009706:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800970a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800970e:	f7f7 fb13 	bl	8000d38 <__aeabi_uldivmod>
 8009712:	4602      	mov	r2, r0
 8009714:	460b      	mov	r3, r1
 8009716:	4b0d      	ldr	r3, [pc, #52]	; (800974c <UART_SetConfig+0x2d4>)
 8009718:	fba3 1302 	umull	r1, r3, r3, r2
 800971c:	095b      	lsrs	r3, r3, #5
 800971e:	2164      	movs	r1, #100	; 0x64
 8009720:	fb01 f303 	mul.w	r3, r1, r3
 8009724:	1ad3      	subs	r3, r2, r3
 8009726:	00db      	lsls	r3, r3, #3
 8009728:	3332      	adds	r3, #50	; 0x32
 800972a:	4a08      	ldr	r2, [pc, #32]	; (800974c <UART_SetConfig+0x2d4>)
 800972c:	fba2 2303 	umull	r2, r3, r2, r3
 8009730:	095b      	lsrs	r3, r3, #5
 8009732:	f003 0207 	and.w	r2, r3, #7
 8009736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4422      	add	r2, r4
 800973e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009740:	e105      	b.n	800994e <UART_SetConfig+0x4d6>
 8009742:	bf00      	nop
 8009744:	40011000 	.word	0x40011000
 8009748:	40011400 	.word	0x40011400
 800974c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009754:	2200      	movs	r2, #0
 8009756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800975a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800975e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009762:	4642      	mov	r2, r8
 8009764:	464b      	mov	r3, r9
 8009766:	1891      	adds	r1, r2, r2
 8009768:	6239      	str	r1, [r7, #32]
 800976a:	415b      	adcs	r3, r3
 800976c:	627b      	str	r3, [r7, #36]	; 0x24
 800976e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009772:	4641      	mov	r1, r8
 8009774:	1854      	adds	r4, r2, r1
 8009776:	4649      	mov	r1, r9
 8009778:	eb43 0501 	adc.w	r5, r3, r1
 800977c:	f04f 0200 	mov.w	r2, #0
 8009780:	f04f 0300 	mov.w	r3, #0
 8009784:	00eb      	lsls	r3, r5, #3
 8009786:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800978a:	00e2      	lsls	r2, r4, #3
 800978c:	4614      	mov	r4, r2
 800978e:	461d      	mov	r5, r3
 8009790:	4643      	mov	r3, r8
 8009792:	18e3      	adds	r3, r4, r3
 8009794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009798:	464b      	mov	r3, r9
 800979a:	eb45 0303 	adc.w	r3, r5, r3
 800979e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80097a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80097ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80097b2:	f04f 0200 	mov.w	r2, #0
 80097b6:	f04f 0300 	mov.w	r3, #0
 80097ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80097be:	4629      	mov	r1, r5
 80097c0:	008b      	lsls	r3, r1, #2
 80097c2:	4621      	mov	r1, r4
 80097c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097c8:	4621      	mov	r1, r4
 80097ca:	008a      	lsls	r2, r1, #2
 80097cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80097d0:	f7f7 fab2 	bl	8000d38 <__aeabi_uldivmod>
 80097d4:	4602      	mov	r2, r0
 80097d6:	460b      	mov	r3, r1
 80097d8:	4b60      	ldr	r3, [pc, #384]	; (800995c <UART_SetConfig+0x4e4>)
 80097da:	fba3 2302 	umull	r2, r3, r3, r2
 80097de:	095b      	lsrs	r3, r3, #5
 80097e0:	011c      	lsls	r4, r3, #4
 80097e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097e6:	2200      	movs	r2, #0
 80097e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80097ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80097f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80097f4:	4642      	mov	r2, r8
 80097f6:	464b      	mov	r3, r9
 80097f8:	1891      	adds	r1, r2, r2
 80097fa:	61b9      	str	r1, [r7, #24]
 80097fc:	415b      	adcs	r3, r3
 80097fe:	61fb      	str	r3, [r7, #28]
 8009800:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009804:	4641      	mov	r1, r8
 8009806:	1851      	adds	r1, r2, r1
 8009808:	6139      	str	r1, [r7, #16]
 800980a:	4649      	mov	r1, r9
 800980c:	414b      	adcs	r3, r1
 800980e:	617b      	str	r3, [r7, #20]
 8009810:	f04f 0200 	mov.w	r2, #0
 8009814:	f04f 0300 	mov.w	r3, #0
 8009818:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800981c:	4659      	mov	r1, fp
 800981e:	00cb      	lsls	r3, r1, #3
 8009820:	4651      	mov	r1, sl
 8009822:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009826:	4651      	mov	r1, sl
 8009828:	00ca      	lsls	r2, r1, #3
 800982a:	4610      	mov	r0, r2
 800982c:	4619      	mov	r1, r3
 800982e:	4603      	mov	r3, r0
 8009830:	4642      	mov	r2, r8
 8009832:	189b      	adds	r3, r3, r2
 8009834:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009838:	464b      	mov	r3, r9
 800983a:	460a      	mov	r2, r1
 800983c:	eb42 0303 	adc.w	r3, r2, r3
 8009840:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	67bb      	str	r3, [r7, #120]	; 0x78
 800984e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009850:	f04f 0200 	mov.w	r2, #0
 8009854:	f04f 0300 	mov.w	r3, #0
 8009858:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800985c:	4649      	mov	r1, r9
 800985e:	008b      	lsls	r3, r1, #2
 8009860:	4641      	mov	r1, r8
 8009862:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009866:	4641      	mov	r1, r8
 8009868:	008a      	lsls	r2, r1, #2
 800986a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800986e:	f7f7 fa63 	bl	8000d38 <__aeabi_uldivmod>
 8009872:	4602      	mov	r2, r0
 8009874:	460b      	mov	r3, r1
 8009876:	4b39      	ldr	r3, [pc, #228]	; (800995c <UART_SetConfig+0x4e4>)
 8009878:	fba3 1302 	umull	r1, r3, r3, r2
 800987c:	095b      	lsrs	r3, r3, #5
 800987e:	2164      	movs	r1, #100	; 0x64
 8009880:	fb01 f303 	mul.w	r3, r1, r3
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	011b      	lsls	r3, r3, #4
 8009888:	3332      	adds	r3, #50	; 0x32
 800988a:	4a34      	ldr	r2, [pc, #208]	; (800995c <UART_SetConfig+0x4e4>)
 800988c:	fba2 2303 	umull	r2, r3, r2, r3
 8009890:	095b      	lsrs	r3, r3, #5
 8009892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009896:	441c      	add	r4, r3
 8009898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800989c:	2200      	movs	r2, #0
 800989e:	673b      	str	r3, [r7, #112]	; 0x70
 80098a0:	677a      	str	r2, [r7, #116]	; 0x74
 80098a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80098a6:	4642      	mov	r2, r8
 80098a8:	464b      	mov	r3, r9
 80098aa:	1891      	adds	r1, r2, r2
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	415b      	adcs	r3, r3
 80098b0:	60fb      	str	r3, [r7, #12]
 80098b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80098b6:	4641      	mov	r1, r8
 80098b8:	1851      	adds	r1, r2, r1
 80098ba:	6039      	str	r1, [r7, #0]
 80098bc:	4649      	mov	r1, r9
 80098be:	414b      	adcs	r3, r1
 80098c0:	607b      	str	r3, [r7, #4]
 80098c2:	f04f 0200 	mov.w	r2, #0
 80098c6:	f04f 0300 	mov.w	r3, #0
 80098ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80098ce:	4659      	mov	r1, fp
 80098d0:	00cb      	lsls	r3, r1, #3
 80098d2:	4651      	mov	r1, sl
 80098d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098d8:	4651      	mov	r1, sl
 80098da:	00ca      	lsls	r2, r1, #3
 80098dc:	4610      	mov	r0, r2
 80098de:	4619      	mov	r1, r3
 80098e0:	4603      	mov	r3, r0
 80098e2:	4642      	mov	r2, r8
 80098e4:	189b      	adds	r3, r3, r2
 80098e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80098e8:	464b      	mov	r3, r9
 80098ea:	460a      	mov	r2, r1
 80098ec:	eb42 0303 	adc.w	r3, r2, r3
 80098f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80098f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	663b      	str	r3, [r7, #96]	; 0x60
 80098fc:	667a      	str	r2, [r7, #100]	; 0x64
 80098fe:	f04f 0200 	mov.w	r2, #0
 8009902:	f04f 0300 	mov.w	r3, #0
 8009906:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800990a:	4649      	mov	r1, r9
 800990c:	008b      	lsls	r3, r1, #2
 800990e:	4641      	mov	r1, r8
 8009910:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009914:	4641      	mov	r1, r8
 8009916:	008a      	lsls	r2, r1, #2
 8009918:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800991c:	f7f7 fa0c 	bl	8000d38 <__aeabi_uldivmod>
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	4b0d      	ldr	r3, [pc, #52]	; (800995c <UART_SetConfig+0x4e4>)
 8009926:	fba3 1302 	umull	r1, r3, r3, r2
 800992a:	095b      	lsrs	r3, r3, #5
 800992c:	2164      	movs	r1, #100	; 0x64
 800992e:	fb01 f303 	mul.w	r3, r1, r3
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	011b      	lsls	r3, r3, #4
 8009936:	3332      	adds	r3, #50	; 0x32
 8009938:	4a08      	ldr	r2, [pc, #32]	; (800995c <UART_SetConfig+0x4e4>)
 800993a:	fba2 2303 	umull	r2, r3, r2, r3
 800993e:	095b      	lsrs	r3, r3, #5
 8009940:	f003 020f 	and.w	r2, r3, #15
 8009944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4422      	add	r2, r4
 800994c:	609a      	str	r2, [r3, #8]
}
 800994e:	bf00      	nop
 8009950:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009954:	46bd      	mov	sp, r7
 8009956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800995a:	bf00      	nop
 800995c:	51eb851f 	.word	0x51eb851f

08009960 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009964:	4904      	ldr	r1, [pc, #16]	; (8009978 <MX_FATFS_Init+0x18>)
 8009966:	4805      	ldr	r0, [pc, #20]	; (800997c <MX_FATFS_Init+0x1c>)
 8009968:	f003 f9a2 	bl	800ccb0 <FATFS_LinkDriver>
 800996c:	4603      	mov	r3, r0
 800996e:	461a      	mov	r2, r3
 8009970:	4b03      	ldr	r3, [pc, #12]	; (8009980 <MX_FATFS_Init+0x20>)
 8009972:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009974:	bf00      	nop
 8009976:	bd80      	pop	{r7, pc}
 8009978:	200028e4 	.word	0x200028e4
 800997c:	20000010 	.word	0x20000010
 8009980:	200028e0 	.word	0x200028e0

08009984 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009984:	b480      	push	{r7}
 8009986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009988:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800998a:	4618      	mov	r0, r3
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	4603      	mov	r3, r0
 800999c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 800999e:	79fb      	ldrb	r3, [r7, #7]
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7f8 fb3f 	bl	8002024 <SD_disk_initialize>
 80099a6:	4603      	mov	r3, r0
 80099a8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b082      	sub	sp, #8
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	4603      	mov	r3, r0
 80099ba:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 80099bc:	79fb      	ldrb	r3, [r7, #7]
 80099be:	4618      	mov	r0, r3
 80099c0:	f7f8 fc1c 	bl	80021fc <SD_disk_status>
 80099c4:	4603      	mov	r3, r0
 80099c6:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60b9      	str	r1, [r7, #8]
 80099d8:	607a      	str	r2, [r7, #4]
 80099da:	603b      	str	r3, [r7, #0]
 80099dc:	4603      	mov	r3, r0
 80099de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 80099e0:	7bf8      	ldrb	r0, [r7, #15]
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	68b9      	ldr	r1, [r7, #8]
 80099e8:	f7f8 fc1e 	bl	8002228 <SD_disk_read>
 80099ec:	4603      	mov	r3, r0
 80099ee:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60b9      	str	r1, [r7, #8]
 8009a00:	607a      	str	r2, [r7, #4]
 8009a02:	603b      	str	r3, [r7, #0]
 8009a04:	4603      	mov	r3, r0
 8009a06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8009a08:	7bf8      	ldrb	r0, [r7, #15]
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	68b9      	ldr	r1, [r7, #8]
 8009a10:	f7f8 fc74 	bl	80022fc <SD_disk_write>
 8009a14:	4603      	mov	r3, r0
 8009a16:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	4603      	mov	r3, r0
 8009a28:	603a      	str	r2, [r7, #0]
 8009a2a:	71fb      	strb	r3, [r7, #7]
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8009a30:	79fb      	ldrb	r3, [r7, #7]
 8009a32:	79b9      	ldrb	r1, [r7, #6]
 8009a34:	683a      	ldr	r2, [r7, #0]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7f8 fce4 	bl	8002404 <SD_disk_ioctl>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	4603      	mov	r3, r0
 8009a50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009a52:	79fb      	ldrb	r3, [r7, #7]
 8009a54:	4a08      	ldr	r2, [pc, #32]	; (8009a78 <disk_status+0x30>)
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4413      	add	r3, r2
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	79fa      	ldrb	r2, [r7, #7]
 8009a60:	4905      	ldr	r1, [pc, #20]	; (8009a78 <disk_status+0x30>)
 8009a62:	440a      	add	r2, r1
 8009a64:	7a12      	ldrb	r2, [r2, #8]
 8009a66:	4610      	mov	r0, r2
 8009a68:	4798      	blx	r3
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	20002b10 	.word	0x20002b10

08009a7c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	4603      	mov	r3, r0
 8009a84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009a86:	2300      	movs	r3, #0
 8009a88:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009a8a:	79fb      	ldrb	r3, [r7, #7]
 8009a8c:	4a0d      	ldr	r2, [pc, #52]	; (8009ac4 <disk_initialize+0x48>)
 8009a8e:	5cd3      	ldrb	r3, [r2, r3]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d111      	bne.n	8009ab8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009a94:	79fb      	ldrb	r3, [r7, #7]
 8009a96:	4a0b      	ldr	r2, [pc, #44]	; (8009ac4 <disk_initialize+0x48>)
 8009a98:	2101      	movs	r1, #1
 8009a9a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009a9c:	79fb      	ldrb	r3, [r7, #7]
 8009a9e:	4a09      	ldr	r2, [pc, #36]	; (8009ac4 <disk_initialize+0x48>)
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	4413      	add	r3, r2
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	79fa      	ldrb	r2, [r7, #7]
 8009aaa:	4906      	ldr	r1, [pc, #24]	; (8009ac4 <disk_initialize+0x48>)
 8009aac:	440a      	add	r2, r1
 8009aae:	7a12      	ldrb	r2, [r2, #8]
 8009ab0:	4610      	mov	r0, r2
 8009ab2:	4798      	blx	r3
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	20002b10 	.word	0x20002b10

08009ac8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009ac8:	b590      	push	{r4, r7, lr}
 8009aca:	b087      	sub	sp, #28
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60b9      	str	r1, [r7, #8]
 8009ad0:	607a      	str	r2, [r7, #4]
 8009ad2:	603b      	str	r3, [r7, #0]
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009ad8:	7bfb      	ldrb	r3, [r7, #15]
 8009ada:	4a0a      	ldr	r2, [pc, #40]	; (8009b04 <disk_read+0x3c>)
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	4413      	add	r3, r2
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	689c      	ldr	r4, [r3, #8]
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
 8009ae6:	4a07      	ldr	r2, [pc, #28]	; (8009b04 <disk_read+0x3c>)
 8009ae8:	4413      	add	r3, r2
 8009aea:	7a18      	ldrb	r0, [r3, #8]
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	68b9      	ldr	r1, [r7, #8]
 8009af2:	47a0      	blx	r4
 8009af4:	4603      	mov	r3, r0
 8009af6:	75fb      	strb	r3, [r7, #23]
  return res;
 8009af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	371c      	adds	r7, #28
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd90      	pop	{r4, r7, pc}
 8009b02:	bf00      	nop
 8009b04:	20002b10 	.word	0x20002b10

08009b08 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009b08:	b590      	push	{r4, r7, lr}
 8009b0a:	b087      	sub	sp, #28
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60b9      	str	r1, [r7, #8]
 8009b10:	607a      	str	r2, [r7, #4]
 8009b12:	603b      	str	r3, [r7, #0]
 8009b14:	4603      	mov	r3, r0
 8009b16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009b18:	7bfb      	ldrb	r3, [r7, #15]
 8009b1a:	4a0a      	ldr	r2, [pc, #40]	; (8009b44 <disk_write+0x3c>)
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	4413      	add	r3, r2
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	68dc      	ldr	r4, [r3, #12]
 8009b24:	7bfb      	ldrb	r3, [r7, #15]
 8009b26:	4a07      	ldr	r2, [pc, #28]	; (8009b44 <disk_write+0x3c>)
 8009b28:	4413      	add	r3, r2
 8009b2a:	7a18      	ldrb	r0, [r3, #8]
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	68b9      	ldr	r1, [r7, #8]
 8009b32:	47a0      	blx	r4
 8009b34:	4603      	mov	r3, r0
 8009b36:	75fb      	strb	r3, [r7, #23]
  return res;
 8009b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	371c      	adds	r7, #28
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd90      	pop	{r4, r7, pc}
 8009b42:	bf00      	nop
 8009b44:	20002b10 	.word	0x20002b10

08009b48 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	4603      	mov	r3, r0
 8009b50:	603a      	str	r2, [r7, #0]
 8009b52:	71fb      	strb	r3, [r7, #7]
 8009b54:	460b      	mov	r3, r1
 8009b56:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009b58:	79fb      	ldrb	r3, [r7, #7]
 8009b5a:	4a09      	ldr	r2, [pc, #36]	; (8009b80 <disk_ioctl+0x38>)
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	79fa      	ldrb	r2, [r7, #7]
 8009b66:	4906      	ldr	r1, [pc, #24]	; (8009b80 <disk_ioctl+0x38>)
 8009b68:	440a      	add	r2, r1
 8009b6a:	7a10      	ldrb	r0, [r2, #8]
 8009b6c:	79b9      	ldrb	r1, [r7, #6]
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	4798      	blx	r3
 8009b72:	4603      	mov	r3, r0
 8009b74:	73fb      	strb	r3, [r7, #15]
  return res;
 8009b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	20002b10 	.word	0x20002b10

08009b84 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009b94:	89fb      	ldrh	r3, [r7, #14]
 8009b96:	021b      	lsls	r3, r3, #8
 8009b98:	b21a      	sxth	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	b21b      	sxth	r3, r3
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	b21b      	sxth	r3, r3
 8009ba4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009ba6:	89fb      	ldrh	r3, [r7, #14]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3714      	adds	r7, #20
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	3303      	adds	r3, #3
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	021b      	lsls	r3, r3, #8
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	3202      	adds	r2, #2
 8009bcc:	7812      	ldrb	r2, [r2, #0]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	021b      	lsls	r3, r3, #8
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	3201      	adds	r2, #1
 8009bda:	7812      	ldrb	r2, [r2, #0]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	021b      	lsls	r3, r3, #8
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	7812      	ldrb	r2, [r2, #0]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	60fb      	str	r3, [r7, #12]
	return rv;
 8009bec:	68fb      	ldr	r3, [r7, #12]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3714      	adds	r7, #20
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr

08009bfa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	b083      	sub	sp, #12
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	460b      	mov	r3, r1
 8009c04:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	1c5a      	adds	r2, r3, #1
 8009c0a:	607a      	str	r2, [r7, #4]
 8009c0c:	887a      	ldrh	r2, [r7, #2]
 8009c0e:	b2d2      	uxtb	r2, r2
 8009c10:	701a      	strb	r2, [r3, #0]
 8009c12:	887b      	ldrh	r3, [r7, #2]
 8009c14:	0a1b      	lsrs	r3, r3, #8
 8009c16:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	1c5a      	adds	r2, r3, #1
 8009c1c:	607a      	str	r2, [r7, #4]
 8009c1e:	887a      	ldrh	r2, [r7, #2]
 8009c20:	b2d2      	uxtb	r2, r2
 8009c22:	701a      	strb	r2, [r3, #0]
}
 8009c24:	bf00      	nop
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	1c5a      	adds	r2, r3, #1
 8009c3e:	607a      	str	r2, [r7, #4]
 8009c40:	683a      	ldr	r2, [r7, #0]
 8009c42:	b2d2      	uxtb	r2, r2
 8009c44:	701a      	strb	r2, [r3, #0]
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	0a1b      	lsrs	r3, r3, #8
 8009c4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	1c5a      	adds	r2, r3, #1
 8009c50:	607a      	str	r2, [r7, #4]
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	b2d2      	uxtb	r2, r2
 8009c56:	701a      	strb	r2, [r3, #0]
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	0a1b      	lsrs	r3, r3, #8
 8009c5c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	1c5a      	adds	r2, r3, #1
 8009c62:	607a      	str	r2, [r7, #4]
 8009c64:	683a      	ldr	r2, [r7, #0]
 8009c66:	b2d2      	uxtb	r2, r2
 8009c68:	701a      	strb	r2, [r3, #0]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	0a1b      	lsrs	r3, r3, #8
 8009c6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	1c5a      	adds	r2, r3, #1
 8009c74:	607a      	str	r2, [r7, #4]
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	b2d2      	uxtb	r2, r2
 8009c7a:	701a      	strb	r2, [r3, #0]
}
 8009c7c:	bf00      	nop
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009c88:	b480      	push	{r7}
 8009c8a:	b087      	sub	sp, #28
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00d      	beq.n	8009cbe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	1c53      	adds	r3, r2, #1
 8009ca6:	613b      	str	r3, [r7, #16]
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	1c59      	adds	r1, r3, #1
 8009cac:	6179      	str	r1, [r7, #20]
 8009cae:	7812      	ldrb	r2, [r2, #0]
 8009cb0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	607b      	str	r3, [r7, #4]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1f1      	bne.n	8009ca2 <mem_cpy+0x1a>
	}
}
 8009cbe:	bf00      	nop
 8009cc0:	371c      	adds	r7, #28
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr

08009cca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009cca:	b480      	push	{r7}
 8009ccc:	b087      	sub	sp, #28
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	60f8      	str	r0, [r7, #12]
 8009cd2:	60b9      	str	r1, [r7, #8]
 8009cd4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	1c5a      	adds	r2, r3, #1
 8009cde:	617a      	str	r2, [r7, #20]
 8009ce0:	68ba      	ldr	r2, [r7, #8]
 8009ce2:	b2d2      	uxtb	r2, r2
 8009ce4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	607b      	str	r3, [r7, #4]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1f3      	bne.n	8009cda <mem_set+0x10>
}
 8009cf2:	bf00      	nop
 8009cf4:	bf00      	nop
 8009cf6:	371c      	adds	r7, #28
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009d00:	b480      	push	{r7}
 8009d02:	b089      	sub	sp, #36	; 0x24
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	61fb      	str	r3, [r7, #28]
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009d14:	2300      	movs	r3, #0
 8009d16:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	1c5a      	adds	r2, r3, #1
 8009d1c:	61fa      	str	r2, [r7, #28]
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	4619      	mov	r1, r3
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	1c5a      	adds	r2, r3, #1
 8009d26:	61ba      	str	r2, [r7, #24]
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	1acb      	subs	r3, r1, r3
 8009d2c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	3b01      	subs	r3, #1
 8009d32:	607b      	str	r3, [r7, #4]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d002      	beq.n	8009d40 <mem_cmp+0x40>
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d0eb      	beq.n	8009d18 <mem_cmp+0x18>

	return r;
 8009d40:	697b      	ldr	r3, [r7, #20]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3724      	adds	r7, #36	; 0x24
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009d4e:	b480      	push	{r7}
 8009d50:	b083      	sub	sp, #12
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
 8009d56:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009d58:	e002      	b.n	8009d60 <chk_chr+0x12>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	607b      	str	r3, [r7, #4]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d005      	beq.n	8009d74 <chk_chr+0x26>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d1f2      	bne.n	8009d5a <chk_chr+0xc>
	return *str;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	781b      	ldrb	r3, [r3, #0]
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009d8e:	2300      	movs	r3, #0
 8009d90:	60bb      	str	r3, [r7, #8]
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	60fb      	str	r3, [r7, #12]
 8009d96:	e029      	b.n	8009dec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009d98:	4a27      	ldr	r2, [pc, #156]	; (8009e38 <chk_lock+0xb4>)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	011b      	lsls	r3, r3, #4
 8009d9e:	4413      	add	r3, r2
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d01d      	beq.n	8009de2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009da6:	4a24      	ldr	r2, [pc, #144]	; (8009e38 <chk_lock+0xb4>)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	011b      	lsls	r3, r3, #4
 8009dac:	4413      	add	r3, r2
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d116      	bne.n	8009de6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009db8:	4a1f      	ldr	r2, [pc, #124]	; (8009e38 <chk_lock+0xb4>)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	011b      	lsls	r3, r3, #4
 8009dbe:	4413      	add	r3, r2
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d10c      	bne.n	8009de6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009dcc:	4a1a      	ldr	r2, [pc, #104]	; (8009e38 <chk_lock+0xb4>)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	011b      	lsls	r3, r3, #4
 8009dd2:	4413      	add	r3, r2
 8009dd4:	3308      	adds	r3, #8
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d102      	bne.n	8009de6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009de0:	e007      	b.n	8009df2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009de2:	2301      	movs	r3, #1
 8009de4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	3301      	adds	r3, #1
 8009dea:	60fb      	str	r3, [r7, #12]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d9d2      	bls.n	8009d98 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2b02      	cmp	r3, #2
 8009df6:	d109      	bne.n	8009e0c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d102      	bne.n	8009e04 <chk_lock+0x80>
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	d101      	bne.n	8009e08 <chk_lock+0x84>
 8009e04:	2300      	movs	r3, #0
 8009e06:	e010      	b.n	8009e2a <chk_lock+0xa6>
 8009e08:	2312      	movs	r3, #18
 8009e0a:	e00e      	b.n	8009e2a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d108      	bne.n	8009e24 <chk_lock+0xa0>
 8009e12:	4a09      	ldr	r2, [pc, #36]	; (8009e38 <chk_lock+0xb4>)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	011b      	lsls	r3, r3, #4
 8009e18:	4413      	add	r3, r2
 8009e1a:	330c      	adds	r3, #12
 8009e1c:	881b      	ldrh	r3, [r3, #0]
 8009e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e22:	d101      	bne.n	8009e28 <chk_lock+0xa4>
 8009e24:	2310      	movs	r3, #16
 8009e26:	e000      	b.n	8009e2a <chk_lock+0xa6>
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3714      	adds	r7, #20
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop
 8009e38:	200028f0 	.word	0x200028f0

08009e3c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009e42:	2300      	movs	r3, #0
 8009e44:	607b      	str	r3, [r7, #4]
 8009e46:	e002      	b.n	8009e4e <enq_lock+0x12>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	607b      	str	r3, [r7, #4]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d806      	bhi.n	8009e62 <enq_lock+0x26>
 8009e54:	4a09      	ldr	r2, [pc, #36]	; (8009e7c <enq_lock+0x40>)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	011b      	lsls	r3, r3, #4
 8009e5a:	4413      	add	r3, r2
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d1f2      	bne.n	8009e48 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2b02      	cmp	r3, #2
 8009e66:	bf14      	ite	ne
 8009e68:	2301      	movne	r3, #1
 8009e6a:	2300      	moveq	r3, #0
 8009e6c:	b2db      	uxtb	r3, r3
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	200028f0 	.word	0x200028f0

08009e80 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	60fb      	str	r3, [r7, #12]
 8009e8e:	e01f      	b.n	8009ed0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009e90:	4a41      	ldr	r2, [pc, #260]	; (8009f98 <inc_lock+0x118>)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	011b      	lsls	r3, r3, #4
 8009e96:	4413      	add	r3, r2
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d113      	bne.n	8009eca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009ea2:	4a3d      	ldr	r2, [pc, #244]	; (8009f98 <inc_lock+0x118>)
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	011b      	lsls	r3, r3, #4
 8009ea8:	4413      	add	r3, r2
 8009eaa:	3304      	adds	r3, #4
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d109      	bne.n	8009eca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009eb6:	4a38      	ldr	r2, [pc, #224]	; (8009f98 <inc_lock+0x118>)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	011b      	lsls	r3, r3, #4
 8009ebc:	4413      	add	r3, r2
 8009ebe:	3308      	adds	r3, #8
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d006      	beq.n	8009ed8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	60fb      	str	r3, [r7, #12]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d9dc      	bls.n	8009e90 <inc_lock+0x10>
 8009ed6:	e000      	b.n	8009eda <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009ed8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d132      	bne.n	8009f46 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	60fb      	str	r3, [r7, #12]
 8009ee4:	e002      	b.n	8009eec <inc_lock+0x6c>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	60fb      	str	r3, [r7, #12]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d806      	bhi.n	8009f00 <inc_lock+0x80>
 8009ef2:	4a29      	ldr	r2, [pc, #164]	; (8009f98 <inc_lock+0x118>)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	011b      	lsls	r3, r3, #4
 8009ef8:	4413      	add	r3, r2
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d1f2      	bne.n	8009ee6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	d101      	bne.n	8009f0a <inc_lock+0x8a>
 8009f06:	2300      	movs	r3, #0
 8009f08:	e040      	b.n	8009f8c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	4922      	ldr	r1, [pc, #136]	; (8009f98 <inc_lock+0x118>)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	011b      	lsls	r3, r3, #4
 8009f14:	440b      	add	r3, r1
 8009f16:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	689a      	ldr	r2, [r3, #8]
 8009f1c:	491e      	ldr	r1, [pc, #120]	; (8009f98 <inc_lock+0x118>)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	011b      	lsls	r3, r3, #4
 8009f22:	440b      	add	r3, r1
 8009f24:	3304      	adds	r3, #4
 8009f26:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	695a      	ldr	r2, [r3, #20]
 8009f2c:	491a      	ldr	r1, [pc, #104]	; (8009f98 <inc_lock+0x118>)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	011b      	lsls	r3, r3, #4
 8009f32:	440b      	add	r3, r1
 8009f34:	3308      	adds	r3, #8
 8009f36:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009f38:	4a17      	ldr	r2, [pc, #92]	; (8009f98 <inc_lock+0x118>)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	011b      	lsls	r3, r3, #4
 8009f3e:	4413      	add	r3, r2
 8009f40:	330c      	adds	r3, #12
 8009f42:	2200      	movs	r2, #0
 8009f44:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d009      	beq.n	8009f60 <inc_lock+0xe0>
 8009f4c:	4a12      	ldr	r2, [pc, #72]	; (8009f98 <inc_lock+0x118>)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	011b      	lsls	r3, r3, #4
 8009f52:	4413      	add	r3, r2
 8009f54:	330c      	adds	r3, #12
 8009f56:	881b      	ldrh	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d001      	beq.n	8009f60 <inc_lock+0xe0>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	e015      	b.n	8009f8c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d108      	bne.n	8009f78 <inc_lock+0xf8>
 8009f66:	4a0c      	ldr	r2, [pc, #48]	; (8009f98 <inc_lock+0x118>)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	011b      	lsls	r3, r3, #4
 8009f6c:	4413      	add	r3, r2
 8009f6e:	330c      	adds	r3, #12
 8009f70:	881b      	ldrh	r3, [r3, #0]
 8009f72:	3301      	adds	r3, #1
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	e001      	b.n	8009f7c <inc_lock+0xfc>
 8009f78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f7c:	4906      	ldr	r1, [pc, #24]	; (8009f98 <inc_lock+0x118>)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	011b      	lsls	r3, r3, #4
 8009f82:	440b      	add	r3, r1
 8009f84:	330c      	adds	r3, #12
 8009f86:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	3301      	adds	r3, #1
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3714      	adds	r7, #20
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr
 8009f98:	200028f0 	.word	0x200028f0

08009f9c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	607b      	str	r3, [r7, #4]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d825      	bhi.n	8009ffc <dec_lock+0x60>
		n = Files[i].ctr;
 8009fb0:	4a17      	ldr	r2, [pc, #92]	; (800a010 <dec_lock+0x74>)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	011b      	lsls	r3, r3, #4
 8009fb6:	4413      	add	r3, r2
 8009fb8:	330c      	adds	r3, #12
 8009fba:	881b      	ldrh	r3, [r3, #0]
 8009fbc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009fbe:	89fb      	ldrh	r3, [r7, #14]
 8009fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fc4:	d101      	bne.n	8009fca <dec_lock+0x2e>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009fca:	89fb      	ldrh	r3, [r7, #14]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d002      	beq.n	8009fd6 <dec_lock+0x3a>
 8009fd0:	89fb      	ldrh	r3, [r7, #14]
 8009fd2:	3b01      	subs	r3, #1
 8009fd4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009fd6:	4a0e      	ldr	r2, [pc, #56]	; (800a010 <dec_lock+0x74>)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	011b      	lsls	r3, r3, #4
 8009fdc:	4413      	add	r3, r2
 8009fde:	330c      	adds	r3, #12
 8009fe0:	89fa      	ldrh	r2, [r7, #14]
 8009fe2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009fe4:	89fb      	ldrh	r3, [r7, #14]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d105      	bne.n	8009ff6 <dec_lock+0x5a>
 8009fea:	4a09      	ldr	r2, [pc, #36]	; (800a010 <dec_lock+0x74>)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	011b      	lsls	r3, r3, #4
 8009ff0:	4413      	add	r3, r2
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	737b      	strb	r3, [r7, #13]
 8009ffa:	e001      	b.n	800a000 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a000:	7b7b      	ldrb	r3, [r7, #13]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3714      	adds	r7, #20
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	200028f0 	.word	0x200028f0

0800a014 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a01c:	2300      	movs	r3, #0
 800a01e:	60fb      	str	r3, [r7, #12]
 800a020:	e010      	b.n	800a044 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a022:	4a0d      	ldr	r2, [pc, #52]	; (800a058 <clear_lock+0x44>)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	011b      	lsls	r3, r3, #4
 800a028:	4413      	add	r3, r2
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d105      	bne.n	800a03e <clear_lock+0x2a>
 800a032:	4a09      	ldr	r2, [pc, #36]	; (800a058 <clear_lock+0x44>)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	011b      	lsls	r3, r3, #4
 800a038:	4413      	add	r3, r2
 800a03a:	2200      	movs	r2, #0
 800a03c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	3301      	adds	r3, #1
 800a042:	60fb      	str	r3, [r7, #12]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2b01      	cmp	r3, #1
 800a048:	d9eb      	bls.n	800a022 <clear_lock+0xe>
	}
}
 800a04a:	bf00      	nop
 800a04c:	bf00      	nop
 800a04e:	3714      	adds	r7, #20
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	200028f0 	.word	0x200028f0

0800a05c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b086      	sub	sp, #24
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a064:	2300      	movs	r3, #0
 800a066:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	78db      	ldrb	r3, [r3, #3]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d034      	beq.n	800a0da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a074:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	7858      	ldrb	r0, [r3, #1]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a080:	2301      	movs	r3, #1
 800a082:	697a      	ldr	r2, [r7, #20]
 800a084:	f7ff fd40 	bl	8009b08 <disk_write>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d002      	beq.n	800a094 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a08e:	2301      	movs	r3, #1
 800a090:	73fb      	strb	r3, [r7, #15]
 800a092:	e022      	b.n	800a0da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a09e:	697a      	ldr	r2, [r7, #20]
 800a0a0:	1ad2      	subs	r2, r2, r3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d217      	bcs.n	800a0da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	789b      	ldrb	r3, [r3, #2]
 800a0ae:	613b      	str	r3, [r7, #16]
 800a0b0:	e010      	b.n	800a0d4 <sync_window+0x78>
					wsect += fs->fsize;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a1b      	ldr	r3, [r3, #32]
 800a0b6:	697a      	ldr	r2, [r7, #20]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	7858      	ldrb	r0, [r3, #1]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	697a      	ldr	r2, [r7, #20]
 800a0ca:	f7ff fd1d 	bl	8009b08 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	613b      	str	r3, [r7, #16]
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d8eb      	bhi.n	800a0b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3718      	adds	r7, #24
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d01b      	beq.n	800a134 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f7ff ffad 	bl	800a05c <sync_window>
 800a102:	4603      	mov	r3, r0
 800a104:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a106:	7bfb      	ldrb	r3, [r7, #15]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d113      	bne.n	800a134 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	7858      	ldrb	r0, [r3, #1]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a116:	2301      	movs	r3, #1
 800a118:	683a      	ldr	r2, [r7, #0]
 800a11a:	f7ff fcd5 	bl	8009ac8 <disk_read>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d004      	beq.n	800a12e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a124:	f04f 33ff 	mov.w	r3, #4294967295
 800a128:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	683a      	ldr	r2, [r7, #0]
 800a132:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800a134:	7bfb      	ldrb	r3, [r7, #15]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
	...

0800a140 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f7ff ff87 	bl	800a05c <sync_window>
 800a14e:	4603      	mov	r3, r0
 800a150:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a152:	7bfb      	ldrb	r3, [r7, #15]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d159      	bne.n	800a20c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	2b03      	cmp	r3, #3
 800a15e:	d149      	bne.n	800a1f4 <sync_fs+0xb4>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	791b      	ldrb	r3, [r3, #4]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d145      	bne.n	800a1f4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	899b      	ldrh	r3, [r3, #12]
 800a172:	461a      	mov	r2, r3
 800a174:	2100      	movs	r1, #0
 800a176:	f7ff fda8 	bl	8009cca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	3338      	adds	r3, #56	; 0x38
 800a17e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a182:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a186:	4618      	mov	r0, r3
 800a188:	f7ff fd37 	bl	8009bfa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	3338      	adds	r3, #56	; 0x38
 800a190:	4921      	ldr	r1, [pc, #132]	; (800a218 <sync_fs+0xd8>)
 800a192:	4618      	mov	r0, r3
 800a194:	f7ff fd4c 	bl	8009c30 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	3338      	adds	r3, #56	; 0x38
 800a19c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a1a0:	491e      	ldr	r1, [pc, #120]	; (800a21c <sync_fs+0xdc>)
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7ff fd44 	bl	8009c30 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	3338      	adds	r3, #56	; 0x38
 800a1ac:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	4610      	mov	r0, r2
 800a1b8:	f7ff fd3a 	bl	8009c30 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	3338      	adds	r3, #56	; 0x38
 800a1c0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	695b      	ldr	r3, [r3, #20]
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	4610      	mov	r0, r2
 800a1cc:	f7ff fd30 	bl	8009c30 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d4:	1c5a      	adds	r2, r3, #1
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	7858      	ldrb	r0, [r3, #1]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	f7ff fc8d 	bl	8009b08 <disk_write>
			fs->fsi_flag = 0;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	785b      	ldrb	r3, [r3, #1]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7ff fca3 	bl	8009b48 <disk_ioctl>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <sync_fs+0xcc>
 800a208:	2301      	movs	r3, #1
 800a20a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	41615252 	.word	0x41615252
 800a21c:	61417272 	.word	0x61417272

0800a220 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	3b02      	subs	r3, #2
 800a22e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	69db      	ldr	r3, [r3, #28]
 800a234:	3b02      	subs	r3, #2
 800a236:	683a      	ldr	r2, [r7, #0]
 800a238:	429a      	cmp	r2, r3
 800a23a:	d301      	bcc.n	800a240 <clust2sect+0x20>
 800a23c:	2300      	movs	r3, #0
 800a23e:	e008      	b.n	800a252 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	895b      	ldrh	r3, [r3, #10]
 800a244:	461a      	mov	r2, r3
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	fb03 f202 	mul.w	r2, r3, r2
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a250:	4413      	add	r3, r2
}
 800a252:	4618      	mov	r0, r3
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b086      	sub	sp, #24
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
 800a266:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	2b01      	cmp	r3, #1
 800a272:	d904      	bls.n	800a27e <get_fat+0x20>
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	69db      	ldr	r3, [r3, #28]
 800a278:	683a      	ldr	r2, [r7, #0]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d302      	bcc.n	800a284 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a27e:	2301      	movs	r3, #1
 800a280:	617b      	str	r3, [r7, #20]
 800a282:	e0bb      	b.n	800a3fc <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a284:	f04f 33ff 	mov.w	r3, #4294967295
 800a288:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	2b03      	cmp	r3, #3
 800a290:	f000 8083 	beq.w	800a39a <get_fat+0x13c>
 800a294:	2b03      	cmp	r3, #3
 800a296:	f300 80a7 	bgt.w	800a3e8 <get_fat+0x18a>
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d002      	beq.n	800a2a4 <get_fat+0x46>
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d056      	beq.n	800a350 <get_fat+0xf2>
 800a2a2:	e0a1      	b.n	800a3e8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	60fb      	str	r3, [r7, #12]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	085b      	lsrs	r3, r3, #1
 800a2ac:	68fa      	ldr	r2, [r7, #12]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	899b      	ldrh	r3, [r3, #12]
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	fbb3 f3f1 	udiv	r3, r3, r1
 800a2c2:	4413      	add	r3, r2
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	6938      	ldr	r0, [r7, #16]
 800a2c8:	f7ff ff0c 	bl	800a0e4 <move_window>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	f040 808d 	bne.w	800a3ee <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	1c5a      	adds	r2, r3, #1
 800a2d8:	60fa      	str	r2, [r7, #12]
 800a2da:	693a      	ldr	r2, [r7, #16]
 800a2dc:	8992      	ldrh	r2, [r2, #12]
 800a2de:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2e2:	fb01 f202 	mul.w	r2, r1, r2
 800a2e6:	1a9b      	subs	r3, r3, r2
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a2f0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	899b      	ldrh	r3, [r3, #12]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	fbb3 f3f1 	udiv	r3, r3, r1
 800a302:	4413      	add	r3, r2
 800a304:	4619      	mov	r1, r3
 800a306:	6938      	ldr	r0, [r7, #16]
 800a308:	f7ff feec 	bl	800a0e4 <move_window>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d16f      	bne.n	800a3f2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	899b      	ldrh	r3, [r3, #12]
 800a316:	461a      	mov	r2, r3
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a31e:	fb01 f202 	mul.w	r2, r1, r2
 800a322:	1a9b      	subs	r3, r3, r2
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	4413      	add	r3, r2
 800a328:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a32c:	021b      	lsls	r3, r3, #8
 800a32e:	461a      	mov	r2, r3
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	4313      	orrs	r3, r2
 800a334:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	f003 0301 	and.w	r3, r3, #1
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d002      	beq.n	800a346 <get_fat+0xe8>
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	091b      	lsrs	r3, r3, #4
 800a344:	e002      	b.n	800a34c <get_fat+0xee>
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a34c:	617b      	str	r3, [r7, #20]
			break;
 800a34e:	e055      	b.n	800a3fc <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	899b      	ldrh	r3, [r3, #12]
 800a358:	085b      	lsrs	r3, r3, #1
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	4619      	mov	r1, r3
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	fbb3 f3f1 	udiv	r3, r3, r1
 800a364:	4413      	add	r3, r2
 800a366:	4619      	mov	r1, r3
 800a368:	6938      	ldr	r0, [r7, #16]
 800a36a:	f7ff febb 	bl	800a0e4 <move_window>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d140      	bne.n	800a3f6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	005b      	lsls	r3, r3, #1
 800a37e:	693a      	ldr	r2, [r7, #16]
 800a380:	8992      	ldrh	r2, [r2, #12]
 800a382:	fbb3 f0f2 	udiv	r0, r3, r2
 800a386:	fb00 f202 	mul.w	r2, r0, r2
 800a38a:	1a9b      	subs	r3, r3, r2
 800a38c:	440b      	add	r3, r1
 800a38e:	4618      	mov	r0, r3
 800a390:	f7ff fbf8 	bl	8009b84 <ld_word>
 800a394:	4603      	mov	r3, r0
 800a396:	617b      	str	r3, [r7, #20]
			break;
 800a398:	e030      	b.n	800a3fc <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	899b      	ldrh	r3, [r3, #12]
 800a3a2:	089b      	lsrs	r3, r3, #2
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3ae:	4413      	add	r3, r2
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	6938      	ldr	r0, [r7, #16]
 800a3b4:	f7ff fe96 	bl	800a0e4 <move_window>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d11d      	bne.n	800a3fa <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	693a      	ldr	r2, [r7, #16]
 800a3ca:	8992      	ldrh	r2, [r2, #12]
 800a3cc:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3d0:	fb00 f202 	mul.w	r2, r0, r2
 800a3d4:	1a9b      	subs	r3, r3, r2
 800a3d6:	440b      	add	r3, r1
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7ff fbeb 	bl	8009bb4 <ld_dword>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a3e4:	617b      	str	r3, [r7, #20]
			break;
 800a3e6:	e009      	b.n	800a3fc <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	617b      	str	r3, [r7, #20]
 800a3ec:	e006      	b.n	800a3fc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a3ee:	bf00      	nop
 800a3f0:	e004      	b.n	800a3fc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a3f2:	bf00      	nop
 800a3f4:	e002      	b.n	800a3fc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a3f6:	bf00      	nop
 800a3f8:	e000      	b.n	800a3fc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a3fa:	bf00      	nop
		}
	}

	return val;
 800a3fc:	697b      	ldr	r3, [r7, #20]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3718      	adds	r7, #24
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a406:	b590      	push	{r4, r7, lr}
 800a408:	b089      	sub	sp, #36	; 0x24
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	60f8      	str	r0, [r7, #12]
 800a40e:	60b9      	str	r1, [r7, #8]
 800a410:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a412:	2302      	movs	r3, #2
 800a414:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	f240 8102 	bls.w	800a622 <put_fat+0x21c>
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	429a      	cmp	r2, r3
 800a426:	f080 80fc 	bcs.w	800a622 <put_fat+0x21c>
		switch (fs->fs_type) {
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	2b03      	cmp	r3, #3
 800a430:	f000 80b6 	beq.w	800a5a0 <put_fat+0x19a>
 800a434:	2b03      	cmp	r3, #3
 800a436:	f300 80fd 	bgt.w	800a634 <put_fat+0x22e>
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d003      	beq.n	800a446 <put_fat+0x40>
 800a43e:	2b02      	cmp	r3, #2
 800a440:	f000 8083 	beq.w	800a54a <put_fat+0x144>
 800a444:	e0f6      	b.n	800a634 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	61bb      	str	r3, [r7, #24]
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	085b      	lsrs	r3, r3, #1
 800a44e:	69ba      	ldr	r2, [r7, #24]
 800a450:	4413      	add	r3, r2
 800a452:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	899b      	ldrh	r3, [r3, #12]
 800a45c:	4619      	mov	r1, r3
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	fbb3 f3f1 	udiv	r3, r3, r1
 800a464:	4413      	add	r3, r2
 800a466:	4619      	mov	r1, r3
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f7ff fe3b 	bl	800a0e4 <move_window>
 800a46e:	4603      	mov	r3, r0
 800a470:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a472:	7ffb      	ldrb	r3, [r7, #31]
 800a474:	2b00      	cmp	r3, #0
 800a476:	f040 80d6 	bne.w	800a626 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	1c5a      	adds	r2, r3, #1
 800a484:	61ba      	str	r2, [r7, #24]
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	8992      	ldrh	r2, [r2, #12]
 800a48a:	fbb3 f0f2 	udiv	r0, r3, r2
 800a48e:	fb00 f202 	mul.w	r2, r0, r2
 800a492:	1a9b      	subs	r3, r3, r2
 800a494:	440b      	add	r3, r1
 800a496:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	f003 0301 	and.w	r3, r3, #1
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d00d      	beq.n	800a4be <put_fat+0xb8>
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	b25b      	sxtb	r3, r3
 800a4a8:	f003 030f 	and.w	r3, r3, #15
 800a4ac:	b25a      	sxtb	r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	011b      	lsls	r3, r3, #4
 800a4b4:	b25b      	sxtb	r3, r3
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	b25b      	sxtb	r3, r3
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	e001      	b.n	800a4c2 <put_fat+0xbc>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	697a      	ldr	r2, [r7, #20]
 800a4c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	899b      	ldrh	r3, [r3, #12]
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	fbb3 f3f1 	udiv	r3, r3, r1
 800a4dc:	4413      	add	r3, r2
 800a4de:	4619      	mov	r1, r3
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f7ff fdff 	bl	800a0e4 <move_window>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4ea:	7ffb      	ldrb	r3, [r7, #31]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f040 809c 	bne.w	800a62a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	899b      	ldrh	r3, [r3, #12]
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	fbb3 f0f2 	udiv	r0, r3, r2
 800a504:	fb00 f202 	mul.w	r2, r0, r2
 800a508:	1a9b      	subs	r3, r3, r2
 800a50a:	440b      	add	r3, r1
 800a50c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	f003 0301 	and.w	r3, r3, #1
 800a514:	2b00      	cmp	r3, #0
 800a516:	d003      	beq.n	800a520 <put_fat+0x11a>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	091b      	lsrs	r3, r3, #4
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	e00e      	b.n	800a53e <put_fat+0x138>
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	b25b      	sxtb	r3, r3
 800a526:	f023 030f 	bic.w	r3, r3, #15
 800a52a:	b25a      	sxtb	r2, r3
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	0a1b      	lsrs	r3, r3, #8
 800a530:	b25b      	sxtb	r3, r3
 800a532:	f003 030f 	and.w	r3, r3, #15
 800a536:	b25b      	sxtb	r3, r3
 800a538:	4313      	orrs	r3, r2
 800a53a:	b25b      	sxtb	r3, r3
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2201      	movs	r2, #1
 800a546:	70da      	strb	r2, [r3, #3]
			break;
 800a548:	e074      	b.n	800a634 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	899b      	ldrh	r3, [r3, #12]
 800a552:	085b      	lsrs	r3, r3, #1
 800a554:	b29b      	uxth	r3, r3
 800a556:	4619      	mov	r1, r3
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a55e:	4413      	add	r3, r2
 800a560:	4619      	mov	r1, r3
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	f7ff fdbe 	bl	800a0e4 <move_window>
 800a568:	4603      	mov	r3, r0
 800a56a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a56c:	7ffb      	ldrb	r3, [r7, #31]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d15d      	bne.n	800a62e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	005b      	lsls	r3, r3, #1
 800a57c:	68fa      	ldr	r2, [r7, #12]
 800a57e:	8992      	ldrh	r2, [r2, #12]
 800a580:	fbb3 f0f2 	udiv	r0, r3, r2
 800a584:	fb00 f202 	mul.w	r2, r0, r2
 800a588:	1a9b      	subs	r3, r3, r2
 800a58a:	440b      	add	r3, r1
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	b292      	uxth	r2, r2
 800a590:	4611      	mov	r1, r2
 800a592:	4618      	mov	r0, r3
 800a594:	f7ff fb31 	bl	8009bfa <st_word>
			fs->wflag = 1;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2201      	movs	r2, #1
 800a59c:	70da      	strb	r2, [r3, #3]
			break;
 800a59e:	e049      	b.n	800a634 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	899b      	ldrh	r3, [r3, #12]
 800a5a8:	089b      	lsrs	r3, r3, #2
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	fbb3 f3f1 	udiv	r3, r3, r1
 800a5b4:	4413      	add	r3, r2
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f7ff fd93 	bl	800a0e4 <move_window>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a5c2:	7ffb      	ldrb	r3, [r7, #31]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d134      	bne.n	800a632 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	8992      	ldrh	r2, [r2, #12]
 800a5dc:	fbb3 f0f2 	udiv	r0, r3, r2
 800a5e0:	fb00 f202 	mul.w	r2, r0, r2
 800a5e4:	1a9b      	subs	r3, r3, r2
 800a5e6:	440b      	add	r3, r1
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7ff fae3 	bl	8009bb4 <ld_dword>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a5f4:	4323      	orrs	r3, r4
 800a5f6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	68fa      	ldr	r2, [r7, #12]
 800a604:	8992      	ldrh	r2, [r2, #12]
 800a606:	fbb3 f0f2 	udiv	r0, r3, r2
 800a60a:	fb00 f202 	mul.w	r2, r0, r2
 800a60e:	1a9b      	subs	r3, r3, r2
 800a610:	440b      	add	r3, r1
 800a612:	6879      	ldr	r1, [r7, #4]
 800a614:	4618      	mov	r0, r3
 800a616:	f7ff fb0b 	bl	8009c30 <st_dword>
			fs->wflag = 1;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2201      	movs	r2, #1
 800a61e:	70da      	strb	r2, [r3, #3]
			break;
 800a620:	e008      	b.n	800a634 <put_fat+0x22e>
		}
	}
 800a622:	bf00      	nop
 800a624:	e006      	b.n	800a634 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a626:	bf00      	nop
 800a628:	e004      	b.n	800a634 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a62a:	bf00      	nop
 800a62c:	e002      	b.n	800a634 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a62e:	bf00      	nop
 800a630:	e000      	b.n	800a634 <put_fat+0x22e>
			if (res != FR_OK) break;
 800a632:	bf00      	nop
	return res;
 800a634:	7ffb      	ldrb	r3, [r7, #31]
}
 800a636:	4618      	mov	r0, r3
 800a638:	3724      	adds	r7, #36	; 0x24
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd90      	pop	{r4, r7, pc}

0800a63e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b088      	sub	sp, #32
 800a642:	af00      	add	r7, sp, #0
 800a644:	60f8      	str	r0, [r7, #12]
 800a646:	60b9      	str	r1, [r7, #8]
 800a648:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a64a:	2300      	movs	r3, #0
 800a64c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	2b01      	cmp	r3, #1
 800a658:	d904      	bls.n	800a664 <remove_chain+0x26>
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	69db      	ldr	r3, [r3, #28]
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	429a      	cmp	r2, r3
 800a662:	d301      	bcc.n	800a668 <remove_chain+0x2a>
 800a664:	2302      	movs	r3, #2
 800a666:	e04b      	b.n	800a700 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00c      	beq.n	800a688 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a66e:	f04f 32ff 	mov.w	r2, #4294967295
 800a672:	6879      	ldr	r1, [r7, #4]
 800a674:	69b8      	ldr	r0, [r7, #24]
 800a676:	f7ff fec6 	bl	800a406 <put_fat>
 800a67a:	4603      	mov	r3, r0
 800a67c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a67e:	7ffb      	ldrb	r3, [r7, #31]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d001      	beq.n	800a688 <remove_chain+0x4a>
 800a684:	7ffb      	ldrb	r3, [r7, #31]
 800a686:	e03b      	b.n	800a700 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a688:	68b9      	ldr	r1, [r7, #8]
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f7ff fde7 	bl	800a25e <get_fat>
 800a690:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d031      	beq.n	800a6fc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d101      	bne.n	800a6a2 <remove_chain+0x64>
 800a69e:	2302      	movs	r3, #2
 800a6a0:	e02e      	b.n	800a700 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a8:	d101      	bne.n	800a6ae <remove_chain+0x70>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e028      	b.n	800a700 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	68b9      	ldr	r1, [r7, #8]
 800a6b2:	69b8      	ldr	r0, [r7, #24]
 800a6b4:	f7ff fea7 	bl	800a406 <put_fat>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a6bc:	7ffb      	ldrb	r3, [r7, #31]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d001      	beq.n	800a6c6 <remove_chain+0x88>
 800a6c2:	7ffb      	ldrb	r3, [r7, #31]
 800a6c4:	e01c      	b.n	800a700 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	699a      	ldr	r2, [r3, #24]
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	69db      	ldr	r3, [r3, #28]
 800a6ce:	3b02      	subs	r3, #2
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d20b      	bcs.n	800a6ec <remove_chain+0xae>
			fs->free_clst++;
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	699b      	ldr	r3, [r3, #24]
 800a6d8:	1c5a      	adds	r2, r3, #1
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	791b      	ldrb	r3, [r3, #4]
 800a6e2:	f043 0301 	orr.w	r3, r3, #1
 800a6e6:	b2da      	uxtb	r2, r3
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a6f0:	69bb      	ldr	r3, [r7, #24]
 800a6f2:	69db      	ldr	r3, [r3, #28]
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d3c6      	bcc.n	800a688 <remove_chain+0x4a>
 800a6fa:	e000      	b.n	800a6fe <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a6fc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a6fe:	2300      	movs	r3, #0
}
 800a700:	4618      	mov	r0, r3
 800a702:	3720      	adds	r7, #32
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b088      	sub	sp, #32
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d10d      	bne.n	800a73a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	695b      	ldr	r3, [r3, #20]
 800a722:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d004      	beq.n	800a734 <create_chain+0x2c>
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	69db      	ldr	r3, [r3, #28]
 800a72e:	69ba      	ldr	r2, [r7, #24]
 800a730:	429a      	cmp	r2, r3
 800a732:	d31b      	bcc.n	800a76c <create_chain+0x64>
 800a734:	2301      	movs	r3, #1
 800a736:	61bb      	str	r3, [r7, #24]
 800a738:	e018      	b.n	800a76c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a73a:	6839      	ldr	r1, [r7, #0]
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f7ff fd8e 	bl	800a25e <get_fat>
 800a742:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2b01      	cmp	r3, #1
 800a748:	d801      	bhi.n	800a74e <create_chain+0x46>
 800a74a:	2301      	movs	r3, #1
 800a74c:	e070      	b.n	800a830 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a754:	d101      	bne.n	800a75a <create_chain+0x52>
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	e06a      	b.n	800a830 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	69db      	ldr	r3, [r3, #28]
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	429a      	cmp	r2, r3
 800a762:	d201      	bcs.n	800a768 <create_chain+0x60>
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	e063      	b.n	800a830 <create_chain+0x128>
		scl = clst;
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	3301      	adds	r3, #1
 800a774:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	69db      	ldr	r3, [r3, #28]
 800a77a:	69fa      	ldr	r2, [r7, #28]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d307      	bcc.n	800a790 <create_chain+0x88>
				ncl = 2;
 800a780:	2302      	movs	r3, #2
 800a782:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a784:	69fa      	ldr	r2, [r7, #28]
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d901      	bls.n	800a790 <create_chain+0x88>
 800a78c:	2300      	movs	r3, #0
 800a78e:	e04f      	b.n	800a830 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a790:	69f9      	ldr	r1, [r7, #28]
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f7ff fd63 	bl	800a25e <get_fat>
 800a798:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00e      	beq.n	800a7be <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d003      	beq.n	800a7ae <create_chain+0xa6>
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ac:	d101      	bne.n	800a7b2 <create_chain+0xaa>
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	e03e      	b.n	800a830 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a7b2:	69fa      	ldr	r2, [r7, #28]
 800a7b4:	69bb      	ldr	r3, [r7, #24]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d1da      	bne.n	800a770 <create_chain+0x68>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	e038      	b.n	800a830 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a7be:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a7c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a7c4:	69f9      	ldr	r1, [r7, #28]
 800a7c6:	6938      	ldr	r0, [r7, #16]
 800a7c8:	f7ff fe1d 	bl	800a406 <put_fat>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a7d0:	7dfb      	ldrb	r3, [r7, #23]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d109      	bne.n	800a7ea <create_chain+0xe2>
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d006      	beq.n	800a7ea <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a7dc:	69fa      	ldr	r2, [r7, #28]
 800a7de:	6839      	ldr	r1, [r7, #0]
 800a7e0:	6938      	ldr	r0, [r7, #16]
 800a7e2:	f7ff fe10 	bl	800a406 <put_fat>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a7ea:	7dfb      	ldrb	r3, [r7, #23]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d116      	bne.n	800a81e <create_chain+0x116>
		fs->last_clst = ncl;
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	69fa      	ldr	r2, [r7, #28]
 800a7f4:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	699a      	ldr	r2, [r3, #24]
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	69db      	ldr	r3, [r3, #28]
 800a7fe:	3b02      	subs	r3, #2
 800a800:	429a      	cmp	r2, r3
 800a802:	d804      	bhi.n	800a80e <create_chain+0x106>
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	699b      	ldr	r3, [r3, #24]
 800a808:	1e5a      	subs	r2, r3, #1
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	791b      	ldrb	r3, [r3, #4]
 800a812:	f043 0301 	orr.w	r3, r3, #1
 800a816:	b2da      	uxtb	r2, r3
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	711a      	strb	r2, [r3, #4]
 800a81c:	e007      	b.n	800a82e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a81e:	7dfb      	ldrb	r3, [r7, #23]
 800a820:	2b01      	cmp	r3, #1
 800a822:	d102      	bne.n	800a82a <create_chain+0x122>
 800a824:	f04f 33ff 	mov.w	r3, #4294967295
 800a828:	e000      	b.n	800a82c <create_chain+0x124>
 800a82a:	2301      	movs	r3, #1
 800a82c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a82e:	69fb      	ldr	r3, [r7, #28]
}
 800a830:	4618      	mov	r0, r3
 800a832:	3720      	adds	r7, #32
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a838:	b480      	push	{r7}
 800a83a:	b087      	sub	sp, #28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a84c:	3304      	adds	r3, #4
 800a84e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	899b      	ldrh	r3, [r3, #12]
 800a854:	461a      	mov	r2, r3
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	fbb3 f3f2 	udiv	r3, r3, r2
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	8952      	ldrh	r2, [r2, #10]
 800a860:	fbb3 f3f2 	udiv	r3, r3, r2
 800a864:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	1d1a      	adds	r2, r3, #4
 800a86a:	613a      	str	r2, [r7, #16]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d101      	bne.n	800a87a <clmt_clust+0x42>
 800a876:	2300      	movs	r3, #0
 800a878:	e010      	b.n	800a89c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a87a:	697a      	ldr	r2, [r7, #20]
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	429a      	cmp	r2, r3
 800a880:	d307      	bcc.n	800a892 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a882:	697a      	ldr	r2, [r7, #20]
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	1ad3      	subs	r3, r2, r3
 800a888:	617b      	str	r3, [r7, #20]
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	3304      	adds	r3, #4
 800a88e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a890:	e7e9      	b.n	800a866 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a892:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	4413      	add	r3, r2
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	371c      	adds	r7, #28
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b086      	sub	sp, #24
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8be:	d204      	bcs.n	800a8ca <dir_sdi+0x22>
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	f003 031f 	and.w	r3, r3, #31
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <dir_sdi+0x26>
		return FR_INT_ERR;
 800a8ca:	2302      	movs	r3, #2
 800a8cc:	e071      	b.n	800a9b2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	683a      	ldr	r2, [r7, #0]
 800a8d2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d106      	bne.n	800a8ee <dir_sdi+0x46>
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d902      	bls.n	800a8ee <dir_sdi+0x46>
		clst = fs->dirbase;
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ec:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d10c      	bne.n	800a90e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	095b      	lsrs	r3, r3, #5
 800a8f8:	693a      	ldr	r2, [r7, #16]
 800a8fa:	8912      	ldrh	r2, [r2, #8]
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d301      	bcc.n	800a904 <dir_sdi+0x5c>
 800a900:	2302      	movs	r3, #2
 800a902:	e056      	b.n	800a9b2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	61da      	str	r2, [r3, #28]
 800a90c:	e02d      	b.n	800a96a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	895b      	ldrh	r3, [r3, #10]
 800a912:	461a      	mov	r2, r3
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	899b      	ldrh	r3, [r3, #12]
 800a918:	fb02 f303 	mul.w	r3, r2, r3
 800a91c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a91e:	e019      	b.n	800a954 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6979      	ldr	r1, [r7, #20]
 800a924:	4618      	mov	r0, r3
 800a926:	f7ff fc9a 	bl	800a25e <get_fat>
 800a92a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a932:	d101      	bne.n	800a938 <dir_sdi+0x90>
 800a934:	2301      	movs	r3, #1
 800a936:	e03c      	b.n	800a9b2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d904      	bls.n	800a948 <dir_sdi+0xa0>
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	69db      	ldr	r3, [r3, #28]
 800a942:	697a      	ldr	r2, [r7, #20]
 800a944:	429a      	cmp	r2, r3
 800a946:	d301      	bcc.n	800a94c <dir_sdi+0xa4>
 800a948:	2302      	movs	r3, #2
 800a94a:	e032      	b.n	800a9b2 <dir_sdi+0x10a>
			ofs -= csz;
 800a94c:	683a      	ldr	r2, [r7, #0]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a954:	683a      	ldr	r2, [r7, #0]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d2e1      	bcs.n	800a920 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a95c:	6979      	ldr	r1, [r7, #20]
 800a95e:	6938      	ldr	r0, [r7, #16]
 800a960:	f7ff fc5e 	bl	800a220 <clust2sect>
 800a964:	4602      	mov	r2, r0
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	697a      	ldr	r2, [r7, #20]
 800a96e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	69db      	ldr	r3, [r3, #28]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d101      	bne.n	800a97c <dir_sdi+0xd4>
 800a978:	2302      	movs	r3, #2
 800a97a:	e01a      	b.n	800a9b2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	69da      	ldr	r2, [r3, #28]
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	899b      	ldrh	r3, [r3, #12]
 800a984:	4619      	mov	r1, r3
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	fbb3 f3f1 	udiv	r3, r3, r1
 800a98c:	441a      	add	r2, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	899b      	ldrh	r3, [r3, #12]
 800a99c:	461a      	mov	r2, r3
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	fbb3 f0f2 	udiv	r0, r3, r2
 800a9a4:	fb00 f202 	mul.w	r2, r0, r2
 800a9a8:	1a9b      	subs	r3, r3, r2
 800a9aa:	18ca      	adds	r2, r1, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3718      	adds	r7, #24
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b086      	sub	sp, #24
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	695b      	ldr	r3, [r3, #20]
 800a9ce:	3320      	adds	r3, #32
 800a9d0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	69db      	ldr	r3, [r3, #28]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d003      	beq.n	800a9e2 <dir_next+0x28>
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9e0:	d301      	bcc.n	800a9e6 <dir_next+0x2c>
 800a9e2:	2304      	movs	r3, #4
 800a9e4:	e0bb      	b.n	800ab5e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	899b      	ldrh	r3, [r3, #12]
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9f2:	fb01 f202 	mul.w	r2, r1, r2
 800a9f6:	1a9b      	subs	r3, r3, r2
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f040 809d 	bne.w	800ab38 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	69db      	ldr	r3, [r3, #28]
 800aa02:	1c5a      	adds	r2, r3, #1
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	699b      	ldr	r3, [r3, #24]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d10b      	bne.n	800aa28 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	095b      	lsrs	r3, r3, #5
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	8912      	ldrh	r2, [r2, #8]
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	f0c0 808d 	bcc.w	800ab38 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	61da      	str	r2, [r3, #28]
 800aa24:	2304      	movs	r3, #4
 800aa26:	e09a      	b.n	800ab5e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	899b      	ldrh	r3, [r3, #12]
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	8952      	ldrh	r2, [r2, #10]
 800aa38:	3a01      	subs	r2, #1
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d17b      	bne.n	800ab38 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	699b      	ldr	r3, [r3, #24]
 800aa46:	4619      	mov	r1, r3
 800aa48:	4610      	mov	r0, r2
 800aa4a:	f7ff fc08 	bl	800a25e <get_fat>
 800aa4e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d801      	bhi.n	800aa5a <dir_next+0xa0>
 800aa56:	2302      	movs	r3, #2
 800aa58:	e081      	b.n	800ab5e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa60:	d101      	bne.n	800aa66 <dir_next+0xac>
 800aa62:	2301      	movs	r3, #1
 800aa64:	e07b      	b.n	800ab5e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	69db      	ldr	r3, [r3, #28]
 800aa6a:	697a      	ldr	r2, [r7, #20]
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d359      	bcc.n	800ab24 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d104      	bne.n	800aa80 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	61da      	str	r2, [r3, #28]
 800aa7c:	2304      	movs	r3, #4
 800aa7e:	e06e      	b.n	800ab5e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	699b      	ldr	r3, [r3, #24]
 800aa86:	4619      	mov	r1, r3
 800aa88:	4610      	mov	r0, r2
 800aa8a:	f7ff fe3d 	bl	800a708 <create_chain>
 800aa8e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d101      	bne.n	800aa9a <dir_next+0xe0>
 800aa96:	2307      	movs	r3, #7
 800aa98:	e061      	b.n	800ab5e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d101      	bne.n	800aaa4 <dir_next+0xea>
 800aaa0:	2302      	movs	r3, #2
 800aaa2:	e05c      	b.n	800ab5e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaaa:	d101      	bne.n	800aab0 <dir_next+0xf6>
 800aaac:	2301      	movs	r3, #1
 800aaae:	e056      	b.n	800ab5e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f7ff fad3 	bl	800a05c <sync_window>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d001      	beq.n	800aac0 <dir_next+0x106>
 800aabc:	2301      	movs	r3, #1
 800aabe:	e04e      	b.n	800ab5e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	899b      	ldrh	r3, [r3, #12]
 800aaca:	461a      	mov	r2, r3
 800aacc:	2100      	movs	r1, #0
 800aace:	f7ff f8fc 	bl	8009cca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aad2:	2300      	movs	r3, #0
 800aad4:	613b      	str	r3, [r7, #16]
 800aad6:	6979      	ldr	r1, [r7, #20]
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f7ff fba1 	bl	800a220 <clust2sect>
 800aade:	4602      	mov	r2, r0
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	635a      	str	r2, [r3, #52]	; 0x34
 800aae4:	e012      	b.n	800ab0c <dir_next+0x152>
						fs->wflag = 1;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2201      	movs	r2, #1
 800aaea:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f7ff fab5 	bl	800a05c <sync_window>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d001      	beq.n	800aafc <dir_next+0x142>
 800aaf8:	2301      	movs	r3, #1
 800aafa:	e030      	b.n	800ab5e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	3301      	adds	r3, #1
 800ab00:	613b      	str	r3, [r7, #16]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab06:	1c5a      	adds	r2, r3, #1
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	635a      	str	r2, [r3, #52]	; 0x34
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	895b      	ldrh	r3, [r3, #10]
 800ab10:	461a      	mov	r2, r3
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d3e6      	bcc.n	800aae6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	1ad2      	subs	r2, r2, r3
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	697a      	ldr	r2, [r7, #20]
 800ab28:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ab2a:	6979      	ldr	r1, [r7, #20]
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	f7ff fb77 	bl	800a220 <clust2sect>
 800ab32:	4602      	mov	r2, r0
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	899b      	ldrh	r3, [r3, #12]
 800ab48:	461a      	mov	r2, r3
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab50:	fb00 f202 	mul.w	r2, r0, r2
 800ab54:	1a9b      	subs	r3, r3, r2
 800ab56:	18ca      	adds	r2, r1, r3
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3718      	adds	r7, #24
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b086      	sub	sp, #24
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ab76:	2100      	movs	r1, #0
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f7ff fe95 	bl	800a8a8 <dir_sdi>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ab82:	7dfb      	ldrb	r3, [r7, #23]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d12b      	bne.n	800abe0 <dir_alloc+0x7a>
		n = 0;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	69db      	ldr	r3, [r3, #28]
 800ab90:	4619      	mov	r1, r3
 800ab92:	68f8      	ldr	r0, [r7, #12]
 800ab94:	f7ff faa6 	bl	800a0e4 <move_window>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ab9c:	7dfb      	ldrb	r3, [r7, #23]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d11d      	bne.n	800abde <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a1b      	ldr	r3, [r3, #32]
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	2be5      	cmp	r3, #229	; 0xe5
 800abaa:	d004      	beq.n	800abb6 <dir_alloc+0x50>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6a1b      	ldr	r3, [r3, #32]
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d107      	bne.n	800abc6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	3301      	adds	r3, #1
 800abba:	613b      	str	r3, [r7, #16]
 800abbc:	693a      	ldr	r2, [r7, #16]
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d102      	bne.n	800abca <dir_alloc+0x64>
 800abc4:	e00c      	b.n	800abe0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800abc6:	2300      	movs	r3, #0
 800abc8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800abca:	2101      	movs	r1, #1
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f7ff fef4 	bl	800a9ba <dir_next>
 800abd2:	4603      	mov	r3, r0
 800abd4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800abd6:	7dfb      	ldrb	r3, [r7, #23]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d0d7      	beq.n	800ab8c <dir_alloc+0x26>
 800abdc:	e000      	b.n	800abe0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800abde:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800abe0:	7dfb      	ldrb	r3, [r7, #23]
 800abe2:	2b04      	cmp	r3, #4
 800abe4:	d101      	bne.n	800abea <dir_alloc+0x84>
 800abe6:	2307      	movs	r3, #7
 800abe8:	75fb      	strb	r3, [r7, #23]
	return res;
 800abea:	7dfb      	ldrb	r3, [r7, #23]
}
 800abec:	4618      	mov	r0, r3
 800abee:	3718      	adds	r7, #24
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	331a      	adds	r3, #26
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7fe ffbe 	bl	8009b84 <ld_word>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	2b03      	cmp	r3, #3
 800ac12:	d109      	bne.n	800ac28 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	3314      	adds	r3, #20
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7fe ffb3 	bl	8009b84 <ld_word>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	041b      	lsls	r3, r3, #16
 800ac22:	68fa      	ldr	r2, [r7, #12]
 800ac24:	4313      	orrs	r3, r2
 800ac26:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ac28:	68fb      	ldr	r3, [r7, #12]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}

0800ac32 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b084      	sub	sp, #16
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	60f8      	str	r0, [r7, #12]
 800ac3a:	60b9      	str	r1, [r7, #8]
 800ac3c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	331a      	adds	r3, #26
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	b292      	uxth	r2, r2
 800ac46:	4611      	mov	r1, r2
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7fe ffd6 	bl	8009bfa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	2b03      	cmp	r3, #3
 800ac54:	d109      	bne.n	800ac6a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	f103 0214 	add.w	r2, r3, #20
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	0c1b      	lsrs	r3, r3, #16
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	4619      	mov	r1, r3
 800ac64:	4610      	mov	r0, r2
 800ac66:	f7fe ffc8 	bl	8009bfa <st_word>
	}
}
 800ac6a:	bf00      	nop
 800ac6c:	3710      	adds	r7, #16
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
	...

0800ac74 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ac74:	b590      	push	{r4, r7, lr}
 800ac76:	b087      	sub	sp, #28
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	331a      	adds	r3, #26
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7fe ff7e 	bl	8009b84 <ld_word>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d001      	beq.n	800ac92 <cmp_lfn+0x1e>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	e059      	b.n	800ad46 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac9a:	1e5a      	subs	r2, r3, #1
 800ac9c:	4613      	mov	r3, r2
 800ac9e:	005b      	lsls	r3, r3, #1
 800aca0:	4413      	add	r3, r2
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	4413      	add	r3, r2
 800aca6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800aca8:	2301      	movs	r3, #1
 800acaa:	81fb      	strh	r3, [r7, #14]
 800acac:	2300      	movs	r3, #0
 800acae:	613b      	str	r3, [r7, #16]
 800acb0:	e033      	b.n	800ad1a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800acb2:	4a27      	ldr	r2, [pc, #156]	; (800ad50 <cmp_lfn+0xdc>)
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	4413      	add	r3, r2
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	461a      	mov	r2, r3
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	4413      	add	r3, r2
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7fe ff5f 	bl	8009b84 <ld_word>
 800acc6:	4603      	mov	r3, r0
 800acc8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800acca:	89fb      	ldrh	r3, [r7, #14]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d01a      	beq.n	800ad06 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	2bfe      	cmp	r3, #254	; 0xfe
 800acd4:	d812      	bhi.n	800acfc <cmp_lfn+0x88>
 800acd6:	89bb      	ldrh	r3, [r7, #12]
 800acd8:	4618      	mov	r0, r3
 800acda:	f002 f835 	bl	800cd48 <ff_wtoupper>
 800acde:	4603      	mov	r3, r0
 800ace0:	461c      	mov	r4, r3
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	1c5a      	adds	r2, r3, #1
 800ace6:	617a      	str	r2, [r7, #20]
 800ace8:	005b      	lsls	r3, r3, #1
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	4413      	add	r3, r2
 800acee:	881b      	ldrh	r3, [r3, #0]
 800acf0:	4618      	mov	r0, r3
 800acf2:	f002 f829 	bl	800cd48 <ff_wtoupper>
 800acf6:	4603      	mov	r3, r0
 800acf8:	429c      	cmp	r4, r3
 800acfa:	d001      	beq.n	800ad00 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800acfc:	2300      	movs	r3, #0
 800acfe:	e022      	b.n	800ad46 <cmp_lfn+0xd2>
			}
			wc = uc;
 800ad00:	89bb      	ldrh	r3, [r7, #12]
 800ad02:	81fb      	strh	r3, [r7, #14]
 800ad04:	e006      	b.n	800ad14 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ad06:	89bb      	ldrh	r3, [r7, #12]
 800ad08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d001      	beq.n	800ad14 <cmp_lfn+0xa0>
 800ad10:	2300      	movs	r3, #0
 800ad12:	e018      	b.n	800ad46 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	3301      	adds	r3, #1
 800ad18:	613b      	str	r3, [r7, #16]
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	2b0c      	cmp	r3, #12
 800ad1e:	d9c8      	bls.n	800acb2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00b      	beq.n	800ad44 <cmp_lfn+0xd0>
 800ad2c:	89fb      	ldrh	r3, [r7, #14]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d008      	beq.n	800ad44 <cmp_lfn+0xd0>
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	005b      	lsls	r3, r3, #1
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	4413      	add	r3, r2
 800ad3a:	881b      	ldrh	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d001      	beq.n	800ad44 <cmp_lfn+0xd0>
 800ad40:	2300      	movs	r3, #0
 800ad42:	e000      	b.n	800ad46 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ad44:	2301      	movs	r3, #1
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	371c      	adds	r7, #28
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd90      	pop	{r4, r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	0801142c 	.word	0x0801142c

0800ad54 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b088      	sub	sp, #32
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	4611      	mov	r1, r2
 800ad60:	461a      	mov	r2, r3
 800ad62:	460b      	mov	r3, r1
 800ad64:	71fb      	strb	r3, [r7, #7]
 800ad66:	4613      	mov	r3, r2
 800ad68:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	330d      	adds	r3, #13
 800ad6e:	79ba      	ldrb	r2, [r7, #6]
 800ad70:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	330b      	adds	r3, #11
 800ad76:	220f      	movs	r2, #15
 800ad78:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	330c      	adds	r3, #12
 800ad7e:	2200      	movs	r2, #0
 800ad80:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	331a      	adds	r3, #26
 800ad86:	2100      	movs	r1, #0
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7fe ff36 	bl	8009bfa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ad8e:	79fb      	ldrb	r3, [r7, #7]
 800ad90:	1e5a      	subs	r2, r3, #1
 800ad92:	4613      	mov	r3, r2
 800ad94:	005b      	lsls	r3, r3, #1
 800ad96:	4413      	add	r3, r2
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	4413      	add	r3, r2
 800ad9c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	82fb      	strh	r3, [r7, #22]
 800ada2:	2300      	movs	r3, #0
 800ada4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ada6:	8afb      	ldrh	r3, [r7, #22]
 800ada8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adac:	4293      	cmp	r3, r2
 800adae:	d007      	beq.n	800adc0 <put_lfn+0x6c>
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	1c5a      	adds	r2, r3, #1
 800adb4:	61fa      	str	r2, [r7, #28]
 800adb6:	005b      	lsls	r3, r3, #1
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	4413      	add	r3, r2
 800adbc:	881b      	ldrh	r3, [r3, #0]
 800adbe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800adc0:	4a17      	ldr	r2, [pc, #92]	; (800ae20 <put_lfn+0xcc>)
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	4413      	add	r3, r2
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	461a      	mov	r2, r3
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	4413      	add	r3, r2
 800adce:	8afa      	ldrh	r2, [r7, #22]
 800add0:	4611      	mov	r1, r2
 800add2:	4618      	mov	r0, r3
 800add4:	f7fe ff11 	bl	8009bfa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800add8:	8afb      	ldrh	r3, [r7, #22]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d102      	bne.n	800ade4 <put_lfn+0x90>
 800adde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ade2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	3301      	adds	r3, #1
 800ade8:	61bb      	str	r3, [r7, #24]
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	2b0c      	cmp	r3, #12
 800adee:	d9da      	bls.n	800ada6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800adf0:	8afb      	ldrh	r3, [r7, #22]
 800adf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d006      	beq.n	800ae08 <put_lfn+0xb4>
 800adfa:	69fb      	ldr	r3, [r7, #28]
 800adfc:	005b      	lsls	r3, r3, #1
 800adfe:	68fa      	ldr	r2, [r7, #12]
 800ae00:	4413      	add	r3, r2
 800ae02:	881b      	ldrh	r3, [r3, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d103      	bne.n	800ae10 <put_lfn+0xbc>
 800ae08:	79fb      	ldrb	r3, [r7, #7]
 800ae0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae0e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	79fa      	ldrb	r2, [r7, #7]
 800ae14:	701a      	strb	r2, [r3, #0]
}
 800ae16:	bf00      	nop
 800ae18:	3720      	adds	r7, #32
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	0801142c 	.word	0x0801142c

0800ae24 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b08c      	sub	sp, #48	; 0x30
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	607a      	str	r2, [r7, #4]
 800ae30:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ae32:	220b      	movs	r2, #11
 800ae34:	68b9      	ldr	r1, [r7, #8]
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f7fe ff26 	bl	8009c88 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	2b05      	cmp	r3, #5
 800ae40:	d92b      	bls.n	800ae9a <gen_numname+0x76>
		sr = seq;
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ae46:	e022      	b.n	800ae8e <gen_numname+0x6a>
			wc = *lfn++;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	1c9a      	adds	r2, r3, #2
 800ae4c:	607a      	str	r2, [r7, #4]
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ae52:	2300      	movs	r3, #0
 800ae54:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae56:	e017      	b.n	800ae88 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	005a      	lsls	r2, r3, #1
 800ae5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae5e:	f003 0301 	and.w	r3, r3, #1
 800ae62:	4413      	add	r3, r2
 800ae64:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ae66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae68:	085b      	lsrs	r3, r3, #1
 800ae6a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d005      	beq.n	800ae82 <gen_numname+0x5e>
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ae7c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ae80:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ae82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae84:	3301      	adds	r3, #1
 800ae86:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8a:	2b0f      	cmp	r3, #15
 800ae8c:	d9e4      	bls.n	800ae58 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	881b      	ldrh	r3, [r3, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d1d8      	bne.n	800ae48 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ae9a:	2307      	movs	r3, #7
 800ae9c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	f003 030f 	and.w	r3, r3, #15
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	3330      	adds	r3, #48	; 0x30
 800aeaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800aeae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aeb2:	2b39      	cmp	r3, #57	; 0x39
 800aeb4:	d904      	bls.n	800aec0 <gen_numname+0x9c>
 800aeb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aeba:	3307      	adds	r3, #7
 800aebc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800aec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec2:	1e5a      	subs	r2, r3, #1
 800aec4:	62ba      	str	r2, [r7, #40]	; 0x28
 800aec6:	3330      	adds	r3, #48	; 0x30
 800aec8:	443b      	add	r3, r7
 800aeca:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800aece:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	091b      	lsrs	r3, r3, #4
 800aed6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d1df      	bne.n	800ae9e <gen_numname+0x7a>
	ns[i] = '~';
 800aede:	f107 0214 	add.w	r2, r7, #20
 800aee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee4:	4413      	add	r3, r2
 800aee6:	227e      	movs	r2, #126	; 0x7e
 800aee8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800aeea:	2300      	movs	r3, #0
 800aeec:	627b      	str	r3, [r7, #36]	; 0x24
 800aeee:	e002      	b.n	800aef6 <gen_numname+0xd2>
 800aef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef2:	3301      	adds	r3, #1
 800aef4:	627b      	str	r3, [r7, #36]	; 0x24
 800aef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d205      	bcs.n	800af0a <gen_numname+0xe6>
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af02:	4413      	add	r3, r2
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	2b20      	cmp	r3, #32
 800af08:	d1f2      	bne.n	800aef0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800af0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0c:	2b07      	cmp	r3, #7
 800af0e:	d807      	bhi.n	800af20 <gen_numname+0xfc>
 800af10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af12:	1c5a      	adds	r2, r3, #1
 800af14:	62ba      	str	r2, [r7, #40]	; 0x28
 800af16:	3330      	adds	r3, #48	; 0x30
 800af18:	443b      	add	r3, r7
 800af1a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800af1e:	e000      	b.n	800af22 <gen_numname+0xfe>
 800af20:	2120      	movs	r1, #32
 800af22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af24:	1c5a      	adds	r2, r3, #1
 800af26:	627a      	str	r2, [r7, #36]	; 0x24
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	4413      	add	r3, r2
 800af2c:	460a      	mov	r2, r1
 800af2e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af32:	2b07      	cmp	r3, #7
 800af34:	d9e9      	bls.n	800af0a <gen_numname+0xe6>
}
 800af36:	bf00      	nop
 800af38:	bf00      	nop
 800af3a:	3730      	adds	r7, #48	; 0x30
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800af48:	2300      	movs	r3, #0
 800af4a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800af4c:	230b      	movs	r3, #11
 800af4e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800af50:	7bfb      	ldrb	r3, [r7, #15]
 800af52:	b2da      	uxtb	r2, r3
 800af54:	0852      	lsrs	r2, r2, #1
 800af56:	01db      	lsls	r3, r3, #7
 800af58:	4313      	orrs	r3, r2
 800af5a:	b2da      	uxtb	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	1c59      	adds	r1, r3, #1
 800af60:	6079      	str	r1, [r7, #4]
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	4413      	add	r3, r2
 800af66:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	3b01      	subs	r3, #1
 800af6c:	60bb      	str	r3, [r7, #8]
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d1ed      	bne.n	800af50 <sum_sfn+0x10>
	return sum;
 800af74:	7bfb      	ldrb	r3, [r7, #15]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3714      	adds	r7, #20
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr

0800af82 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b086      	sub	sp, #24
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800af90:	2100      	movs	r1, #0
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f7ff fc88 	bl	800a8a8 <dir_sdi>
 800af98:	4603      	mov	r3, r0
 800af9a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800af9c:	7dfb      	ldrb	r3, [r7, #23]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d001      	beq.n	800afa6 <dir_find+0x24>
 800afa2:	7dfb      	ldrb	r3, [r7, #23]
 800afa4:	e0a9      	b.n	800b0fa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800afa6:	23ff      	movs	r3, #255	; 0xff
 800afa8:	753b      	strb	r3, [r7, #20]
 800afaa:	7d3b      	ldrb	r3, [r7, #20]
 800afac:	757b      	strb	r3, [r7, #21]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f04f 32ff 	mov.w	r2, #4294967295
 800afb4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	69db      	ldr	r3, [r3, #28]
 800afba:	4619      	mov	r1, r3
 800afbc:	6938      	ldr	r0, [r7, #16]
 800afbe:	f7ff f891 	bl	800a0e4 <move_window>
 800afc2:	4603      	mov	r3, r0
 800afc4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800afc6:	7dfb      	ldrb	r3, [r7, #23]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	f040 8090 	bne.w	800b0ee <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a1b      	ldr	r3, [r3, #32]
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800afd6:	7dbb      	ldrb	r3, [r7, #22]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d102      	bne.n	800afe2 <dir_find+0x60>
 800afdc:	2304      	movs	r3, #4
 800afde:	75fb      	strb	r3, [r7, #23]
 800afe0:	e08a      	b.n	800b0f8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6a1b      	ldr	r3, [r3, #32]
 800afe6:	330b      	adds	r3, #11
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afee:	73fb      	strb	r3, [r7, #15]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	7bfa      	ldrb	r2, [r7, #15]
 800aff4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800aff6:	7dbb      	ldrb	r3, [r7, #22]
 800aff8:	2be5      	cmp	r3, #229	; 0xe5
 800affa:	d007      	beq.n	800b00c <dir_find+0x8a>
 800affc:	7bfb      	ldrb	r3, [r7, #15]
 800affe:	f003 0308 	and.w	r3, r3, #8
 800b002:	2b00      	cmp	r3, #0
 800b004:	d009      	beq.n	800b01a <dir_find+0x98>
 800b006:	7bfb      	ldrb	r3, [r7, #15]
 800b008:	2b0f      	cmp	r3, #15
 800b00a:	d006      	beq.n	800b01a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b00c:	23ff      	movs	r3, #255	; 0xff
 800b00e:	757b      	strb	r3, [r7, #21]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f04f 32ff 	mov.w	r2, #4294967295
 800b016:	631a      	str	r2, [r3, #48]	; 0x30
 800b018:	e05e      	b.n	800b0d8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b01a:	7bfb      	ldrb	r3, [r7, #15]
 800b01c:	2b0f      	cmp	r3, #15
 800b01e:	d136      	bne.n	800b08e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d154      	bne.n	800b0d8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b02e:	7dbb      	ldrb	r3, [r7, #22]
 800b030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00d      	beq.n	800b054 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a1b      	ldr	r3, [r3, #32]
 800b03c:	7b5b      	ldrb	r3, [r3, #13]
 800b03e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b040:	7dbb      	ldrb	r3, [r7, #22]
 800b042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b046:	75bb      	strb	r3, [r7, #22]
 800b048:	7dbb      	ldrb	r3, [r7, #22]
 800b04a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	695a      	ldr	r2, [r3, #20]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b054:	7dba      	ldrb	r2, [r7, #22]
 800b056:	7d7b      	ldrb	r3, [r7, #21]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d115      	bne.n	800b088 <dir_find+0x106>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6a1b      	ldr	r3, [r3, #32]
 800b060:	330d      	adds	r3, #13
 800b062:	781b      	ldrb	r3, [r3, #0]
 800b064:	7d3a      	ldrb	r2, [r7, #20]
 800b066:	429a      	cmp	r2, r3
 800b068:	d10e      	bne.n	800b088 <dir_find+0x106>
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	691a      	ldr	r2, [r3, #16]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a1b      	ldr	r3, [r3, #32]
 800b072:	4619      	mov	r1, r3
 800b074:	4610      	mov	r0, r2
 800b076:	f7ff fdfd 	bl	800ac74 <cmp_lfn>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d003      	beq.n	800b088 <dir_find+0x106>
 800b080:	7d7b      	ldrb	r3, [r7, #21]
 800b082:	3b01      	subs	r3, #1
 800b084:	b2db      	uxtb	r3, r3
 800b086:	e000      	b.n	800b08a <dir_find+0x108>
 800b088:	23ff      	movs	r3, #255	; 0xff
 800b08a:	757b      	strb	r3, [r7, #21]
 800b08c:	e024      	b.n	800b0d8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b08e:	7d7b      	ldrb	r3, [r7, #21]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d109      	bne.n	800b0a8 <dir_find+0x126>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6a1b      	ldr	r3, [r3, #32]
 800b098:	4618      	mov	r0, r3
 800b09a:	f7ff ff51 	bl	800af40 <sum_sfn>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	7d3b      	ldrb	r3, [r7, #20]
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d024      	beq.n	800b0f2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d10a      	bne.n	800b0cc <dir_find+0x14a>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a18      	ldr	r0, [r3, #32]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	3324      	adds	r3, #36	; 0x24
 800b0be:	220b      	movs	r2, #11
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	f7fe fe1d 	bl	8009d00 <mem_cmp>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d014      	beq.n	800b0f6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b0cc:	23ff      	movs	r3, #255	; 0xff
 800b0ce:	757b      	strb	r3, [r7, #21]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b0d8:	2100      	movs	r1, #0
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f7ff fc6d 	bl	800a9ba <dir_next>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b0e4:	7dfb      	ldrb	r3, [r7, #23]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	f43f af65 	beq.w	800afb6 <dir_find+0x34>
 800b0ec:	e004      	b.n	800b0f8 <dir_find+0x176>
		if (res != FR_OK) break;
 800b0ee:	bf00      	nop
 800b0f0:	e002      	b.n	800b0f8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b0f2:	bf00      	nop
 800b0f4:	e000      	b.n	800b0f8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b0f6:	bf00      	nop

	return res;
 800b0f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3718      	adds	r7, #24
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
	...

0800b104 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b08c      	sub	sp, #48	; 0x30
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b118:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d001      	beq.n	800b124 <dir_register+0x20>
 800b120:	2306      	movs	r3, #6
 800b122:	e0e0      	b.n	800b2e6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b124:	2300      	movs	r3, #0
 800b126:	627b      	str	r3, [r7, #36]	; 0x24
 800b128:	e002      	b.n	800b130 <dir_register+0x2c>
 800b12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12c:	3301      	adds	r3, #1
 800b12e:	627b      	str	r3, [r7, #36]	; 0x24
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	691a      	ldr	r2, [r3, #16]
 800b134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b136:	005b      	lsls	r3, r3, #1
 800b138:	4413      	add	r3, r2
 800b13a:	881b      	ldrh	r3, [r3, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d1f4      	bne.n	800b12a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b146:	f107 030c 	add.w	r3, r7, #12
 800b14a:	220c      	movs	r2, #12
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7fe fd9b 	bl	8009c88 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b152:	7dfb      	ldrb	r3, [r7, #23]
 800b154:	f003 0301 	and.w	r3, r3, #1
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d032      	beq.n	800b1c2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2240      	movs	r2, #64	; 0x40
 800b160:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800b164:	2301      	movs	r3, #1
 800b166:	62bb      	str	r3, [r7, #40]	; 0x28
 800b168:	e016      	b.n	800b198 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	691a      	ldr	r2, [r3, #16]
 800b174:	f107 010c 	add.w	r1, r7, #12
 800b178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17a:	f7ff fe53 	bl	800ae24 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f7ff feff 	bl	800af82 <dir_find>
 800b184:	4603      	mov	r3, r0
 800b186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b18a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d106      	bne.n	800b1a0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b194:	3301      	adds	r3, #1
 800b196:	62bb      	str	r3, [r7, #40]	; 0x28
 800b198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b19a:	2b63      	cmp	r3, #99	; 0x63
 800b19c:	d9e5      	bls.n	800b16a <dir_register+0x66>
 800b19e:	e000      	b.n	800b1a2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800b1a0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a4:	2b64      	cmp	r3, #100	; 0x64
 800b1a6:	d101      	bne.n	800b1ac <dir_register+0xa8>
 800b1a8:	2307      	movs	r3, #7
 800b1aa:	e09c      	b.n	800b2e6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b1ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1b0:	2b04      	cmp	r3, #4
 800b1b2:	d002      	beq.n	800b1ba <dir_register+0xb6>
 800b1b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1b8:	e095      	b.n	800b2e6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b1ba:	7dfa      	ldrb	r2, [r7, #23]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b1c2:	7dfb      	ldrb	r3, [r7, #23]
 800b1c4:	f003 0302 	and.w	r3, r3, #2
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d007      	beq.n	800b1dc <dir_register+0xd8>
 800b1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ce:	330c      	adds	r3, #12
 800b1d0:	4a47      	ldr	r2, [pc, #284]	; (800b2f0 <dir_register+0x1ec>)
 800b1d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1d6:	089b      	lsrs	r3, r3, #2
 800b1d8:	3301      	adds	r3, #1
 800b1da:	e000      	b.n	800b1de <dir_register+0xda>
 800b1dc:	2301      	movs	r3, #1
 800b1de:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b1e0:	6a39      	ldr	r1, [r7, #32]
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f7ff fcbf 	bl	800ab66 <dir_alloc>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b1ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d148      	bne.n	800b288 <dir_register+0x184>
 800b1f6:	6a3b      	ldr	r3, [r7, #32]
 800b1f8:	3b01      	subs	r3, #1
 800b1fa:	623b      	str	r3, [r7, #32]
 800b1fc:	6a3b      	ldr	r3, [r7, #32]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d042      	beq.n	800b288 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	695a      	ldr	r2, [r3, #20]
 800b206:	6a3b      	ldr	r3, [r7, #32]
 800b208:	015b      	lsls	r3, r3, #5
 800b20a:	1ad3      	subs	r3, r2, r3
 800b20c:	4619      	mov	r1, r3
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f7ff fb4a 	bl	800a8a8 <dir_sdi>
 800b214:	4603      	mov	r3, r0
 800b216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b21a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d132      	bne.n	800b288 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	3324      	adds	r3, #36	; 0x24
 800b226:	4618      	mov	r0, r3
 800b228:	f7ff fe8a 	bl	800af40 <sum_sfn>
 800b22c:	4603      	mov	r3, r0
 800b22e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	69db      	ldr	r3, [r3, #28]
 800b234:	4619      	mov	r1, r3
 800b236:	69f8      	ldr	r0, [r7, #28]
 800b238:	f7fe ff54 	bl	800a0e4 <move_window>
 800b23c:	4603      	mov	r3, r0
 800b23e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b242:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b246:	2b00      	cmp	r3, #0
 800b248:	d11d      	bne.n	800b286 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	6918      	ldr	r0, [r3, #16]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6a19      	ldr	r1, [r3, #32]
 800b252:	6a3b      	ldr	r3, [r7, #32]
 800b254:	b2da      	uxtb	r2, r3
 800b256:	7efb      	ldrb	r3, [r7, #27]
 800b258:	f7ff fd7c 	bl	800ad54 <put_lfn>
				fs->wflag = 1;
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	2201      	movs	r2, #1
 800b260:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b262:	2100      	movs	r1, #0
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f7ff fba8 	bl	800a9ba <dir_next>
 800b26a:	4603      	mov	r3, r0
 800b26c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b270:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b274:	2b00      	cmp	r3, #0
 800b276:	d107      	bne.n	800b288 <dir_register+0x184>
 800b278:	6a3b      	ldr	r3, [r7, #32]
 800b27a:	3b01      	subs	r3, #1
 800b27c:	623b      	str	r3, [r7, #32]
 800b27e:	6a3b      	ldr	r3, [r7, #32]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1d5      	bne.n	800b230 <dir_register+0x12c>
 800b284:	e000      	b.n	800b288 <dir_register+0x184>
				if (res != FR_OK) break;
 800b286:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b288:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d128      	bne.n	800b2e2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	69db      	ldr	r3, [r3, #28]
 800b294:	4619      	mov	r1, r3
 800b296:	69f8      	ldr	r0, [r7, #28]
 800b298:	f7fe ff24 	bl	800a0e4 <move_window>
 800b29c:	4603      	mov	r3, r0
 800b29e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b2a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d11b      	bne.n	800b2e2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a1b      	ldr	r3, [r3, #32]
 800b2ae:	2220      	movs	r2, #32
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7fe fd09 	bl	8009cca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6a18      	ldr	r0, [r3, #32]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	3324      	adds	r3, #36	; 0x24
 800b2c0:	220b      	movs	r2, #11
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	f7fe fce0 	bl	8009c88 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6a1b      	ldr	r3, [r3, #32]
 800b2d2:	330c      	adds	r3, #12
 800b2d4:	f002 0218 	and.w	r2, r2, #24
 800b2d8:	b2d2      	uxtb	r2, r2
 800b2da:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b2e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3730      	adds	r7, #48	; 0x30
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	4ec4ec4f 	.word	0x4ec4ec4f

0800b2f4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b08a      	sub	sp, #40	; 0x28
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	613b      	str	r3, [r7, #16]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	691b      	ldr	r3, [r3, #16]
 800b30a:	60fb      	str	r3, [r7, #12]
 800b30c:	2300      	movs	r3, #0
 800b30e:	617b      	str	r3, [r7, #20]
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	1c5a      	adds	r2, r3, #1
 800b318:	61ba      	str	r2, [r7, #24]
 800b31a:	693a      	ldr	r2, [r7, #16]
 800b31c:	4413      	add	r3, r2
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b324:	2b1f      	cmp	r3, #31
 800b326:	d940      	bls.n	800b3aa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b328:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b32a:	2b2f      	cmp	r3, #47	; 0x2f
 800b32c:	d006      	beq.n	800b33c <create_name+0x48>
 800b32e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b330:	2b5c      	cmp	r3, #92	; 0x5c
 800b332:	d110      	bne.n	800b356 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b334:	e002      	b.n	800b33c <create_name+0x48>
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	3301      	adds	r3, #1
 800b33a:	61bb      	str	r3, [r7, #24]
 800b33c:	693a      	ldr	r2, [r7, #16]
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	4413      	add	r3, r2
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	2b2f      	cmp	r3, #47	; 0x2f
 800b346:	d0f6      	beq.n	800b336 <create_name+0x42>
 800b348:	693a      	ldr	r2, [r7, #16]
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	4413      	add	r3, r2
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	2b5c      	cmp	r3, #92	; 0x5c
 800b352:	d0f0      	beq.n	800b336 <create_name+0x42>
			break;
 800b354:	e02a      	b.n	800b3ac <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	2bfe      	cmp	r3, #254	; 0xfe
 800b35a:	d901      	bls.n	800b360 <create_name+0x6c>
 800b35c:	2306      	movs	r3, #6
 800b35e:	e17d      	b.n	800b65c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b360:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b362:	b2db      	uxtb	r3, r3
 800b364:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b368:	2101      	movs	r1, #1
 800b36a:	4618      	mov	r0, r3
 800b36c:	f001 fcb0 	bl	800ccd0 <ff_convert>
 800b370:	4603      	mov	r3, r0
 800b372:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b374:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b376:	2b00      	cmp	r3, #0
 800b378:	d101      	bne.n	800b37e <create_name+0x8a>
 800b37a:	2306      	movs	r3, #6
 800b37c:	e16e      	b.n	800b65c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b37e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b380:	2b7f      	cmp	r3, #127	; 0x7f
 800b382:	d809      	bhi.n	800b398 <create_name+0xa4>
 800b384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b386:	4619      	mov	r1, r3
 800b388:	488d      	ldr	r0, [pc, #564]	; (800b5c0 <create_name+0x2cc>)
 800b38a:	f7fe fce0 	bl	8009d4e <chk_chr>
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	d001      	beq.n	800b398 <create_name+0xa4>
 800b394:	2306      	movs	r3, #6
 800b396:	e161      	b.n	800b65c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	1c5a      	adds	r2, r3, #1
 800b39c:	617a      	str	r2, [r7, #20]
 800b39e:	005b      	lsls	r3, r3, #1
 800b3a0:	68fa      	ldr	r2, [r7, #12]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b3a6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b3a8:	e7b4      	b.n	800b314 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b3aa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b3ac:	693a      	ldr	r2, [r7, #16]
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	441a      	add	r2, r3
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b3b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3b8:	2b1f      	cmp	r3, #31
 800b3ba:	d801      	bhi.n	800b3c0 <create_name+0xcc>
 800b3bc:	2304      	movs	r3, #4
 800b3be:	e000      	b.n	800b3c2 <create_name+0xce>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b3c6:	e011      	b.n	800b3ec <create_name+0xf8>
		w = lfn[di - 1];
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	005b      	lsls	r3, r3, #1
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	881b      	ldrh	r3, [r3, #0]
 800b3d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b3da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3dc:	2b20      	cmp	r3, #32
 800b3de:	d002      	beq.n	800b3e6 <create_name+0xf2>
 800b3e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3e2:	2b2e      	cmp	r3, #46	; 0x2e
 800b3e4:	d106      	bne.n	800b3f4 <create_name+0x100>
		di--;
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	3b01      	subs	r3, #1
 800b3ea:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1ea      	bne.n	800b3c8 <create_name+0xd4>
 800b3f2:	e000      	b.n	800b3f6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b3f4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	005b      	lsls	r3, r3, #1
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	2200      	movs	r2, #0
 800b400:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d101      	bne.n	800b40c <create_name+0x118>
 800b408:	2306      	movs	r3, #6
 800b40a:	e127      	b.n	800b65c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	3324      	adds	r3, #36	; 0x24
 800b410:	220b      	movs	r2, #11
 800b412:	2120      	movs	r1, #32
 800b414:	4618      	mov	r0, r3
 800b416:	f7fe fc58 	bl	8009cca <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b41a:	2300      	movs	r3, #0
 800b41c:	61bb      	str	r3, [r7, #24]
 800b41e:	e002      	b.n	800b426 <create_name+0x132>
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	3301      	adds	r3, #1
 800b424:	61bb      	str	r3, [r7, #24]
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	005b      	lsls	r3, r3, #1
 800b42a:	68fa      	ldr	r2, [r7, #12]
 800b42c:	4413      	add	r3, r2
 800b42e:	881b      	ldrh	r3, [r3, #0]
 800b430:	2b20      	cmp	r3, #32
 800b432:	d0f5      	beq.n	800b420 <create_name+0x12c>
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	005b      	lsls	r3, r3, #1
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	4413      	add	r3, r2
 800b43c:	881b      	ldrh	r3, [r3, #0]
 800b43e:	2b2e      	cmp	r3, #46	; 0x2e
 800b440:	d0ee      	beq.n	800b420 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d009      	beq.n	800b45c <create_name+0x168>
 800b448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b44c:	f043 0303 	orr.w	r3, r3, #3
 800b450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b454:	e002      	b.n	800b45c <create_name+0x168>
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	3b01      	subs	r3, #1
 800b45a:	617b      	str	r3, [r7, #20]
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d009      	beq.n	800b476 <create_name+0x182>
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b468:	3b01      	subs	r3, #1
 800b46a:	005b      	lsls	r3, r3, #1
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	4413      	add	r3, r2
 800b470:	881b      	ldrh	r3, [r3, #0]
 800b472:	2b2e      	cmp	r3, #46	; 0x2e
 800b474:	d1ef      	bne.n	800b456 <create_name+0x162>

	i = b = 0; ni = 8;
 800b476:	2300      	movs	r3, #0
 800b478:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b47c:	2300      	movs	r3, #0
 800b47e:	623b      	str	r3, [r7, #32]
 800b480:	2308      	movs	r3, #8
 800b482:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	1c5a      	adds	r2, r3, #1
 800b488:	61ba      	str	r2, [r7, #24]
 800b48a:	005b      	lsls	r3, r3, #1
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	4413      	add	r3, r2
 800b490:	881b      	ldrh	r3, [r3, #0]
 800b492:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b494:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b496:	2b00      	cmp	r3, #0
 800b498:	f000 8090 	beq.w	800b5bc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b49c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b49e:	2b20      	cmp	r3, #32
 800b4a0:	d006      	beq.n	800b4b0 <create_name+0x1bc>
 800b4a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4a4:	2b2e      	cmp	r3, #46	; 0x2e
 800b4a6:	d10a      	bne.n	800b4be <create_name+0x1ca>
 800b4a8:	69ba      	ldr	r2, [r7, #24]
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d006      	beq.n	800b4be <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b4b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4b4:	f043 0303 	orr.w	r3, r3, #3
 800b4b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4bc:	e07d      	b.n	800b5ba <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b4be:	6a3a      	ldr	r2, [r7, #32]
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d203      	bcs.n	800b4ce <create_name+0x1da>
 800b4c6:	69ba      	ldr	r2, [r7, #24]
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d123      	bne.n	800b516 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	2b0b      	cmp	r3, #11
 800b4d2:	d106      	bne.n	800b4e2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b4d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4d8:	f043 0303 	orr.w	r3, r3, #3
 800b4dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b4e0:	e075      	b.n	800b5ce <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b4e2:	69ba      	ldr	r2, [r7, #24]
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d005      	beq.n	800b4f6 <create_name+0x202>
 800b4ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4ee:	f043 0303 	orr.w	r3, r3, #3
 800b4f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b4f6:	69ba      	ldr	r2, [r7, #24]
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d866      	bhi.n	800b5cc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	61bb      	str	r3, [r7, #24]
 800b502:	2308      	movs	r3, #8
 800b504:	623b      	str	r3, [r7, #32]
 800b506:	230b      	movs	r3, #11
 800b508:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b50a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b514:	e051      	b.n	800b5ba <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b516:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b518:	2b7f      	cmp	r3, #127	; 0x7f
 800b51a:	d914      	bls.n	800b546 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b51c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b51e:	2100      	movs	r1, #0
 800b520:	4618      	mov	r0, r3
 800b522:	f001 fbd5 	bl	800ccd0 <ff_convert>
 800b526:	4603      	mov	r3, r0
 800b528:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b52a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d004      	beq.n	800b53a <create_name+0x246>
 800b530:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b532:	3b80      	subs	r3, #128	; 0x80
 800b534:	4a23      	ldr	r2, [pc, #140]	; (800b5c4 <create_name+0x2d0>)
 800b536:	5cd3      	ldrb	r3, [r2, r3]
 800b538:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b53a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b53e:	f043 0302 	orr.w	r3, r3, #2
 800b542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b546:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d007      	beq.n	800b55c <create_name+0x268>
 800b54c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b54e:	4619      	mov	r1, r3
 800b550:	481d      	ldr	r0, [pc, #116]	; (800b5c8 <create_name+0x2d4>)
 800b552:	f7fe fbfc 	bl	8009d4e <chk_chr>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d008      	beq.n	800b56e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b55c:	235f      	movs	r3, #95	; 0x5f
 800b55e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b564:	f043 0303 	orr.w	r3, r3, #3
 800b568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b56c:	e01b      	b.n	800b5a6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b56e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b570:	2b40      	cmp	r3, #64	; 0x40
 800b572:	d909      	bls.n	800b588 <create_name+0x294>
 800b574:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b576:	2b5a      	cmp	r3, #90	; 0x5a
 800b578:	d806      	bhi.n	800b588 <create_name+0x294>
					b |= 2;
 800b57a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b57e:	f043 0302 	orr.w	r3, r3, #2
 800b582:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b586:	e00e      	b.n	800b5a6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b588:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b58a:	2b60      	cmp	r3, #96	; 0x60
 800b58c:	d90b      	bls.n	800b5a6 <create_name+0x2b2>
 800b58e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b590:	2b7a      	cmp	r3, #122	; 0x7a
 800b592:	d808      	bhi.n	800b5a6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b594:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b598:	f043 0301 	orr.w	r3, r3, #1
 800b59c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b5a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b5a2:	3b20      	subs	r3, #32
 800b5a4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b5a6:	6a3b      	ldr	r3, [r7, #32]
 800b5a8:	1c5a      	adds	r2, r3, #1
 800b5aa:	623a      	str	r2, [r7, #32]
 800b5ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b5ae:	b2d1      	uxtb	r1, r2
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	460a      	mov	r2, r1
 800b5b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b5ba:	e763      	b.n	800b484 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b5bc:	bf00      	nop
 800b5be:	e006      	b.n	800b5ce <create_name+0x2da>
 800b5c0:	0801134c 	.word	0x0801134c
 800b5c4:	080113ac 	.word	0x080113ac
 800b5c8:	08011358 	.word	0x08011358
			if (si > di) break;			/* No extension */
 800b5cc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b5d4:	2be5      	cmp	r3, #229	; 0xe5
 800b5d6:	d103      	bne.n	800b5e0 <create_name+0x2ec>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2205      	movs	r2, #5
 800b5dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	2b08      	cmp	r3, #8
 800b5e4:	d104      	bne.n	800b5f0 <create_name+0x2fc>
 800b5e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b5f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b5f4:	f003 030c 	and.w	r3, r3, #12
 800b5f8:	2b0c      	cmp	r3, #12
 800b5fa:	d005      	beq.n	800b608 <create_name+0x314>
 800b5fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b600:	f003 0303 	and.w	r3, r3, #3
 800b604:	2b03      	cmp	r3, #3
 800b606:	d105      	bne.n	800b614 <create_name+0x320>
 800b608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b60c:	f043 0302 	orr.w	r3, r3, #2
 800b610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b618:	f003 0302 	and.w	r3, r3, #2
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d117      	bne.n	800b650 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b620:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b624:	f003 0303 	and.w	r3, r3, #3
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d105      	bne.n	800b638 <create_name+0x344>
 800b62c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b630:	f043 0310 	orr.w	r3, r3, #16
 800b634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b638:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b63c:	f003 030c 	and.w	r3, r3, #12
 800b640:	2b04      	cmp	r3, #4
 800b642:	d105      	bne.n	800b650 <create_name+0x35c>
 800b644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b648:	f043 0308 	orr.w	r3, r3, #8
 800b64c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b656:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800b65a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3728      	adds	r7, #40	; 0x28
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b086      	sub	sp, #24
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b678:	e002      	b.n	800b680 <follow_path+0x1c>
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	3301      	adds	r3, #1
 800b67e:	603b      	str	r3, [r7, #0]
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	2b2f      	cmp	r3, #47	; 0x2f
 800b686:	d0f8      	beq.n	800b67a <follow_path+0x16>
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	2b5c      	cmp	r3, #92	; 0x5c
 800b68e:	d0f4      	beq.n	800b67a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	2200      	movs	r2, #0
 800b694:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	2b1f      	cmp	r3, #31
 800b69c:	d80a      	bhi.n	800b6b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2280      	movs	r2, #128	; 0x80
 800b6a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7ff f8fd 	bl	800a8a8 <dir_sdi>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	75fb      	strb	r3, [r7, #23]
 800b6b2:	e048      	b.n	800b746 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b6b4:	463b      	mov	r3, r7
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f7ff fe1b 	bl	800b2f4 <create_name>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b6c2:	7dfb      	ldrb	r3, [r7, #23]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d139      	bne.n	800b73c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f7ff fc5a 	bl	800af82 <dir_find>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b6d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b6da:	7dfb      	ldrb	r3, [r7, #23]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00a      	beq.n	800b6f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b6e0:	7dfb      	ldrb	r3, [r7, #23]
 800b6e2:	2b04      	cmp	r3, #4
 800b6e4:	d12c      	bne.n	800b740 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b6e6:	7afb      	ldrb	r3, [r7, #11]
 800b6e8:	f003 0304 	and.w	r3, r3, #4
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d127      	bne.n	800b740 <follow_path+0xdc>
 800b6f0:	2305      	movs	r3, #5
 800b6f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b6f4:	e024      	b.n	800b740 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b6f6:	7afb      	ldrb	r3, [r7, #11]
 800b6f8:	f003 0304 	and.w	r3, r3, #4
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d121      	bne.n	800b744 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	799b      	ldrb	r3, [r3, #6]
 800b704:	f003 0310 	and.w	r3, r3, #16
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d102      	bne.n	800b712 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b70c:	2305      	movs	r3, #5
 800b70e:	75fb      	strb	r3, [r7, #23]
 800b710:	e019      	b.n	800b746 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	695b      	ldr	r3, [r3, #20]
 800b71c:	68fa      	ldr	r2, [r7, #12]
 800b71e:	8992      	ldrh	r2, [r2, #12]
 800b720:	fbb3 f0f2 	udiv	r0, r3, r2
 800b724:	fb00 f202 	mul.w	r2, r0, r2
 800b728:	1a9b      	subs	r3, r3, r2
 800b72a:	440b      	add	r3, r1
 800b72c:	4619      	mov	r1, r3
 800b72e:	68f8      	ldr	r0, [r7, #12]
 800b730:	f7ff fa60 	bl	800abf4 <ld_clust>
 800b734:	4602      	mov	r2, r0
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b73a:	e7bb      	b.n	800b6b4 <follow_path+0x50>
			if (res != FR_OK) break;
 800b73c:	bf00      	nop
 800b73e:	e002      	b.n	800b746 <follow_path+0xe2>
				break;
 800b740:	bf00      	nop
 800b742:	e000      	b.n	800b746 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b744:	bf00      	nop
			}
		}
	}

	return res;
 800b746:	7dfb      	ldrb	r3, [r7, #23]
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3718      	adds	r7, #24
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b750:	b480      	push	{r7}
 800b752:	b087      	sub	sp, #28
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b758:	f04f 33ff 	mov.w	r3, #4294967295
 800b75c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d031      	beq.n	800b7ca <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	617b      	str	r3, [r7, #20]
 800b76c:	e002      	b.n	800b774 <get_ldnumber+0x24>
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	3301      	adds	r3, #1
 800b772:	617b      	str	r3, [r7, #20]
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	2b1f      	cmp	r3, #31
 800b77a:	d903      	bls.n	800b784 <get_ldnumber+0x34>
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	2b3a      	cmp	r3, #58	; 0x3a
 800b782:	d1f4      	bne.n	800b76e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	2b3a      	cmp	r3, #58	; 0x3a
 800b78a:	d11c      	bne.n	800b7c6 <get_ldnumber+0x76>
			tp = *path;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	1c5a      	adds	r2, r3, #1
 800b796:	60fa      	str	r2, [r7, #12]
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	3b30      	subs	r3, #48	; 0x30
 800b79c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	2b09      	cmp	r3, #9
 800b7a2:	d80e      	bhi.n	800b7c2 <get_ldnumber+0x72>
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d10a      	bne.n	800b7c2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d107      	bne.n	800b7c2 <get_ldnumber+0x72>
					vol = (int)i;
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	617b      	str	r3, [r7, #20]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	697a      	ldr	r2, [r7, #20]
 800b7c0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	e002      	b.n	800b7cc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b7ca:	693b      	ldr	r3, [r7, #16]
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	371c      	adds	r7, #28
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	70da      	strb	r2, [r3, #3]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ee:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b7f0:	6839      	ldr	r1, [r7, #0]
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f7fe fc76 	bl	800a0e4 <move_window>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d001      	beq.n	800b802 <check_fs+0x2a>
 800b7fe:	2304      	movs	r3, #4
 800b800:	e038      	b.n	800b874 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	3338      	adds	r3, #56	; 0x38
 800b806:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7fe f9ba 	bl	8009b84 <ld_word>
 800b810:	4603      	mov	r3, r0
 800b812:	461a      	mov	r2, r3
 800b814:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b818:	429a      	cmp	r2, r3
 800b81a:	d001      	beq.n	800b820 <check_fs+0x48>
 800b81c:	2303      	movs	r3, #3
 800b81e:	e029      	b.n	800b874 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b826:	2be9      	cmp	r3, #233	; 0xe9
 800b828:	d009      	beq.n	800b83e <check_fs+0x66>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b830:	2beb      	cmp	r3, #235	; 0xeb
 800b832:	d11e      	bne.n	800b872 <check_fs+0x9a>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b83a:	2b90      	cmp	r3, #144	; 0x90
 800b83c:	d119      	bne.n	800b872 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	3338      	adds	r3, #56	; 0x38
 800b842:	3336      	adds	r3, #54	; 0x36
 800b844:	4618      	mov	r0, r3
 800b846:	f7fe f9b5 	bl	8009bb4 <ld_dword>
 800b84a:	4603      	mov	r3, r0
 800b84c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b850:	4a0a      	ldr	r2, [pc, #40]	; (800b87c <check_fs+0xa4>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d101      	bne.n	800b85a <check_fs+0x82>
 800b856:	2300      	movs	r3, #0
 800b858:	e00c      	b.n	800b874 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	3338      	adds	r3, #56	; 0x38
 800b85e:	3352      	adds	r3, #82	; 0x52
 800b860:	4618      	mov	r0, r3
 800b862:	f7fe f9a7 	bl	8009bb4 <ld_dword>
 800b866:	4603      	mov	r3, r0
 800b868:	4a05      	ldr	r2, [pc, #20]	; (800b880 <check_fs+0xa8>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d101      	bne.n	800b872 <check_fs+0x9a>
 800b86e:	2300      	movs	r3, #0
 800b870:	e000      	b.n	800b874 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b872:	2302      	movs	r3, #2
}
 800b874:	4618      	mov	r0, r3
 800b876:	3708      	adds	r7, #8
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	00544146 	.word	0x00544146
 800b880:	33544146 	.word	0x33544146

0800b884 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b096      	sub	sp, #88	; 0x58
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	4613      	mov	r3, r2
 800b890:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	2200      	movs	r2, #0
 800b896:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f7ff ff59 	bl	800b750 <get_ldnumber>
 800b89e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b8a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	da01      	bge.n	800b8aa <find_volume+0x26>
 800b8a6:	230b      	movs	r3, #11
 800b8a8:	e265      	b.n	800bd76 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b8aa:	4a9f      	ldr	r2, [pc, #636]	; (800bb28 <find_volume+0x2a4>)
 800b8ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8b2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d101      	bne.n	800b8be <find_volume+0x3a>
 800b8ba:	230c      	movs	r3, #12
 800b8bc:	e25b      	b.n	800bd76 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b8c4:	79fb      	ldrb	r3, [r7, #7]
 800b8c6:	f023 0301 	bic.w	r3, r3, #1
 800b8ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d01a      	beq.n	800b90a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d6:	785b      	ldrb	r3, [r3, #1]
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7fe f8b5 	bl	8009a48 <disk_status>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b8e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b8e8:	f003 0301 	and.w	r3, r3, #1
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d10c      	bne.n	800b90a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b8f0:	79fb      	ldrb	r3, [r7, #7]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d007      	beq.n	800b906 <find_volume+0x82>
 800b8f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b8fa:	f003 0304 	and.w	r3, r3, #4
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d001      	beq.n	800b906 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b902:	230a      	movs	r3, #10
 800b904:	e237      	b.n	800bd76 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800b906:	2300      	movs	r3, #0
 800b908:	e235      	b.n	800bd76 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90c:	2200      	movs	r2, #0
 800b90e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b912:	b2da      	uxtb	r2, r3
 800b914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b916:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91a:	785b      	ldrb	r3, [r3, #1]
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7fe f8ad 	bl	8009a7c <disk_initialize>
 800b922:	4603      	mov	r3, r0
 800b924:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b928:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b92c:	f003 0301 	and.w	r3, r3, #1
 800b930:	2b00      	cmp	r3, #0
 800b932:	d001      	beq.n	800b938 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b934:	2303      	movs	r3, #3
 800b936:	e21e      	b.n	800bd76 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b938:	79fb      	ldrb	r3, [r7, #7]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d007      	beq.n	800b94e <find_volume+0xca>
 800b93e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b942:	f003 0304 	and.w	r3, r3, #4
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b94a:	230a      	movs	r3, #10
 800b94c:	e213      	b.n	800bd76 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b950:	7858      	ldrb	r0, [r3, #1]
 800b952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b954:	330c      	adds	r3, #12
 800b956:	461a      	mov	r2, r3
 800b958:	2102      	movs	r1, #2
 800b95a:	f7fe f8f5 	bl	8009b48 <disk_ioctl>
 800b95e:	4603      	mov	r3, r0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d001      	beq.n	800b968 <find_volume+0xe4>
 800b964:	2301      	movs	r3, #1
 800b966:	e206      	b.n	800bd76 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96a:	899b      	ldrh	r3, [r3, #12]
 800b96c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b970:	d80d      	bhi.n	800b98e <find_volume+0x10a>
 800b972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b974:	899b      	ldrh	r3, [r3, #12]
 800b976:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b97a:	d308      	bcc.n	800b98e <find_volume+0x10a>
 800b97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b97e:	899b      	ldrh	r3, [r3, #12]
 800b980:	461a      	mov	r2, r3
 800b982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b984:	899b      	ldrh	r3, [r3, #12]
 800b986:	3b01      	subs	r3, #1
 800b988:	4013      	ands	r3, r2
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d001      	beq.n	800b992 <find_volume+0x10e>
 800b98e:	2301      	movs	r3, #1
 800b990:	e1f1      	b.n	800bd76 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b992:	2300      	movs	r3, #0
 800b994:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b996:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b998:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b99a:	f7ff ff1d 	bl	800b7d8 <check_fs>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b9a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b9a8:	2b02      	cmp	r3, #2
 800b9aa:	d149      	bne.n	800ba40 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	643b      	str	r3, [r7, #64]	; 0x40
 800b9b0:	e01e      	b.n	800b9f0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b9b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9ba:	011b      	lsls	r3, r3, #4
 800b9bc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b9c0:	4413      	add	r3, r2
 800b9c2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c6:	3304      	adds	r3, #4
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d006      	beq.n	800b9dc <find_volume+0x158>
 800b9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d0:	3308      	adds	r3, #8
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7fe f8ee 	bl	8009bb4 <ld_dword>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	e000      	b.n	800b9de <find_volume+0x15a>
 800b9dc:	2200      	movs	r2, #0
 800b9de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9e0:	009b      	lsls	r3, r3, #2
 800b9e2:	3358      	adds	r3, #88	; 0x58
 800b9e4:	443b      	add	r3, r7
 800b9e6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b9ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	643b      	str	r3, [r7, #64]	; 0x40
 800b9f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9f2:	2b03      	cmp	r3, #3
 800b9f4:	d9dd      	bls.n	800b9b2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b9fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d002      	beq.n	800ba06 <find_volume+0x182>
 800ba00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba02:	3b01      	subs	r3, #1
 800ba04:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ba06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	3358      	adds	r3, #88	; 0x58
 800ba0c:	443b      	add	r3, r7
 800ba0e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ba12:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ba14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d005      	beq.n	800ba26 <find_volume+0x1a2>
 800ba1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ba1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba1e:	f7ff fedb 	bl	800b7d8 <check_fs>
 800ba22:	4603      	mov	r3, r0
 800ba24:	e000      	b.n	800ba28 <find_volume+0x1a4>
 800ba26:	2303      	movs	r3, #3
 800ba28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ba2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d905      	bls.n	800ba40 <find_volume+0x1bc>
 800ba34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba36:	3301      	adds	r3, #1
 800ba38:	643b      	str	r3, [r7, #64]	; 0x40
 800ba3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba3c:	2b03      	cmp	r3, #3
 800ba3e:	d9e2      	bls.n	800ba06 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ba40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba44:	2b04      	cmp	r3, #4
 800ba46:	d101      	bne.n	800ba4c <find_volume+0x1c8>
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e194      	b.n	800bd76 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ba4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d901      	bls.n	800ba58 <find_volume+0x1d4>
 800ba54:	230d      	movs	r3, #13
 800ba56:	e18e      	b.n	800bd76 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ba58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5a:	3338      	adds	r3, #56	; 0x38
 800ba5c:	330b      	adds	r3, #11
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7fe f890 	bl	8009b84 <ld_word>
 800ba64:	4603      	mov	r3, r0
 800ba66:	461a      	mov	r2, r3
 800ba68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba6a:	899b      	ldrh	r3, [r3, #12]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d001      	beq.n	800ba74 <find_volume+0x1f0>
 800ba70:	230d      	movs	r3, #13
 800ba72:	e180      	b.n	800bd76 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ba74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba76:	3338      	adds	r3, #56	; 0x38
 800ba78:	3316      	adds	r3, #22
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7fe f882 	bl	8009b84 <ld_word>
 800ba80:	4603      	mov	r3, r0
 800ba82:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ba84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d106      	bne.n	800ba98 <find_volume+0x214>
 800ba8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8c:	3338      	adds	r3, #56	; 0x38
 800ba8e:	3324      	adds	r3, #36	; 0x24
 800ba90:	4618      	mov	r0, r3
 800ba92:	f7fe f88f 	bl	8009bb4 <ld_dword>
 800ba96:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ba98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba9c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ba9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800baa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800baa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baaa:	789b      	ldrb	r3, [r3, #2]
 800baac:	2b01      	cmp	r3, #1
 800baae:	d005      	beq.n	800babc <find_volume+0x238>
 800bab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab2:	789b      	ldrb	r3, [r3, #2]
 800bab4:	2b02      	cmp	r3, #2
 800bab6:	d001      	beq.n	800babc <find_volume+0x238>
 800bab8:	230d      	movs	r3, #13
 800baba:	e15c      	b.n	800bd76 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800babc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800babe:	789b      	ldrb	r3, [r3, #2]
 800bac0:	461a      	mov	r2, r3
 800bac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bac4:	fb02 f303 	mul.w	r3, r2, r3
 800bac8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800baca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bacc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad8:	895b      	ldrh	r3, [r3, #10]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d008      	beq.n	800baf0 <find_volume+0x26c>
 800bade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae0:	895b      	ldrh	r3, [r3, #10]
 800bae2:	461a      	mov	r2, r3
 800bae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae6:	895b      	ldrh	r3, [r3, #10]
 800bae8:	3b01      	subs	r3, #1
 800baea:	4013      	ands	r3, r2
 800baec:	2b00      	cmp	r3, #0
 800baee:	d001      	beq.n	800baf4 <find_volume+0x270>
 800baf0:	230d      	movs	r3, #13
 800baf2:	e140      	b.n	800bd76 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800baf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf6:	3338      	adds	r3, #56	; 0x38
 800baf8:	3311      	adds	r3, #17
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7fe f842 	bl	8009b84 <ld_word>
 800bb00:	4603      	mov	r3, r0
 800bb02:	461a      	mov	r2, r3
 800bb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb06:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0a:	891b      	ldrh	r3, [r3, #8]
 800bb0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb0e:	8992      	ldrh	r2, [r2, #12]
 800bb10:	0952      	lsrs	r2, r2, #5
 800bb12:	b292      	uxth	r2, r2
 800bb14:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb18:	fb01 f202 	mul.w	r2, r1, r2
 800bb1c:	1a9b      	subs	r3, r3, r2
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d003      	beq.n	800bb2c <find_volume+0x2a8>
 800bb24:	230d      	movs	r3, #13
 800bb26:	e126      	b.n	800bd76 <find_volume+0x4f2>
 800bb28:	200028e8 	.word	0x200028e8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2e:	3338      	adds	r3, #56	; 0x38
 800bb30:	3313      	adds	r3, #19
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7fe f826 	bl	8009b84 <ld_word>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bb3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d106      	bne.n	800bb50 <find_volume+0x2cc>
 800bb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb44:	3338      	adds	r3, #56	; 0x38
 800bb46:	3320      	adds	r3, #32
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7fe f833 	bl	8009bb4 <ld_dword>
 800bb4e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb52:	3338      	adds	r3, #56	; 0x38
 800bb54:	330e      	adds	r3, #14
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7fe f814 	bl	8009b84 <ld_word>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bb60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d101      	bne.n	800bb6a <find_volume+0x2e6>
 800bb66:	230d      	movs	r3, #13
 800bb68:	e105      	b.n	800bd76 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bb6a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bb6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb6e:	4413      	add	r3, r2
 800bb70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb72:	8911      	ldrh	r1, [r2, #8]
 800bb74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb76:	8992      	ldrh	r2, [r2, #12]
 800bb78:	0952      	lsrs	r2, r2, #5
 800bb7a:	b292      	uxth	r2, r2
 800bb7c:	fbb1 f2f2 	udiv	r2, r1, r2
 800bb80:	b292      	uxth	r2, r2
 800bb82:	4413      	add	r3, r2
 800bb84:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bb86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d201      	bcs.n	800bb92 <find_volume+0x30e>
 800bb8e:	230d      	movs	r3, #13
 800bb90:	e0f1      	b.n	800bd76 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bb92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb96:	1ad3      	subs	r3, r2, r3
 800bb98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb9a:	8952      	ldrh	r2, [r2, #10]
 800bb9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bba0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d101      	bne.n	800bbac <find_volume+0x328>
 800bba8:	230d      	movs	r3, #13
 800bbaa:	e0e4      	b.n	800bd76 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800bbac:	2303      	movs	r3, #3
 800bbae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d802      	bhi.n	800bbc2 <find_volume+0x33e>
 800bbbc:	2302      	movs	r3, #2
 800bbbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d802      	bhi.n	800bbd2 <find_volume+0x34e>
 800bbcc:	2301      	movs	r3, #1
 800bbce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd4:	1c9a      	adds	r2, r3, #2
 800bbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800bbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbdc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bbde:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bbe0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bbe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbe4:	441a      	add	r2, r3
 800bbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800bbea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbee:	441a      	add	r2, r3
 800bbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf2:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800bbf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bbf8:	2b03      	cmp	r3, #3
 800bbfa:	d11e      	bne.n	800bc3a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfe:	3338      	adds	r3, #56	; 0x38
 800bc00:	332a      	adds	r3, #42	; 0x2a
 800bc02:	4618      	mov	r0, r3
 800bc04:	f7fd ffbe 	bl	8009b84 <ld_word>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d001      	beq.n	800bc12 <find_volume+0x38e>
 800bc0e:	230d      	movs	r3, #13
 800bc10:	e0b1      	b.n	800bd76 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc14:	891b      	ldrh	r3, [r3, #8]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d001      	beq.n	800bc1e <find_volume+0x39a>
 800bc1a:	230d      	movs	r3, #13
 800bc1c:	e0ab      	b.n	800bd76 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc20:	3338      	adds	r3, #56	; 0x38
 800bc22:	332c      	adds	r3, #44	; 0x2c
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7fd ffc5 	bl	8009bb4 <ld_dword>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc32:	69db      	ldr	r3, [r3, #28]
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	647b      	str	r3, [r7, #68]	; 0x44
 800bc38:	e01f      	b.n	800bc7a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc3c:	891b      	ldrh	r3, [r3, #8]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d101      	bne.n	800bc46 <find_volume+0x3c2>
 800bc42:	230d      	movs	r3, #13
 800bc44:	e097      	b.n	800bd76 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc4c:	441a      	add	r2, r3
 800bc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc50:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bc52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc56:	2b02      	cmp	r3, #2
 800bc58:	d103      	bne.n	800bc62 <find_volume+0x3de>
 800bc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc5c:	69db      	ldr	r3, [r3, #28]
 800bc5e:	005b      	lsls	r3, r3, #1
 800bc60:	e00a      	b.n	800bc78 <find_volume+0x3f4>
 800bc62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc64:	69da      	ldr	r2, [r3, #28]
 800bc66:	4613      	mov	r3, r2
 800bc68:	005b      	lsls	r3, r3, #1
 800bc6a:	4413      	add	r3, r2
 800bc6c:	085a      	lsrs	r2, r3, #1
 800bc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc70:	69db      	ldr	r3, [r3, #28]
 800bc72:	f003 0301 	and.w	r3, r3, #1
 800bc76:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bc78:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7c:	6a1a      	ldr	r2, [r3, #32]
 800bc7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc80:	899b      	ldrh	r3, [r3, #12]
 800bc82:	4619      	mov	r1, r3
 800bc84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc86:	440b      	add	r3, r1
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc8c:	8989      	ldrh	r1, [r1, #12]
 800bc8e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d201      	bcs.n	800bc9a <find_volume+0x416>
 800bc96:	230d      	movs	r3, #13
 800bc98:	e06d      	b.n	800bd76 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bca0:	619a      	str	r2, [r3, #24]
 800bca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca4:	699a      	ldr	r2, [r3, #24]
 800bca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800bcaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcac:	2280      	movs	r2, #128	; 0x80
 800bcae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bcb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bcb4:	2b03      	cmp	r3, #3
 800bcb6:	d149      	bne.n	800bd4c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bcb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcba:	3338      	adds	r3, #56	; 0x38
 800bcbc:	3330      	adds	r3, #48	; 0x30
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7fd ff60 	bl	8009b84 <ld_word>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d140      	bne.n	800bd4c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bcca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bccc:	3301      	adds	r3, #1
 800bcce:	4619      	mov	r1, r3
 800bcd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bcd2:	f7fe fa07 	bl	800a0e4 <move_window>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d137      	bne.n	800bd4c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800bcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcde:	2200      	movs	r2, #0
 800bce0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce4:	3338      	adds	r3, #56	; 0x38
 800bce6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fd ff4a 	bl	8009b84 <ld_word>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d127      	bne.n	800bd4c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bcfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcfe:	3338      	adds	r3, #56	; 0x38
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7fd ff57 	bl	8009bb4 <ld_dword>
 800bd06:	4603      	mov	r3, r0
 800bd08:	4a1d      	ldr	r2, [pc, #116]	; (800bd80 <find_volume+0x4fc>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d11e      	bne.n	800bd4c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd10:	3338      	adds	r3, #56	; 0x38
 800bd12:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7fd ff4c 	bl	8009bb4 <ld_dword>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	4a19      	ldr	r2, [pc, #100]	; (800bd84 <find_volume+0x500>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d113      	bne.n	800bd4c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd26:	3338      	adds	r3, #56	; 0x38
 800bd28:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7fd ff41 	bl	8009bb4 <ld_dword>
 800bd32:	4602      	mov	r2, r0
 800bd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd36:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3a:	3338      	adds	r3, #56	; 0x38
 800bd3c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7fd ff37 	bl	8009bb4 <ld_dword>
 800bd46:	4602      	mov	r2, r0
 800bd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd4a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd4e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bd52:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bd54:	4b0c      	ldr	r3, [pc, #48]	; (800bd88 <find_volume+0x504>)
 800bd56:	881b      	ldrh	r3, [r3, #0]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	b29a      	uxth	r2, r3
 800bd5c:	4b0a      	ldr	r3, [pc, #40]	; (800bd88 <find_volume+0x504>)
 800bd5e:	801a      	strh	r2, [r3, #0]
 800bd60:	4b09      	ldr	r3, [pc, #36]	; (800bd88 <find_volume+0x504>)
 800bd62:	881a      	ldrh	r2, [r3, #0]
 800bd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd66:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800bd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd6a:	4a08      	ldr	r2, [pc, #32]	; (800bd8c <find_volume+0x508>)
 800bd6c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bd6e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bd70:	f7fe f950 	bl	800a014 <clear_lock>
#endif
	return FR_OK;
 800bd74:	2300      	movs	r3, #0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3758      	adds	r7, #88	; 0x58
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
 800bd7e:	bf00      	nop
 800bd80:	41615252 	.word	0x41615252
 800bd84:	61417272 	.word	0x61417272
 800bd88:	200028ec 	.word	0x200028ec
 800bd8c:	20002910 	.word	0x20002910

0800bd90 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bd9a:	2309      	movs	r3, #9
 800bd9c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d01c      	beq.n	800bdde <validate+0x4e>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d018      	beq.n	800bdde <validate+0x4e>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d013      	beq.n	800bdde <validate+0x4e>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	889a      	ldrh	r2, [r3, #4]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	88db      	ldrh	r3, [r3, #6]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d10c      	bne.n	800bdde <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	785b      	ldrb	r3, [r3, #1]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fd fe3c 	bl	8009a48 <disk_status>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	f003 0301 	and.w	r3, r3, #1
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d101      	bne.n	800bdde <validate+0x4e>
			res = FR_OK;
 800bdda:	2300      	movs	r3, #0
 800bddc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bdde:	7bfb      	ldrb	r3, [r7, #15]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d102      	bne.n	800bdea <validate+0x5a>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	e000      	b.n	800bdec <validate+0x5c>
 800bdea:	2300      	movs	r3, #0
 800bdec:	683a      	ldr	r2, [r7, #0]
 800bdee:	6013      	str	r3, [r2, #0]
	return res;
 800bdf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3710      	adds	r7, #16
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
	...

0800bdfc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b088      	sub	sp, #32
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	4613      	mov	r3, r2
 800be08:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800be0e:	f107 0310 	add.w	r3, r7, #16
 800be12:	4618      	mov	r0, r3
 800be14:	f7ff fc9c 	bl	800b750 <get_ldnumber>
 800be18:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800be1a:	69fb      	ldr	r3, [r7, #28]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	da01      	bge.n	800be24 <f_mount+0x28>
 800be20:	230b      	movs	r3, #11
 800be22:	e02b      	b.n	800be7c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800be24:	4a17      	ldr	r2, [pc, #92]	; (800be84 <f_mount+0x88>)
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be2c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d005      	beq.n	800be40 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800be34:	69b8      	ldr	r0, [r7, #24]
 800be36:	f7fe f8ed 	bl	800a014 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	2200      	movs	r2, #0
 800be3e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d002      	beq.n	800be4c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2200      	movs	r2, #0
 800be4a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800be4c:	68fa      	ldr	r2, [r7, #12]
 800be4e:	490d      	ldr	r1, [pc, #52]	; (800be84 <f_mount+0x88>)
 800be50:	69fb      	ldr	r3, [r7, #28]
 800be52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d002      	beq.n	800be62 <f_mount+0x66>
 800be5c:	79fb      	ldrb	r3, [r7, #7]
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d001      	beq.n	800be66 <f_mount+0x6a>
 800be62:	2300      	movs	r3, #0
 800be64:	e00a      	b.n	800be7c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800be66:	f107 010c 	add.w	r1, r7, #12
 800be6a:	f107 0308 	add.w	r3, r7, #8
 800be6e:	2200      	movs	r2, #0
 800be70:	4618      	mov	r0, r3
 800be72:	f7ff fd07 	bl	800b884 <find_volume>
 800be76:	4603      	mov	r3, r0
 800be78:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800be7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3720      	adds	r7, #32
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	200028e8 	.word	0x200028e8

0800be88 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b09a      	sub	sp, #104	; 0x68
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	60f8      	str	r0, [r7, #12]
 800be90:	60b9      	str	r1, [r7, #8]
 800be92:	4613      	mov	r3, r2
 800be94:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d101      	bne.n	800bea0 <f_open+0x18>
 800be9c:	2309      	movs	r3, #9
 800be9e:	e1bb      	b.n	800c218 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bea0:	79fb      	ldrb	r3, [r7, #7]
 800bea2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bea6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bea8:	79fa      	ldrb	r2, [r7, #7]
 800beaa:	f107 0114 	add.w	r1, r7, #20
 800beae:	f107 0308 	add.w	r3, r7, #8
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7ff fce6 	bl	800b884 <find_volume>
 800beb8:	4603      	mov	r3, r0
 800beba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800bebe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f040 819f 	bne.w	800c206 <f_open+0x37e>
		dj.obj.fs = fs;
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800becc:	68ba      	ldr	r2, [r7, #8]
 800bece:	f107 0318 	add.w	r3, r7, #24
 800bed2:	4611      	mov	r1, r2
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7ff fbc5 	bl	800b664 <follow_path>
 800beda:	4603      	mov	r3, r0
 800bedc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bee0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d11a      	bne.n	800bf1e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bee8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800beec:	b25b      	sxtb	r3, r3
 800beee:	2b00      	cmp	r3, #0
 800bef0:	da03      	bge.n	800befa <f_open+0x72>
				res = FR_INVALID_NAME;
 800bef2:	2306      	movs	r3, #6
 800bef4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bef8:	e011      	b.n	800bf1e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800befa:	79fb      	ldrb	r3, [r7, #7]
 800befc:	f023 0301 	bic.w	r3, r3, #1
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	bf14      	ite	ne
 800bf04:	2301      	movne	r3, #1
 800bf06:	2300      	moveq	r3, #0
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	f107 0318 	add.w	r3, r7, #24
 800bf10:	4611      	mov	r1, r2
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fd ff36 	bl	8009d84 <chk_lock>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bf1e:	79fb      	ldrb	r3, [r7, #7]
 800bf20:	f003 031c 	and.w	r3, r3, #28
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d07f      	beq.n	800c028 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800bf28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d017      	beq.n	800bf60 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bf30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bf34:	2b04      	cmp	r3, #4
 800bf36:	d10e      	bne.n	800bf56 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bf38:	f7fd ff80 	bl	8009e3c <enq_lock>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d006      	beq.n	800bf50 <f_open+0xc8>
 800bf42:	f107 0318 	add.w	r3, r7, #24
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7ff f8dc 	bl	800b104 <dir_register>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	e000      	b.n	800bf52 <f_open+0xca>
 800bf50:	2312      	movs	r3, #18
 800bf52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bf56:	79fb      	ldrb	r3, [r7, #7]
 800bf58:	f043 0308 	orr.w	r3, r3, #8
 800bf5c:	71fb      	strb	r3, [r7, #7]
 800bf5e:	e010      	b.n	800bf82 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bf60:	7fbb      	ldrb	r3, [r7, #30]
 800bf62:	f003 0311 	and.w	r3, r3, #17
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d003      	beq.n	800bf72 <f_open+0xea>
					res = FR_DENIED;
 800bf6a:	2307      	movs	r3, #7
 800bf6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bf70:	e007      	b.n	800bf82 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bf72:	79fb      	ldrb	r3, [r7, #7]
 800bf74:	f003 0304 	and.w	r3, r3, #4
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d002      	beq.n	800bf82 <f_open+0xfa>
 800bf7c:	2308      	movs	r3, #8
 800bf7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bf82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d168      	bne.n	800c05c <f_open+0x1d4>
 800bf8a:	79fb      	ldrb	r3, [r7, #7]
 800bf8c:	f003 0308 	and.w	r3, r3, #8
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d063      	beq.n	800c05c <f_open+0x1d4>
				dw = GET_FATTIME();
 800bf94:	f7fd fcf6 	bl	8009984 <get_fattime>
 800bf98:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bf9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf9c:	330e      	adds	r3, #14
 800bf9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7fd fe45 	bl	8009c30 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bfa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa8:	3316      	adds	r3, #22
 800bfaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7fd fe3f 	bl	8009c30 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb4:	330b      	adds	r3, #11
 800bfb6:	2220      	movs	r2, #32
 800bfb8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfbe:	4611      	mov	r1, r2
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7fe fe17 	bl	800abf4 <ld_clust>
 800bfc6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bfcc:	2200      	movs	r2, #0
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7fe fe2f 	bl	800ac32 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd6:	331c      	adds	r3, #28
 800bfd8:	2100      	movs	r1, #0
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7fd fe28 	bl	8009c30 <st_dword>
					fs->wflag = 1;
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bfe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d037      	beq.n	800c05c <f_open+0x1d4>
						dw = fs->winsect;
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bff0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800bff2:	f107 0318 	add.w	r3, r7, #24
 800bff6:	2200      	movs	r2, #0
 800bff8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7fe fb1f 	bl	800a63e <remove_chain>
 800c000:	4603      	mov	r3, r0
 800c002:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800c006:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d126      	bne.n	800c05c <f_open+0x1d4>
							res = move_window(fs, dw);
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c012:	4618      	mov	r0, r3
 800c014:	f7fe f866 	bl	800a0e4 <move_window>
 800c018:	4603      	mov	r3, r0
 800c01a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c022:	3a01      	subs	r2, #1
 800c024:	615a      	str	r2, [r3, #20]
 800c026:	e019      	b.n	800c05c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c028:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d115      	bne.n	800c05c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c030:	7fbb      	ldrb	r3, [r7, #30]
 800c032:	f003 0310 	and.w	r3, r3, #16
 800c036:	2b00      	cmp	r3, #0
 800c038:	d003      	beq.n	800c042 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c03a:	2304      	movs	r3, #4
 800c03c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c040:	e00c      	b.n	800c05c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c042:	79fb      	ldrb	r3, [r7, #7]
 800c044:	f003 0302 	and.w	r3, r3, #2
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d007      	beq.n	800c05c <f_open+0x1d4>
 800c04c:	7fbb      	ldrb	r3, [r7, #30]
 800c04e:	f003 0301 	and.w	r3, r3, #1
 800c052:	2b00      	cmp	r3, #0
 800c054:	d002      	beq.n	800c05c <f_open+0x1d4>
						res = FR_DENIED;
 800c056:	2307      	movs	r3, #7
 800c058:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c05c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c060:	2b00      	cmp	r3, #0
 800c062:	d128      	bne.n	800c0b6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c064:	79fb      	ldrb	r3, [r7, #7]
 800c066:	f003 0308 	and.w	r3, r3, #8
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d003      	beq.n	800c076 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c06e:	79fb      	ldrb	r3, [r7, #7]
 800c070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c074:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c07e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c084:	79fb      	ldrb	r3, [r7, #7]
 800c086:	f023 0301 	bic.w	r3, r3, #1
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	bf14      	ite	ne
 800c08e:	2301      	movne	r3, #1
 800c090:	2300      	moveq	r3, #0
 800c092:	b2db      	uxtb	r3, r3
 800c094:	461a      	mov	r2, r3
 800c096:	f107 0318 	add.w	r3, r7, #24
 800c09a:	4611      	mov	r1, r2
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7fd feef 	bl	8009e80 <inc_lock>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	691b      	ldr	r3, [r3, #16]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d102      	bne.n	800c0b6 <f_open+0x22e>
 800c0b0:	2302      	movs	r3, #2
 800c0b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c0b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	f040 80a3 	bne.w	800c206 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0c4:	4611      	mov	r1, r2
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7fe fd94 	bl	800abf4 <ld_clust>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d4:	331c      	adds	r3, #28
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7fd fd6c 	bl	8009bb4 <ld_dword>
 800c0dc:	4602      	mov	r2, r0
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c0e8:	697a      	ldr	r2, [r7, #20]
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	88da      	ldrh	r2, [r3, #6]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	79fa      	ldrb	r2, [r7, #7]
 800c0fa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2200      	movs	r2, #0
 800c100:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2200      	movs	r2, #0
 800c106:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2200      	movs	r2, #0
 800c10c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	3330      	adds	r3, #48	; 0x30
 800c112:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c116:	2100      	movs	r1, #0
 800c118:	4618      	mov	r0, r3
 800c11a:	f7fd fdd6 	bl	8009cca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c11e:	79fb      	ldrb	r3, [r7, #7]
 800c120:	f003 0320 	and.w	r3, r3, #32
 800c124:	2b00      	cmp	r3, #0
 800c126:	d06e      	beq.n	800c206 <f_open+0x37e>
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d06a      	beq.n	800c206 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	68da      	ldr	r2, [r3, #12]
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	895b      	ldrh	r3, [r3, #10]
 800c13c:	461a      	mov	r2, r3
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	899b      	ldrh	r3, [r3, #12]
 800c142:	fb02 f303 	mul.w	r3, r2, r3
 800c146:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	68db      	ldr	r3, [r3, #12]
 800c152:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c154:	e016      	b.n	800c184 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7fe f87f 	bl	800a25e <get_fat>
 800c160:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c164:	2b01      	cmp	r3, #1
 800c166:	d802      	bhi.n	800c16e <f_open+0x2e6>
 800c168:	2302      	movs	r3, #2
 800c16a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c16e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c170:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c174:	d102      	bne.n	800c17c <f_open+0x2f4>
 800c176:	2301      	movs	r3, #1
 800c178:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c17c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c17e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c180:	1ad3      	subs	r3, r2, r3
 800c182:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c184:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d103      	bne.n	800c194 <f_open+0x30c>
 800c18c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c18e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c190:	429a      	cmp	r2, r3
 800c192:	d8e0      	bhi.n	800c156 <f_open+0x2ce>
				}
				fp->clust = clst;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c198:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c19a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d131      	bne.n	800c206 <f_open+0x37e>
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	899b      	ldrh	r3, [r3, #12]
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1aa:	fbb3 f1f2 	udiv	r1, r3, r2
 800c1ae:	fb01 f202 	mul.w	r2, r1, r2
 800c1b2:	1a9b      	subs	r3, r3, r2
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d026      	beq.n	800c206 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7fe f82f 	bl	800a220 <clust2sect>
 800c1c2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c1c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d103      	bne.n	800c1d2 <f_open+0x34a>
						res = FR_INT_ERR;
 800c1ca:	2302      	movs	r3, #2
 800c1cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c1d0:	e019      	b.n	800c206 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	899b      	ldrh	r3, [r3, #12]
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1da:	fbb3 f2f2 	udiv	r2, r3, r2
 800c1de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1e0:	441a      	add	r2, r3
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	7858      	ldrb	r0, [r3, #1]
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	6a1a      	ldr	r2, [r3, #32]
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	f7fd fc67 	bl	8009ac8 <disk_read>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d002      	beq.n	800c206 <f_open+0x37e>
 800c200:	2301      	movs	r3, #1
 800c202:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c206:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d002      	beq.n	800c214 <f_open+0x38c>
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2200      	movs	r2, #0
 800c212:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c214:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3768      	adds	r7, #104	; 0x68
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b08c      	sub	sp, #48	; 0x30
 800c224:	af00      	add	r7, sp, #0
 800c226:	60f8      	str	r0, [r7, #12]
 800c228:	60b9      	str	r1, [r7, #8]
 800c22a:	607a      	str	r2, [r7, #4]
 800c22c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	2200      	movs	r2, #0
 800c236:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f107 0210 	add.w	r2, r7, #16
 800c23e:	4611      	mov	r1, r2
 800c240:	4618      	mov	r0, r3
 800c242:	f7ff fda5 	bl	800bd90 <validate>
 800c246:	4603      	mov	r3, r0
 800c248:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c24c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c250:	2b00      	cmp	r3, #0
 800c252:	d107      	bne.n	800c264 <f_write+0x44>
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	7d5b      	ldrb	r3, [r3, #21]
 800c258:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c25c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c260:	2b00      	cmp	r3, #0
 800c262:	d002      	beq.n	800c26a <f_write+0x4a>
 800c264:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c268:	e16a      	b.n	800c540 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	7d1b      	ldrb	r3, [r3, #20]
 800c26e:	f003 0302 	and.w	r3, r3, #2
 800c272:	2b00      	cmp	r3, #0
 800c274:	d101      	bne.n	800c27a <f_write+0x5a>
 800c276:	2307      	movs	r3, #7
 800c278:	e162      	b.n	800c540 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	699a      	ldr	r2, [r3, #24]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	441a      	add	r2, r3
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	699b      	ldr	r3, [r3, #24]
 800c286:	429a      	cmp	r2, r3
 800c288:	f080 814c 	bcs.w	800c524 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	699b      	ldr	r3, [r3, #24]
 800c290:	43db      	mvns	r3, r3
 800c292:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c294:	e146      	b.n	800c524 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	699b      	ldr	r3, [r3, #24]
 800c29a:	693a      	ldr	r2, [r7, #16]
 800c29c:	8992      	ldrh	r2, [r2, #12]
 800c29e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c2a2:	fb01 f202 	mul.w	r2, r1, r2
 800c2a6:	1a9b      	subs	r3, r3, r2
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	f040 80f1 	bne.w	800c490 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	699b      	ldr	r3, [r3, #24]
 800c2b2:	693a      	ldr	r2, [r7, #16]
 800c2b4:	8992      	ldrh	r2, [r2, #12]
 800c2b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2ba:	693a      	ldr	r2, [r7, #16]
 800c2bc:	8952      	ldrh	r2, [r2, #10]
 800c2be:	3a01      	subs	r2, #1
 800c2c0:	4013      	ands	r3, r2
 800c2c2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c2c4:	69bb      	ldr	r3, [r7, #24]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d143      	bne.n	800c352 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	699b      	ldr	r3, [r3, #24]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d10c      	bne.n	800c2ec <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d11a      	bne.n	800c314 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7fe fa10 	bl	800a708 <create_chain>
 800c2e8:	62b8      	str	r0, [r7, #40]	; 0x28
 800c2ea:	e013      	b.n	800c314 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d007      	beq.n	800c304 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	699b      	ldr	r3, [r3, #24]
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	68f8      	ldr	r0, [r7, #12]
 800c2fc:	f7fe fa9c 	bl	800a838 <clmt_clust>
 800c300:	62b8      	str	r0, [r7, #40]	; 0x28
 800c302:	e007      	b.n	800c314 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c304:	68fa      	ldr	r2, [r7, #12]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	69db      	ldr	r3, [r3, #28]
 800c30a:	4619      	mov	r1, r3
 800c30c:	4610      	mov	r0, r2
 800c30e:	f7fe f9fb 	bl	800a708 <create_chain>
 800c312:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c316:	2b00      	cmp	r3, #0
 800c318:	f000 8109 	beq.w	800c52e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d104      	bne.n	800c32c <f_write+0x10c>
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2202      	movs	r2, #2
 800c326:	755a      	strb	r2, [r3, #21]
 800c328:	2302      	movs	r3, #2
 800c32a:	e109      	b.n	800c540 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c332:	d104      	bne.n	800c33e <f_write+0x11e>
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2201      	movs	r2, #1
 800c338:	755a      	strb	r2, [r3, #21]
 800c33a:	2301      	movs	r3, #1
 800c33c:	e100      	b.n	800c540 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c342:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	689b      	ldr	r3, [r3, #8]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d102      	bne.n	800c352 <f_write+0x132>
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c350:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	7d1b      	ldrb	r3, [r3, #20]
 800c356:	b25b      	sxtb	r3, r3
 800c358:	2b00      	cmp	r3, #0
 800c35a:	da18      	bge.n	800c38e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	7858      	ldrb	r0, [r3, #1]
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	6a1a      	ldr	r2, [r3, #32]
 800c36a:	2301      	movs	r3, #1
 800c36c:	f7fd fbcc 	bl	8009b08 <disk_write>
 800c370:	4603      	mov	r3, r0
 800c372:	2b00      	cmp	r3, #0
 800c374:	d004      	beq.n	800c380 <f_write+0x160>
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2201      	movs	r2, #1
 800c37a:	755a      	strb	r2, [r3, #21]
 800c37c:	2301      	movs	r3, #1
 800c37e:	e0df      	b.n	800c540 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	7d1b      	ldrb	r3, [r3, #20]
 800c384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c388:	b2da      	uxtb	r2, r3
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c38e:	693a      	ldr	r2, [r7, #16]
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	69db      	ldr	r3, [r3, #28]
 800c394:	4619      	mov	r1, r3
 800c396:	4610      	mov	r0, r2
 800c398:	f7fd ff42 	bl	800a220 <clust2sect>
 800c39c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d104      	bne.n	800c3ae <f_write+0x18e>
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2202      	movs	r2, #2
 800c3a8:	755a      	strb	r2, [r3, #21]
 800c3aa:	2302      	movs	r3, #2
 800c3ac:	e0c8      	b.n	800c540 <f_write+0x320>
			sect += csect;
 800c3ae:	697a      	ldr	r2, [r7, #20]
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	899b      	ldrh	r3, [r3, #12]
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3c2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c3c4:	6a3b      	ldr	r3, [r7, #32]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d043      	beq.n	800c452 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c3ca:	69ba      	ldr	r2, [r7, #24]
 800c3cc:	6a3b      	ldr	r3, [r7, #32]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	693a      	ldr	r2, [r7, #16]
 800c3d2:	8952      	ldrh	r2, [r2, #10]
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d905      	bls.n	800c3e4 <f_write+0x1c4>
					cc = fs->csize - csect;
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	895b      	ldrh	r3, [r3, #10]
 800c3dc:	461a      	mov	r2, r3
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	1ad3      	subs	r3, r2, r3
 800c3e2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	7858      	ldrb	r0, [r3, #1]
 800c3e8:	6a3b      	ldr	r3, [r7, #32]
 800c3ea:	697a      	ldr	r2, [r7, #20]
 800c3ec:	69f9      	ldr	r1, [r7, #28]
 800c3ee:	f7fd fb8b 	bl	8009b08 <disk_write>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d004      	beq.n	800c402 <f_write+0x1e2>
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	755a      	strb	r2, [r3, #21]
 800c3fe:	2301      	movs	r3, #1
 800c400:	e09e      	b.n	800c540 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	6a1a      	ldr	r2, [r3, #32]
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	1ad3      	subs	r3, r2, r3
 800c40a:	6a3a      	ldr	r2, [r7, #32]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d918      	bls.n	800c442 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	6a1a      	ldr	r2, [r3, #32]
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	1ad3      	subs	r3, r2, r3
 800c41e:	693a      	ldr	r2, [r7, #16]
 800c420:	8992      	ldrh	r2, [r2, #12]
 800c422:	fb02 f303 	mul.w	r3, r2, r3
 800c426:	69fa      	ldr	r2, [r7, #28]
 800c428:	18d1      	adds	r1, r2, r3
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	899b      	ldrh	r3, [r3, #12]
 800c42e:	461a      	mov	r2, r3
 800c430:	f7fd fc2a 	bl	8009c88 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	7d1b      	ldrb	r3, [r3, #20]
 800c438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c43c:	b2da      	uxtb	r2, r3
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	899b      	ldrh	r3, [r3, #12]
 800c446:	461a      	mov	r2, r3
 800c448:	6a3b      	ldr	r3, [r7, #32]
 800c44a:	fb02 f303 	mul.w	r3, r2, r3
 800c44e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c450:	e04b      	b.n	800c4ea <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	6a1b      	ldr	r3, [r3, #32]
 800c456:	697a      	ldr	r2, [r7, #20]
 800c458:	429a      	cmp	r2, r3
 800c45a:	d016      	beq.n	800c48a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	699a      	ldr	r2, [r3, #24]
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c464:	429a      	cmp	r2, r3
 800c466:	d210      	bcs.n	800c48a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	7858      	ldrb	r0, [r3, #1]
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c472:	2301      	movs	r3, #1
 800c474:	697a      	ldr	r2, [r7, #20]
 800c476:	f7fd fb27 	bl	8009ac8 <disk_read>
 800c47a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d004      	beq.n	800c48a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	2201      	movs	r2, #1
 800c484:	755a      	strb	r2, [r3, #21]
 800c486:	2301      	movs	r3, #1
 800c488:	e05a      	b.n	800c540 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	697a      	ldr	r2, [r7, #20]
 800c48e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	899b      	ldrh	r3, [r3, #12]
 800c494:	4618      	mov	r0, r3
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	699b      	ldr	r3, [r3, #24]
 800c49a:	693a      	ldr	r2, [r7, #16]
 800c49c:	8992      	ldrh	r2, [r2, #12]
 800c49e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c4a2:	fb01 f202 	mul.w	r2, r1, r2
 800c4a6:	1a9b      	subs	r3, r3, r2
 800c4a8:	1ac3      	subs	r3, r0, r3
 800c4aa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c4ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d901      	bls.n	800c4b8 <f_write+0x298>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	699b      	ldr	r3, [r3, #24]
 800c4c2:	693a      	ldr	r2, [r7, #16]
 800c4c4:	8992      	ldrh	r2, [r2, #12]
 800c4c6:	fbb3 f0f2 	udiv	r0, r3, r2
 800c4ca:	fb00 f202 	mul.w	r2, r0, r2
 800c4ce:	1a9b      	subs	r3, r3, r2
 800c4d0:	440b      	add	r3, r1
 800c4d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4d4:	69f9      	ldr	r1, [r7, #28]
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7fd fbd6 	bl	8009c88 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	7d1b      	ldrb	r3, [r3, #20]
 800c4e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c4e4:	b2da      	uxtb	r2, r3
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c4ea:	69fa      	ldr	r2, [r7, #28]
 800c4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ee:	4413      	add	r3, r2
 800c4f0:	61fb      	str	r3, [r7, #28]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	699a      	ldr	r2, [r3, #24]
 800c4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f8:	441a      	add	r2, r3
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	619a      	str	r2, [r3, #24]
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	68da      	ldr	r2, [r3, #12]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	699b      	ldr	r3, [r3, #24]
 800c506:	429a      	cmp	r2, r3
 800c508:	bf38      	it	cc
 800c50a:	461a      	movcc	r2, r3
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	60da      	str	r2, [r3, #12]
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c516:	441a      	add	r2, r3
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	601a      	str	r2, [r3, #0]
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2b00      	cmp	r3, #0
 800c528:	f47f aeb5 	bne.w	800c296 <f_write+0x76>
 800c52c:	e000      	b.n	800c530 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c52e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	7d1b      	ldrb	r3, [r3, #20]
 800c534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c538:	b2da      	uxtb	r2, r3
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c53e:	2300      	movs	r3, #0
}
 800c540:	4618      	mov	r0, r3
 800c542:	3730      	adds	r7, #48	; 0x30
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b086      	sub	sp, #24
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f107 0208 	add.w	r2, r7, #8
 800c556:	4611      	mov	r1, r2
 800c558:	4618      	mov	r0, r3
 800c55a:	f7ff fc19 	bl	800bd90 <validate>
 800c55e:	4603      	mov	r3, r0
 800c560:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c562:	7dfb      	ldrb	r3, [r7, #23]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d168      	bne.n	800c63a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	7d1b      	ldrb	r3, [r3, #20]
 800c56c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c570:	2b00      	cmp	r3, #0
 800c572:	d062      	beq.n	800c63a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	7d1b      	ldrb	r3, [r3, #20]
 800c578:	b25b      	sxtb	r3, r3
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	da15      	bge.n	800c5aa <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	7858      	ldrb	r0, [r3, #1]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6a1a      	ldr	r2, [r3, #32]
 800c58c:	2301      	movs	r3, #1
 800c58e:	f7fd fabb 	bl	8009b08 <disk_write>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d001      	beq.n	800c59c <f_sync+0x54>
 800c598:	2301      	movs	r3, #1
 800c59a:	e04f      	b.n	800c63c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	7d1b      	ldrb	r3, [r3, #20]
 800c5a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5a4:	b2da      	uxtb	r2, r3
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c5aa:	f7fd f9eb 	bl	8009984 <get_fattime>
 800c5ae:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c5b0:	68ba      	ldr	r2, [r7, #8]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	4610      	mov	r0, r2
 800c5ba:	f7fd fd93 	bl	800a0e4 <move_window>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c5c2:	7dfb      	ldrb	r3, [r7, #23]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d138      	bne.n	800c63a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5cc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	330b      	adds	r3, #11
 800c5d2:	781a      	ldrb	r2, [r3, #0]
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	330b      	adds	r3, #11
 800c5d8:	f042 0220 	orr.w	r2, r2, #32
 800c5dc:	b2d2      	uxtb	r2, r2
 800c5de:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6818      	ldr	r0, [r3, #0]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	689b      	ldr	r3, [r3, #8]
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	68f9      	ldr	r1, [r7, #12]
 800c5ec:	f7fe fb21 	bl	800ac32 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f103 021c 	add.w	r2, r3, #28
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	4610      	mov	r0, r2
 800c5fe:	f7fd fb17 	bl	8009c30 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	3316      	adds	r3, #22
 800c606:	6939      	ldr	r1, [r7, #16]
 800c608:	4618      	mov	r0, r3
 800c60a:	f7fd fb11 	bl	8009c30 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	3312      	adds	r3, #18
 800c612:	2100      	movs	r1, #0
 800c614:	4618      	mov	r0, r3
 800c616:	f7fd faf0 	bl	8009bfa <st_word>
					fs->wflag = 1;
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	2201      	movs	r2, #1
 800c61e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	4618      	mov	r0, r3
 800c624:	f7fd fd8c 	bl	800a140 <sync_fs>
 800c628:	4603      	mov	r3, r0
 800c62a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	7d1b      	ldrb	r3, [r3, #20]
 800c630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c634:	b2da      	uxtb	r2, r3
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c63a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3718      	adds	r7, #24
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f7ff ff7b 	bl	800c548 <f_sync>
 800c652:	4603      	mov	r3, r0
 800c654:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c656:	7bfb      	ldrb	r3, [r7, #15]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d118      	bne.n	800c68e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f107 0208 	add.w	r2, r7, #8
 800c662:	4611      	mov	r1, r2
 800c664:	4618      	mov	r0, r3
 800c666:	f7ff fb93 	bl	800bd90 <validate>
 800c66a:	4603      	mov	r3, r0
 800c66c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c66e:	7bfb      	ldrb	r3, [r7, #15]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d10c      	bne.n	800c68e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	691b      	ldr	r3, [r3, #16]
 800c678:	4618      	mov	r0, r3
 800c67a:	f7fd fc8f 	bl	8009f9c <dec_lock>
 800c67e:	4603      	mov	r3, r0
 800c680:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c682:	7bfb      	ldrb	r3, [r7, #15]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d102      	bne.n	800c68e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c68e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c690:	4618      	mov	r0, r3
 800c692:	3710      	adds	r7, #16
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}

0800c698 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b090      	sub	sp, #64	; 0x40
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f107 0208 	add.w	r2, r7, #8
 800c6a8:	4611      	mov	r1, r2
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7ff fb70 	bl	800bd90 <validate>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c6b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d103      	bne.n	800c6c6 <f_lseek+0x2e>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	7d5b      	ldrb	r3, [r3, #21]
 800c6c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c6c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d002      	beq.n	800c6d4 <f_lseek+0x3c>
 800c6ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c6d2:	e201      	b.n	800cad8 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	f000 80d9 	beq.w	800c890 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6e4:	d15a      	bne.n	800c79c <f_lseek+0x104>
			tbl = fp->cltbl;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ea:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ee:	1d1a      	adds	r2, r3, #4
 800c6f0:	627a      	str	r2, [r7, #36]	; 0x24
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	617b      	str	r3, [r7, #20]
 800c6f6:	2302      	movs	r3, #2
 800c6f8:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c702:	2b00      	cmp	r3, #0
 800c704:	d03a      	beq.n	800c77c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c708:	613b      	str	r3, [r7, #16]
 800c70a:	2300      	movs	r3, #0
 800c70c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c710:	3302      	adds	r3, #2
 800c712:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c716:	60fb      	str	r3, [r7, #12]
 800c718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71a:	3301      	adds	r3, #1
 800c71c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c722:	4618      	mov	r0, r3
 800c724:	f7fd fd9b 	bl	800a25e <get_fat>
 800c728:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d804      	bhi.n	800c73a <f_lseek+0xa2>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2202      	movs	r2, #2
 800c734:	755a      	strb	r2, [r3, #21]
 800c736:	2302      	movs	r3, #2
 800c738:	e1ce      	b.n	800cad8 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c740:	d104      	bne.n	800c74c <f_lseek+0xb4>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2201      	movs	r2, #1
 800c746:	755a      	strb	r2, [r3, #21]
 800c748:	2301      	movs	r3, #1
 800c74a:	e1c5      	b.n	800cad8 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	3301      	adds	r3, #1
 800c750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c752:	429a      	cmp	r2, r3
 800c754:	d0de      	beq.n	800c714 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d809      	bhi.n	800c772 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c760:	1d1a      	adds	r2, r3, #4
 800c762:	627a      	str	r2, [r7, #36]	; 0x24
 800c764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c766:	601a      	str	r2, [r3, #0]
 800c768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76a:	1d1a      	adds	r2, r3, #4
 800c76c:	627a      	str	r2, [r7, #36]	; 0x24
 800c76e:	693a      	ldr	r2, [r7, #16]
 800c770:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	69db      	ldr	r3, [r3, #28]
 800c776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c778:	429a      	cmp	r2, r3
 800c77a:	d3c4      	bcc.n	800c706 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c782:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d803      	bhi.n	800c794 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78e:	2200      	movs	r2, #0
 800c790:	601a      	str	r2, [r3, #0]
 800c792:	e19f      	b.n	800cad4 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c794:	2311      	movs	r3, #17
 800c796:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c79a:	e19b      	b.n	800cad4 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	683a      	ldr	r2, [r7, #0]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d902      	bls.n	800c7ac <f_lseek+0x114>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	68db      	ldr	r3, [r3, #12]
 800c7aa:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	683a      	ldr	r2, [r7, #0]
 800c7b0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f000 818d 	beq.w	800cad4 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	3b01      	subs	r3, #1
 800c7be:	4619      	mov	r1, r3
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f7fe f839 	bl	800a838 <clmt_clust>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c7cc:	68ba      	ldr	r2, [r7, #8]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	69db      	ldr	r3, [r3, #28]
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	4610      	mov	r0, r2
 800c7d6:	f7fd fd23 	bl	800a220 <clust2sect>
 800c7da:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c7dc:	69bb      	ldr	r3, [r7, #24]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d104      	bne.n	800c7ec <f_lseek+0x154>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2202      	movs	r2, #2
 800c7e6:	755a      	strb	r2, [r3, #21]
 800c7e8:	2302      	movs	r3, #2
 800c7ea:	e175      	b.n	800cad8 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	3b01      	subs	r3, #1
 800c7f0:	68ba      	ldr	r2, [r7, #8]
 800c7f2:	8992      	ldrh	r2, [r2, #12]
 800c7f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c7f8:	68ba      	ldr	r2, [r7, #8]
 800c7fa:	8952      	ldrh	r2, [r2, #10]
 800c7fc:	3a01      	subs	r2, #1
 800c7fe:	4013      	ands	r3, r2
 800c800:	69ba      	ldr	r2, [r7, #24]
 800c802:	4413      	add	r3, r2
 800c804:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	699b      	ldr	r3, [r3, #24]
 800c80a:	68ba      	ldr	r2, [r7, #8]
 800c80c:	8992      	ldrh	r2, [r2, #12]
 800c80e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c812:	fb01 f202 	mul.w	r2, r1, r2
 800c816:	1a9b      	subs	r3, r3, r2
 800c818:	2b00      	cmp	r3, #0
 800c81a:	f000 815b 	beq.w	800cad4 <f_lseek+0x43c>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6a1b      	ldr	r3, [r3, #32]
 800c822:	69ba      	ldr	r2, [r7, #24]
 800c824:	429a      	cmp	r2, r3
 800c826:	f000 8155 	beq.w	800cad4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	7d1b      	ldrb	r3, [r3, #20]
 800c82e:	b25b      	sxtb	r3, r3
 800c830:	2b00      	cmp	r3, #0
 800c832:	da18      	bge.n	800c866 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	7858      	ldrb	r0, [r3, #1]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6a1a      	ldr	r2, [r3, #32]
 800c842:	2301      	movs	r3, #1
 800c844:	f7fd f960 	bl	8009b08 <disk_write>
 800c848:	4603      	mov	r3, r0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d004      	beq.n	800c858 <f_lseek+0x1c0>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2201      	movs	r2, #1
 800c852:	755a      	strb	r2, [r3, #21]
 800c854:	2301      	movs	r3, #1
 800c856:	e13f      	b.n	800cad8 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	7d1b      	ldrb	r3, [r3, #20]
 800c85c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c860:	b2da      	uxtb	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	7858      	ldrb	r0, [r3, #1]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c870:	2301      	movs	r3, #1
 800c872:	69ba      	ldr	r2, [r7, #24]
 800c874:	f7fd f928 	bl	8009ac8 <disk_read>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d004      	beq.n	800c888 <f_lseek+0x1f0>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2201      	movs	r2, #1
 800c882:	755a      	strb	r2, [r3, #21]
 800c884:	2301      	movs	r3, #1
 800c886:	e127      	b.n	800cad8 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	69ba      	ldr	r2, [r7, #24]
 800c88c:	621a      	str	r2, [r3, #32]
 800c88e:	e121      	b.n	800cad4 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	683a      	ldr	r2, [r7, #0]
 800c896:	429a      	cmp	r2, r3
 800c898:	d908      	bls.n	800c8ac <f_lseek+0x214>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	7d1b      	ldrb	r3, [r3, #20]
 800c89e:	f003 0302 	and.w	r3, r3, #2
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d102      	bne.n	800c8ac <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	68db      	ldr	r3, [r3, #12]
 800c8aa:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	699b      	ldr	r3, [r3, #24]
 800c8b0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	637b      	str	r3, [r7, #52]	; 0x34
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8ba:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	f000 80b5 	beq.w	800ca2e <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	895b      	ldrh	r3, [r3, #10]
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	899b      	ldrh	r3, [r3, #12]
 800c8ce:	fb02 f303 	mul.w	r3, r2, r3
 800c8d2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c8d4:	6a3b      	ldr	r3, [r7, #32]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d01b      	beq.n	800c912 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	1e5a      	subs	r2, r3, #1
 800c8de:	69fb      	ldr	r3, [r7, #28]
 800c8e0:	fbb2 f2f3 	udiv	r2, r2, r3
 800c8e4:	6a3b      	ldr	r3, [r7, #32]
 800c8e6:	1e59      	subs	r1, r3, #1
 800c8e8:	69fb      	ldr	r3, [r7, #28]
 800c8ea:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d30f      	bcc.n	800c912 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c8f2:	6a3b      	ldr	r3, [r7, #32]
 800c8f4:	1e5a      	subs	r2, r3, #1
 800c8f6:	69fb      	ldr	r3, [r7, #28]
 800c8f8:	425b      	negs	r3, r3
 800c8fa:	401a      	ands	r2, r3
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	699b      	ldr	r3, [r3, #24]
 800c904:	683a      	ldr	r2, [r7, #0]
 800c906:	1ad3      	subs	r3, r2, r3
 800c908:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	69db      	ldr	r3, [r3, #28]
 800c90e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c910:	e022      	b.n	800c958 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	689b      	ldr	r3, [r3, #8]
 800c916:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d119      	bne.n	800c952 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2100      	movs	r1, #0
 800c922:	4618      	mov	r0, r3
 800c924:	f7fd fef0 	bl	800a708 <create_chain>
 800c928:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d104      	bne.n	800c93a <f_lseek+0x2a2>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2202      	movs	r2, #2
 800c934:	755a      	strb	r2, [r3, #21]
 800c936:	2302      	movs	r3, #2
 800c938:	e0ce      	b.n	800cad8 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c940:	d104      	bne.n	800c94c <f_lseek+0x2b4>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2201      	movs	r2, #1
 800c946:	755a      	strb	r2, [r3, #21]
 800c948:	2301      	movs	r3, #1
 800c94a:	e0c5      	b.n	800cad8 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c950:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c956:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d067      	beq.n	800ca2e <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800c95e:	e03a      	b.n	800c9d6 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800c960:	683a      	ldr	r2, [r7, #0]
 800c962:	69fb      	ldr	r3, [r7, #28]
 800c964:	1ad3      	subs	r3, r2, r3
 800c966:	603b      	str	r3, [r7, #0]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	699a      	ldr	r2, [r3, #24]
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	441a      	add	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	7d1b      	ldrb	r3, [r3, #20]
 800c978:	f003 0302 	and.w	r3, r3, #2
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d00b      	beq.n	800c998 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c984:	4618      	mov	r0, r3
 800c986:	f7fd febf 	bl	800a708 <create_chain>
 800c98a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d108      	bne.n	800c9a4 <f_lseek+0x30c>
							ofs = 0; break;
 800c992:	2300      	movs	r3, #0
 800c994:	603b      	str	r3, [r7, #0]
 800c996:	e022      	b.n	800c9de <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7fd fc5e 	bl	800a25e <get_fat>
 800c9a2:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9aa:	d104      	bne.n	800c9b6 <f_lseek+0x31e>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	755a      	strb	r2, [r3, #21]
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	e090      	b.n	800cad8 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	d904      	bls.n	800c9c6 <f_lseek+0x32e>
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	69db      	ldr	r3, [r3, #28]
 800c9c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d304      	bcc.n	800c9d0 <f_lseek+0x338>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2202      	movs	r2, #2
 800c9ca:	755a      	strb	r2, [r3, #21]
 800c9cc:	2302      	movs	r3, #2
 800c9ce:	e083      	b.n	800cad8 <f_lseek+0x440>
					fp->clust = clst;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9d4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c9d6:	683a      	ldr	r2, [r7, #0]
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d8c0      	bhi.n	800c960 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	699a      	ldr	r2, [r3, #24]
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	441a      	add	r2, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	899b      	ldrh	r3, [r3, #12]
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c9f6:	fb01 f202 	mul.w	r2, r1, r2
 800c9fa:	1a9b      	subs	r3, r3, r2
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d016      	beq.n	800ca2e <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca04:	4618      	mov	r0, r3
 800ca06:	f7fd fc0b 	bl	800a220 <clust2sect>
 800ca0a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ca0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d104      	bne.n	800ca1c <f_lseek+0x384>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2202      	movs	r2, #2
 800ca16:	755a      	strb	r2, [r3, #21]
 800ca18:	2302      	movs	r3, #2
 800ca1a:	e05d      	b.n	800cad8 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	899b      	ldrh	r3, [r3, #12]
 800ca20:	461a      	mov	r2, r3
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca2a:	4413      	add	r3, r2
 800ca2c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	699a      	ldr	r2, [r3, #24]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	68db      	ldr	r3, [r3, #12]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d90a      	bls.n	800ca50 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	699a      	ldr	r2, [r3, #24]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	7d1b      	ldrb	r3, [r3, #20]
 800ca46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca4a:	b2da      	uxtb	r2, r3
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	699b      	ldr	r3, [r3, #24]
 800ca54:	68ba      	ldr	r2, [r7, #8]
 800ca56:	8992      	ldrh	r2, [r2, #12]
 800ca58:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca5c:	fb01 f202 	mul.w	r2, r1, r2
 800ca60:	1a9b      	subs	r3, r3, r2
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d036      	beq.n	800cad4 <f_lseek+0x43c>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6a1b      	ldr	r3, [r3, #32]
 800ca6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d031      	beq.n	800cad4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	7d1b      	ldrb	r3, [r3, #20]
 800ca74:	b25b      	sxtb	r3, r3
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	da18      	bge.n	800caac <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	7858      	ldrb	r0, [r3, #1]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6a1a      	ldr	r2, [r3, #32]
 800ca88:	2301      	movs	r3, #1
 800ca8a:	f7fd f83d 	bl	8009b08 <disk_write>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d004      	beq.n	800ca9e <f_lseek+0x406>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2201      	movs	r2, #1
 800ca98:	755a      	strb	r2, [r3, #21]
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	e01c      	b.n	800cad8 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	7d1b      	ldrb	r3, [r3, #20]
 800caa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caa6:	b2da      	uxtb	r2, r3
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	7858      	ldrb	r0, [r3, #1]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cab6:	2301      	movs	r3, #1
 800cab8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800caba:	f7fd f805 	bl	8009ac8 <disk_read>
 800cabe:	4603      	mov	r3, r0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d004      	beq.n	800cace <f_lseek+0x436>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2201      	movs	r2, #1
 800cac8:	755a      	strb	r2, [r3, #21]
 800caca:	2301      	movs	r3, #1
 800cacc:	e004      	b.n	800cad8 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cad2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800cad4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3740      	adds	r7, #64	; 0x40
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	460b      	mov	r3, r1
 800caea:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800caec:	78fb      	ldrb	r3, [r7, #3]
 800caee:	2b0a      	cmp	r3, #10
 800caf0:	d103      	bne.n	800cafa <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800caf2:	210d      	movs	r1, #13
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f7ff fff3 	bl	800cae0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	db25      	blt.n	800cb52 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	1c5a      	adds	r2, r3, #1
 800cb0a:	60fa      	str	r2, [r7, #12]
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	4413      	add	r3, r2
 800cb10:	78fa      	ldrb	r2, [r7, #3]
 800cb12:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2b3c      	cmp	r3, #60	; 0x3c
 800cb18:	dd12      	ble.n	800cb40 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6818      	ldr	r0, [r3, #0]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f103 010c 	add.w	r1, r3, #12
 800cb24:	68fa      	ldr	r2, [r7, #12]
 800cb26:	f107 0308 	add.w	r3, r7, #8
 800cb2a:	f7ff fb79 	bl	800c220 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800cb2e:	68ba      	ldr	r2, [r7, #8]
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d101      	bne.n	800cb3a <putc_bfd+0x5a>
 800cb36:	2300      	movs	r3, #0
 800cb38:	e001      	b.n	800cb3e <putc_bfd+0x5e>
 800cb3a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb3e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	68fa      	ldr	r2, [r7, #12]
 800cb44:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	689b      	ldr	r3, [r3, #8]
 800cb4a:	1c5a      	adds	r2, r3, #1
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	609a      	str	r2, [r3, #8]
 800cb50:	e000      	b.n	800cb54 <putc_bfd+0x74>
	if (i < 0) return;
 800cb52:	bf00      	nop
}
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800cb5a:	b580      	push	{r7, lr}
 800cb5c:	b084      	sub	sp, #16
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	db16      	blt.n	800cb98 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6818      	ldr	r0, [r3, #0]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f103 010c 	add.w	r1, r3, #12
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	461a      	mov	r2, r3
 800cb7a:	f107 030c 	add.w	r3, r7, #12
 800cb7e:	f7ff fb4f 	bl	800c220 <f_write>
 800cb82:	4603      	mov	r3, r0
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d107      	bne.n	800cb98 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	68fa      	ldr	r2, [r7, #12]
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d102      	bne.n	800cb98 <putc_flush+0x3e>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	689b      	ldr	r3, [r3, #8]
 800cb96:	e001      	b.n	800cb9c <putc_flush+0x42>
	return EOF;
 800cb98:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3710      	adds	r7, #16
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b083      	sub	sp, #12
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	683a      	ldr	r2, [r7, #0]
 800cbb2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	605a      	str	r2, [r3, #4]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	685a      	ldr	r2, [r3, #4]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	609a      	str	r2, [r3, #8]
}
 800cbc2:	bf00      	nop
 800cbc4:	370c      	adds	r7, #12
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr

0800cbce <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b096      	sub	sp, #88	; 0x58
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
 800cbd6:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800cbd8:	f107 030c 	add.w	r3, r7, #12
 800cbdc:	6839      	ldr	r1, [r7, #0]
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7ff ffe0 	bl	800cba4 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800cbe4:	e009      	b.n	800cbfa <f_puts+0x2c>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	1c5a      	adds	r2, r3, #1
 800cbea:	607a      	str	r2, [r7, #4]
 800cbec:	781a      	ldrb	r2, [r3, #0]
 800cbee:	f107 030c 	add.w	r3, r7, #12
 800cbf2:	4611      	mov	r1, r2
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7ff ff73 	bl	800cae0 <putc_bfd>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d1f1      	bne.n	800cbe6 <f_puts+0x18>
	return putc_flush(&pb);
 800cc02:	f107 030c 	add.w	r3, r7, #12
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7ff ffa7 	bl	800cb5a <putc_flush>
 800cc0c:	4603      	mov	r3, r0
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3758      	adds	r7, #88	; 0x58
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
	...

0800cc18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b087      	sub	sp, #28
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	4613      	mov	r3, r2
 800cc24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cc26:	2301      	movs	r3, #1
 800cc28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cc2e:	4b1f      	ldr	r3, [pc, #124]	; (800ccac <FATFS_LinkDriverEx+0x94>)
 800cc30:	7a5b      	ldrb	r3, [r3, #9]
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d131      	bne.n	800cc9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cc38:	4b1c      	ldr	r3, [pc, #112]	; (800ccac <FATFS_LinkDriverEx+0x94>)
 800cc3a:	7a5b      	ldrb	r3, [r3, #9]
 800cc3c:	b2db      	uxtb	r3, r3
 800cc3e:	461a      	mov	r2, r3
 800cc40:	4b1a      	ldr	r3, [pc, #104]	; (800ccac <FATFS_LinkDriverEx+0x94>)
 800cc42:	2100      	movs	r1, #0
 800cc44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cc46:	4b19      	ldr	r3, [pc, #100]	; (800ccac <FATFS_LinkDriverEx+0x94>)
 800cc48:	7a5b      	ldrb	r3, [r3, #9]
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	4a17      	ldr	r2, [pc, #92]	; (800ccac <FATFS_LinkDriverEx+0x94>)
 800cc4e:	009b      	lsls	r3, r3, #2
 800cc50:	4413      	add	r3, r2
 800cc52:	68fa      	ldr	r2, [r7, #12]
 800cc54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cc56:	4b15      	ldr	r3, [pc, #84]	; (800ccac <FATFS_LinkDriverEx+0x94>)
 800cc58:	7a5b      	ldrb	r3, [r3, #9]
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	4b13      	ldr	r3, [pc, #76]	; (800ccac <FATFS_LinkDriverEx+0x94>)
 800cc60:	4413      	add	r3, r2
 800cc62:	79fa      	ldrb	r2, [r7, #7]
 800cc64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cc66:	4b11      	ldr	r3, [pc, #68]	; (800ccac <FATFS_LinkDriverEx+0x94>)
 800cc68:	7a5b      	ldrb	r3, [r3, #9]
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	1c5a      	adds	r2, r3, #1
 800cc6e:	b2d1      	uxtb	r1, r2
 800cc70:	4a0e      	ldr	r2, [pc, #56]	; (800ccac <FATFS_LinkDriverEx+0x94>)
 800cc72:	7251      	strb	r1, [r2, #9]
 800cc74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cc76:	7dbb      	ldrb	r3, [r7, #22]
 800cc78:	3330      	adds	r3, #48	; 0x30
 800cc7a:	b2da      	uxtb	r2, r3
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	3301      	adds	r3, #1
 800cc84:	223a      	movs	r2, #58	; 0x3a
 800cc86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	3302      	adds	r3, #2
 800cc8c:	222f      	movs	r2, #47	; 0x2f
 800cc8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	3303      	adds	r3, #3
 800cc94:	2200      	movs	r2, #0
 800cc96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cc9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	371c      	adds	r7, #28
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr
 800ccaa:	bf00      	nop
 800ccac:	20002b10 	.word	0x20002b10

0800ccb0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ccba:	2200      	movs	r2, #0
 800ccbc:	6839      	ldr	r1, [r7, #0]
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f7ff ffaa 	bl	800cc18 <FATFS_LinkDriverEx>
 800ccc4:	4603      	mov	r3, r0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3708      	adds	r7, #8
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
	...

0800ccd0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b085      	sub	sp, #20
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	6039      	str	r1, [r7, #0]
 800ccda:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ccdc:	88fb      	ldrh	r3, [r7, #6]
 800ccde:	2b7f      	cmp	r3, #127	; 0x7f
 800cce0:	d802      	bhi.n	800cce8 <ff_convert+0x18>
		c = chr;
 800cce2:	88fb      	ldrh	r3, [r7, #6]
 800cce4:	81fb      	strh	r3, [r7, #14]
 800cce6:	e025      	b.n	800cd34 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d00b      	beq.n	800cd06 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ccee:	88fb      	ldrh	r3, [r7, #6]
 800ccf0:	2bff      	cmp	r3, #255	; 0xff
 800ccf2:	d805      	bhi.n	800cd00 <ff_convert+0x30>
 800ccf4:	88fb      	ldrh	r3, [r7, #6]
 800ccf6:	3b80      	subs	r3, #128	; 0x80
 800ccf8:	4a12      	ldr	r2, [pc, #72]	; (800cd44 <ff_convert+0x74>)
 800ccfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccfe:	e000      	b.n	800cd02 <ff_convert+0x32>
 800cd00:	2300      	movs	r3, #0
 800cd02:	81fb      	strh	r3, [r7, #14]
 800cd04:	e016      	b.n	800cd34 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800cd06:	2300      	movs	r3, #0
 800cd08:	81fb      	strh	r3, [r7, #14]
 800cd0a:	e009      	b.n	800cd20 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800cd0c:	89fb      	ldrh	r3, [r7, #14]
 800cd0e:	4a0d      	ldr	r2, [pc, #52]	; (800cd44 <ff_convert+0x74>)
 800cd10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd14:	88fa      	ldrh	r2, [r7, #6]
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d006      	beq.n	800cd28 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800cd1a:	89fb      	ldrh	r3, [r7, #14]
 800cd1c:	3301      	adds	r3, #1
 800cd1e:	81fb      	strh	r3, [r7, #14]
 800cd20:	89fb      	ldrh	r3, [r7, #14]
 800cd22:	2b7f      	cmp	r3, #127	; 0x7f
 800cd24:	d9f2      	bls.n	800cd0c <ff_convert+0x3c>
 800cd26:	e000      	b.n	800cd2a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800cd28:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800cd2a:	89fb      	ldrh	r3, [r7, #14]
 800cd2c:	3380      	adds	r3, #128	; 0x80
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	b2db      	uxtb	r3, r3
 800cd32:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cd34:	89fb      	ldrh	r3, [r7, #14]
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3714      	adds	r7, #20
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr
 800cd42:	bf00      	nop
 800cd44:	0801143c 	.word	0x0801143c

0800cd48 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b087      	sub	sp, #28
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	4603      	mov	r3, r0
 800cd50:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800cd52:	88fb      	ldrh	r3, [r7, #6]
 800cd54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd58:	d201      	bcs.n	800cd5e <ff_wtoupper+0x16>
 800cd5a:	4b3e      	ldr	r3, [pc, #248]	; (800ce54 <ff_wtoupper+0x10c>)
 800cd5c:	e000      	b.n	800cd60 <ff_wtoupper+0x18>
 800cd5e:	4b3e      	ldr	r3, [pc, #248]	; (800ce58 <ff_wtoupper+0x110>)
 800cd60:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	1c9a      	adds	r2, r3, #2
 800cd66:	617a      	str	r2, [r7, #20]
 800cd68:	881b      	ldrh	r3, [r3, #0]
 800cd6a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800cd6c:	8a7b      	ldrh	r3, [r7, #18]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d068      	beq.n	800ce44 <ff_wtoupper+0xfc>
 800cd72:	88fa      	ldrh	r2, [r7, #6]
 800cd74:	8a7b      	ldrh	r3, [r7, #18]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d364      	bcc.n	800ce44 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	1c9a      	adds	r2, r3, #2
 800cd7e:	617a      	str	r2, [r7, #20]
 800cd80:	881b      	ldrh	r3, [r3, #0]
 800cd82:	823b      	strh	r3, [r7, #16]
 800cd84:	8a3b      	ldrh	r3, [r7, #16]
 800cd86:	0a1b      	lsrs	r3, r3, #8
 800cd88:	81fb      	strh	r3, [r7, #14]
 800cd8a:	8a3b      	ldrh	r3, [r7, #16]
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800cd90:	88fa      	ldrh	r2, [r7, #6]
 800cd92:	8a79      	ldrh	r1, [r7, #18]
 800cd94:	8a3b      	ldrh	r3, [r7, #16]
 800cd96:	440b      	add	r3, r1
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	da49      	bge.n	800ce30 <ff_wtoupper+0xe8>
			switch (cmd) {
 800cd9c:	89fb      	ldrh	r3, [r7, #14]
 800cd9e:	2b08      	cmp	r3, #8
 800cda0:	d84f      	bhi.n	800ce42 <ff_wtoupper+0xfa>
 800cda2:	a201      	add	r2, pc, #4	; (adr r2, 800cda8 <ff_wtoupper+0x60>)
 800cda4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cda8:	0800cdcd 	.word	0x0800cdcd
 800cdac:	0800cddf 	.word	0x0800cddf
 800cdb0:	0800cdf5 	.word	0x0800cdf5
 800cdb4:	0800cdfd 	.word	0x0800cdfd
 800cdb8:	0800ce05 	.word	0x0800ce05
 800cdbc:	0800ce0d 	.word	0x0800ce0d
 800cdc0:	0800ce15 	.word	0x0800ce15
 800cdc4:	0800ce1d 	.word	0x0800ce1d
 800cdc8:	0800ce25 	.word	0x0800ce25
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800cdcc:	88fa      	ldrh	r2, [r7, #6]
 800cdce:	8a7b      	ldrh	r3, [r7, #18]
 800cdd0:	1ad3      	subs	r3, r2, r3
 800cdd2:	005b      	lsls	r3, r3, #1
 800cdd4:	697a      	ldr	r2, [r7, #20]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	881b      	ldrh	r3, [r3, #0]
 800cdda:	80fb      	strh	r3, [r7, #6]
 800cddc:	e027      	b.n	800ce2e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800cdde:	88fa      	ldrh	r2, [r7, #6]
 800cde0:	8a7b      	ldrh	r3, [r7, #18]
 800cde2:	1ad3      	subs	r3, r2, r3
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	f003 0301 	and.w	r3, r3, #1
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	88fa      	ldrh	r2, [r7, #6]
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	80fb      	strh	r3, [r7, #6]
 800cdf2:	e01c      	b.n	800ce2e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800cdf4:	88fb      	ldrh	r3, [r7, #6]
 800cdf6:	3b10      	subs	r3, #16
 800cdf8:	80fb      	strh	r3, [r7, #6]
 800cdfa:	e018      	b.n	800ce2e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800cdfc:	88fb      	ldrh	r3, [r7, #6]
 800cdfe:	3b20      	subs	r3, #32
 800ce00:	80fb      	strh	r3, [r7, #6]
 800ce02:	e014      	b.n	800ce2e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ce04:	88fb      	ldrh	r3, [r7, #6]
 800ce06:	3b30      	subs	r3, #48	; 0x30
 800ce08:	80fb      	strh	r3, [r7, #6]
 800ce0a:	e010      	b.n	800ce2e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ce0c:	88fb      	ldrh	r3, [r7, #6]
 800ce0e:	3b1a      	subs	r3, #26
 800ce10:	80fb      	strh	r3, [r7, #6]
 800ce12:	e00c      	b.n	800ce2e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ce14:	88fb      	ldrh	r3, [r7, #6]
 800ce16:	3308      	adds	r3, #8
 800ce18:	80fb      	strh	r3, [r7, #6]
 800ce1a:	e008      	b.n	800ce2e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ce1c:	88fb      	ldrh	r3, [r7, #6]
 800ce1e:	3b50      	subs	r3, #80	; 0x50
 800ce20:	80fb      	strh	r3, [r7, #6]
 800ce22:	e004      	b.n	800ce2e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ce24:	88fb      	ldrh	r3, [r7, #6]
 800ce26:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ce2a:	80fb      	strh	r3, [r7, #6]
 800ce2c:	bf00      	nop
			}
			break;
 800ce2e:	e008      	b.n	800ce42 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ce30:	89fb      	ldrh	r3, [r7, #14]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d195      	bne.n	800cd62 <ff_wtoupper+0x1a>
 800ce36:	8a3b      	ldrh	r3, [r7, #16]
 800ce38:	005b      	lsls	r3, r3, #1
 800ce3a:	697a      	ldr	r2, [r7, #20]
 800ce3c:	4413      	add	r3, r2
 800ce3e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ce40:	e78f      	b.n	800cd62 <ff_wtoupper+0x1a>
			break;
 800ce42:	bf00      	nop
	}

	return chr;
 800ce44:	88fb      	ldrh	r3, [r7, #6]
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	371c      	adds	r7, #28
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr
 800ce52:	bf00      	nop
 800ce54:	0801153c 	.word	0x0801153c
 800ce58:	08011730 	.word	0x08011730

0800ce5c <__errno>:
 800ce5c:	4b01      	ldr	r3, [pc, #4]	; (800ce64 <__errno+0x8>)
 800ce5e:	6818      	ldr	r0, [r3, #0]
 800ce60:	4770      	bx	lr
 800ce62:	bf00      	nop
 800ce64:	20000024 	.word	0x20000024

0800ce68 <__libc_init_array>:
 800ce68:	b570      	push	{r4, r5, r6, lr}
 800ce6a:	4d0d      	ldr	r5, [pc, #52]	; (800cea0 <__libc_init_array+0x38>)
 800ce6c:	4c0d      	ldr	r4, [pc, #52]	; (800cea4 <__libc_init_array+0x3c>)
 800ce6e:	1b64      	subs	r4, r4, r5
 800ce70:	10a4      	asrs	r4, r4, #2
 800ce72:	2600      	movs	r6, #0
 800ce74:	42a6      	cmp	r6, r4
 800ce76:	d109      	bne.n	800ce8c <__libc_init_array+0x24>
 800ce78:	4d0b      	ldr	r5, [pc, #44]	; (800cea8 <__libc_init_array+0x40>)
 800ce7a:	4c0c      	ldr	r4, [pc, #48]	; (800ceac <__libc_init_array+0x44>)
 800ce7c:	f004 fa04 	bl	8011288 <_init>
 800ce80:	1b64      	subs	r4, r4, r5
 800ce82:	10a4      	asrs	r4, r4, #2
 800ce84:	2600      	movs	r6, #0
 800ce86:	42a6      	cmp	r6, r4
 800ce88:	d105      	bne.n	800ce96 <__libc_init_array+0x2e>
 800ce8a:	bd70      	pop	{r4, r5, r6, pc}
 800ce8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce90:	4798      	blx	r3
 800ce92:	3601      	adds	r6, #1
 800ce94:	e7ee      	b.n	800ce74 <__libc_init_array+0xc>
 800ce96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce9a:	4798      	blx	r3
 800ce9c:	3601      	adds	r6, #1
 800ce9e:	e7f2      	b.n	800ce86 <__libc_init_array+0x1e>
 800cea0:	08011c94 	.word	0x08011c94
 800cea4:	08011c94 	.word	0x08011c94
 800cea8:	08011c94 	.word	0x08011c94
 800ceac:	08011c98 	.word	0x08011c98

0800ceb0 <malloc>:
 800ceb0:	4b02      	ldr	r3, [pc, #8]	; (800cebc <malloc+0xc>)
 800ceb2:	4601      	mov	r1, r0
 800ceb4:	6818      	ldr	r0, [r3, #0]
 800ceb6:	f000 b88d 	b.w	800cfd4 <_malloc_r>
 800ceba:	bf00      	nop
 800cebc:	20000024 	.word	0x20000024

0800cec0 <free>:
 800cec0:	4b02      	ldr	r3, [pc, #8]	; (800cecc <free+0xc>)
 800cec2:	4601      	mov	r1, r0
 800cec4:	6818      	ldr	r0, [r3, #0]
 800cec6:	f000 b819 	b.w	800cefc <_free_r>
 800ceca:	bf00      	nop
 800cecc:	20000024 	.word	0x20000024

0800ced0 <memcpy>:
 800ced0:	440a      	add	r2, r1
 800ced2:	4291      	cmp	r1, r2
 800ced4:	f100 33ff 	add.w	r3, r0, #4294967295
 800ced8:	d100      	bne.n	800cedc <memcpy+0xc>
 800ceda:	4770      	bx	lr
 800cedc:	b510      	push	{r4, lr}
 800cede:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cee2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cee6:	4291      	cmp	r1, r2
 800cee8:	d1f9      	bne.n	800cede <memcpy+0xe>
 800ceea:	bd10      	pop	{r4, pc}

0800ceec <memset>:
 800ceec:	4402      	add	r2, r0
 800ceee:	4603      	mov	r3, r0
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d100      	bne.n	800cef6 <memset+0xa>
 800cef4:	4770      	bx	lr
 800cef6:	f803 1b01 	strb.w	r1, [r3], #1
 800cefa:	e7f9      	b.n	800cef0 <memset+0x4>

0800cefc <_free_r>:
 800cefc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cefe:	2900      	cmp	r1, #0
 800cf00:	d044      	beq.n	800cf8c <_free_r+0x90>
 800cf02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf06:	9001      	str	r0, [sp, #4]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	f1a1 0404 	sub.w	r4, r1, #4
 800cf0e:	bfb8      	it	lt
 800cf10:	18e4      	addlt	r4, r4, r3
 800cf12:	f002 fdb1 	bl	800fa78 <__malloc_lock>
 800cf16:	4a1e      	ldr	r2, [pc, #120]	; (800cf90 <_free_r+0x94>)
 800cf18:	9801      	ldr	r0, [sp, #4]
 800cf1a:	6813      	ldr	r3, [r2, #0]
 800cf1c:	b933      	cbnz	r3, 800cf2c <_free_r+0x30>
 800cf1e:	6063      	str	r3, [r4, #4]
 800cf20:	6014      	str	r4, [r2, #0]
 800cf22:	b003      	add	sp, #12
 800cf24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf28:	f002 bdac 	b.w	800fa84 <__malloc_unlock>
 800cf2c:	42a3      	cmp	r3, r4
 800cf2e:	d908      	bls.n	800cf42 <_free_r+0x46>
 800cf30:	6825      	ldr	r5, [r4, #0]
 800cf32:	1961      	adds	r1, r4, r5
 800cf34:	428b      	cmp	r3, r1
 800cf36:	bf01      	itttt	eq
 800cf38:	6819      	ldreq	r1, [r3, #0]
 800cf3a:	685b      	ldreq	r3, [r3, #4]
 800cf3c:	1949      	addeq	r1, r1, r5
 800cf3e:	6021      	streq	r1, [r4, #0]
 800cf40:	e7ed      	b.n	800cf1e <_free_r+0x22>
 800cf42:	461a      	mov	r2, r3
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	b10b      	cbz	r3, 800cf4c <_free_r+0x50>
 800cf48:	42a3      	cmp	r3, r4
 800cf4a:	d9fa      	bls.n	800cf42 <_free_r+0x46>
 800cf4c:	6811      	ldr	r1, [r2, #0]
 800cf4e:	1855      	adds	r5, r2, r1
 800cf50:	42a5      	cmp	r5, r4
 800cf52:	d10b      	bne.n	800cf6c <_free_r+0x70>
 800cf54:	6824      	ldr	r4, [r4, #0]
 800cf56:	4421      	add	r1, r4
 800cf58:	1854      	adds	r4, r2, r1
 800cf5a:	42a3      	cmp	r3, r4
 800cf5c:	6011      	str	r1, [r2, #0]
 800cf5e:	d1e0      	bne.n	800cf22 <_free_r+0x26>
 800cf60:	681c      	ldr	r4, [r3, #0]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	6053      	str	r3, [r2, #4]
 800cf66:	4421      	add	r1, r4
 800cf68:	6011      	str	r1, [r2, #0]
 800cf6a:	e7da      	b.n	800cf22 <_free_r+0x26>
 800cf6c:	d902      	bls.n	800cf74 <_free_r+0x78>
 800cf6e:	230c      	movs	r3, #12
 800cf70:	6003      	str	r3, [r0, #0]
 800cf72:	e7d6      	b.n	800cf22 <_free_r+0x26>
 800cf74:	6825      	ldr	r5, [r4, #0]
 800cf76:	1961      	adds	r1, r4, r5
 800cf78:	428b      	cmp	r3, r1
 800cf7a:	bf04      	itt	eq
 800cf7c:	6819      	ldreq	r1, [r3, #0]
 800cf7e:	685b      	ldreq	r3, [r3, #4]
 800cf80:	6063      	str	r3, [r4, #4]
 800cf82:	bf04      	itt	eq
 800cf84:	1949      	addeq	r1, r1, r5
 800cf86:	6021      	streq	r1, [r4, #0]
 800cf88:	6054      	str	r4, [r2, #4]
 800cf8a:	e7ca      	b.n	800cf22 <_free_r+0x26>
 800cf8c:	b003      	add	sp, #12
 800cf8e:	bd30      	pop	{r4, r5, pc}
 800cf90:	20002b1c 	.word	0x20002b1c

0800cf94 <sbrk_aligned>:
 800cf94:	b570      	push	{r4, r5, r6, lr}
 800cf96:	4e0e      	ldr	r6, [pc, #56]	; (800cfd0 <sbrk_aligned+0x3c>)
 800cf98:	460c      	mov	r4, r1
 800cf9a:	6831      	ldr	r1, [r6, #0]
 800cf9c:	4605      	mov	r5, r0
 800cf9e:	b911      	cbnz	r1, 800cfa6 <sbrk_aligned+0x12>
 800cfa0:	f000 fcf6 	bl	800d990 <_sbrk_r>
 800cfa4:	6030      	str	r0, [r6, #0]
 800cfa6:	4621      	mov	r1, r4
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	f000 fcf1 	bl	800d990 <_sbrk_r>
 800cfae:	1c43      	adds	r3, r0, #1
 800cfb0:	d00a      	beq.n	800cfc8 <sbrk_aligned+0x34>
 800cfb2:	1cc4      	adds	r4, r0, #3
 800cfb4:	f024 0403 	bic.w	r4, r4, #3
 800cfb8:	42a0      	cmp	r0, r4
 800cfba:	d007      	beq.n	800cfcc <sbrk_aligned+0x38>
 800cfbc:	1a21      	subs	r1, r4, r0
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	f000 fce6 	bl	800d990 <_sbrk_r>
 800cfc4:	3001      	adds	r0, #1
 800cfc6:	d101      	bne.n	800cfcc <sbrk_aligned+0x38>
 800cfc8:	f04f 34ff 	mov.w	r4, #4294967295
 800cfcc:	4620      	mov	r0, r4
 800cfce:	bd70      	pop	{r4, r5, r6, pc}
 800cfd0:	20002b20 	.word	0x20002b20

0800cfd4 <_malloc_r>:
 800cfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfd8:	1ccd      	adds	r5, r1, #3
 800cfda:	f025 0503 	bic.w	r5, r5, #3
 800cfde:	3508      	adds	r5, #8
 800cfe0:	2d0c      	cmp	r5, #12
 800cfe2:	bf38      	it	cc
 800cfe4:	250c      	movcc	r5, #12
 800cfe6:	2d00      	cmp	r5, #0
 800cfe8:	4607      	mov	r7, r0
 800cfea:	db01      	blt.n	800cff0 <_malloc_r+0x1c>
 800cfec:	42a9      	cmp	r1, r5
 800cfee:	d905      	bls.n	800cffc <_malloc_r+0x28>
 800cff0:	230c      	movs	r3, #12
 800cff2:	603b      	str	r3, [r7, #0]
 800cff4:	2600      	movs	r6, #0
 800cff6:	4630      	mov	r0, r6
 800cff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cffc:	4e2e      	ldr	r6, [pc, #184]	; (800d0b8 <_malloc_r+0xe4>)
 800cffe:	f002 fd3b 	bl	800fa78 <__malloc_lock>
 800d002:	6833      	ldr	r3, [r6, #0]
 800d004:	461c      	mov	r4, r3
 800d006:	bb34      	cbnz	r4, 800d056 <_malloc_r+0x82>
 800d008:	4629      	mov	r1, r5
 800d00a:	4638      	mov	r0, r7
 800d00c:	f7ff ffc2 	bl	800cf94 <sbrk_aligned>
 800d010:	1c43      	adds	r3, r0, #1
 800d012:	4604      	mov	r4, r0
 800d014:	d14d      	bne.n	800d0b2 <_malloc_r+0xde>
 800d016:	6834      	ldr	r4, [r6, #0]
 800d018:	4626      	mov	r6, r4
 800d01a:	2e00      	cmp	r6, #0
 800d01c:	d140      	bne.n	800d0a0 <_malloc_r+0xcc>
 800d01e:	6823      	ldr	r3, [r4, #0]
 800d020:	4631      	mov	r1, r6
 800d022:	4638      	mov	r0, r7
 800d024:	eb04 0803 	add.w	r8, r4, r3
 800d028:	f000 fcb2 	bl	800d990 <_sbrk_r>
 800d02c:	4580      	cmp	r8, r0
 800d02e:	d13a      	bne.n	800d0a6 <_malloc_r+0xd2>
 800d030:	6821      	ldr	r1, [r4, #0]
 800d032:	3503      	adds	r5, #3
 800d034:	1a6d      	subs	r5, r5, r1
 800d036:	f025 0503 	bic.w	r5, r5, #3
 800d03a:	3508      	adds	r5, #8
 800d03c:	2d0c      	cmp	r5, #12
 800d03e:	bf38      	it	cc
 800d040:	250c      	movcc	r5, #12
 800d042:	4629      	mov	r1, r5
 800d044:	4638      	mov	r0, r7
 800d046:	f7ff ffa5 	bl	800cf94 <sbrk_aligned>
 800d04a:	3001      	adds	r0, #1
 800d04c:	d02b      	beq.n	800d0a6 <_malloc_r+0xd2>
 800d04e:	6823      	ldr	r3, [r4, #0]
 800d050:	442b      	add	r3, r5
 800d052:	6023      	str	r3, [r4, #0]
 800d054:	e00e      	b.n	800d074 <_malloc_r+0xa0>
 800d056:	6822      	ldr	r2, [r4, #0]
 800d058:	1b52      	subs	r2, r2, r5
 800d05a:	d41e      	bmi.n	800d09a <_malloc_r+0xc6>
 800d05c:	2a0b      	cmp	r2, #11
 800d05e:	d916      	bls.n	800d08e <_malloc_r+0xba>
 800d060:	1961      	adds	r1, r4, r5
 800d062:	42a3      	cmp	r3, r4
 800d064:	6025      	str	r5, [r4, #0]
 800d066:	bf18      	it	ne
 800d068:	6059      	strne	r1, [r3, #4]
 800d06a:	6863      	ldr	r3, [r4, #4]
 800d06c:	bf08      	it	eq
 800d06e:	6031      	streq	r1, [r6, #0]
 800d070:	5162      	str	r2, [r4, r5]
 800d072:	604b      	str	r3, [r1, #4]
 800d074:	4638      	mov	r0, r7
 800d076:	f104 060b 	add.w	r6, r4, #11
 800d07a:	f002 fd03 	bl	800fa84 <__malloc_unlock>
 800d07e:	f026 0607 	bic.w	r6, r6, #7
 800d082:	1d23      	adds	r3, r4, #4
 800d084:	1af2      	subs	r2, r6, r3
 800d086:	d0b6      	beq.n	800cff6 <_malloc_r+0x22>
 800d088:	1b9b      	subs	r3, r3, r6
 800d08a:	50a3      	str	r3, [r4, r2]
 800d08c:	e7b3      	b.n	800cff6 <_malloc_r+0x22>
 800d08e:	6862      	ldr	r2, [r4, #4]
 800d090:	42a3      	cmp	r3, r4
 800d092:	bf0c      	ite	eq
 800d094:	6032      	streq	r2, [r6, #0]
 800d096:	605a      	strne	r2, [r3, #4]
 800d098:	e7ec      	b.n	800d074 <_malloc_r+0xa0>
 800d09a:	4623      	mov	r3, r4
 800d09c:	6864      	ldr	r4, [r4, #4]
 800d09e:	e7b2      	b.n	800d006 <_malloc_r+0x32>
 800d0a0:	4634      	mov	r4, r6
 800d0a2:	6876      	ldr	r6, [r6, #4]
 800d0a4:	e7b9      	b.n	800d01a <_malloc_r+0x46>
 800d0a6:	230c      	movs	r3, #12
 800d0a8:	603b      	str	r3, [r7, #0]
 800d0aa:	4638      	mov	r0, r7
 800d0ac:	f002 fcea 	bl	800fa84 <__malloc_unlock>
 800d0b0:	e7a1      	b.n	800cff6 <_malloc_r+0x22>
 800d0b2:	6025      	str	r5, [r4, #0]
 800d0b4:	e7de      	b.n	800d074 <_malloc_r+0xa0>
 800d0b6:	bf00      	nop
 800d0b8:	20002b1c 	.word	0x20002b1c

0800d0bc <__cvt>:
 800d0bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0c0:	ec55 4b10 	vmov	r4, r5, d0
 800d0c4:	2d00      	cmp	r5, #0
 800d0c6:	460e      	mov	r6, r1
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	462b      	mov	r3, r5
 800d0cc:	bfbb      	ittet	lt
 800d0ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d0d2:	461d      	movlt	r5, r3
 800d0d4:	2300      	movge	r3, #0
 800d0d6:	232d      	movlt	r3, #45	; 0x2d
 800d0d8:	700b      	strb	r3, [r1, #0]
 800d0da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d0e0:	4691      	mov	r9, r2
 800d0e2:	f023 0820 	bic.w	r8, r3, #32
 800d0e6:	bfbc      	itt	lt
 800d0e8:	4622      	movlt	r2, r4
 800d0ea:	4614      	movlt	r4, r2
 800d0ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d0f0:	d005      	beq.n	800d0fe <__cvt+0x42>
 800d0f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d0f6:	d100      	bne.n	800d0fa <__cvt+0x3e>
 800d0f8:	3601      	adds	r6, #1
 800d0fa:	2102      	movs	r1, #2
 800d0fc:	e000      	b.n	800d100 <__cvt+0x44>
 800d0fe:	2103      	movs	r1, #3
 800d100:	ab03      	add	r3, sp, #12
 800d102:	9301      	str	r3, [sp, #4]
 800d104:	ab02      	add	r3, sp, #8
 800d106:	9300      	str	r3, [sp, #0]
 800d108:	ec45 4b10 	vmov	d0, r4, r5
 800d10c:	4653      	mov	r3, sl
 800d10e:	4632      	mov	r2, r6
 800d110:	f001 fb3e 	bl	800e790 <_dtoa_r>
 800d114:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d118:	4607      	mov	r7, r0
 800d11a:	d102      	bne.n	800d122 <__cvt+0x66>
 800d11c:	f019 0f01 	tst.w	r9, #1
 800d120:	d022      	beq.n	800d168 <__cvt+0xac>
 800d122:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d126:	eb07 0906 	add.w	r9, r7, r6
 800d12a:	d110      	bne.n	800d14e <__cvt+0x92>
 800d12c:	783b      	ldrb	r3, [r7, #0]
 800d12e:	2b30      	cmp	r3, #48	; 0x30
 800d130:	d10a      	bne.n	800d148 <__cvt+0x8c>
 800d132:	2200      	movs	r2, #0
 800d134:	2300      	movs	r3, #0
 800d136:	4620      	mov	r0, r4
 800d138:	4629      	mov	r1, r5
 800d13a:	f7f3 fccd 	bl	8000ad8 <__aeabi_dcmpeq>
 800d13e:	b918      	cbnz	r0, 800d148 <__cvt+0x8c>
 800d140:	f1c6 0601 	rsb	r6, r6, #1
 800d144:	f8ca 6000 	str.w	r6, [sl]
 800d148:	f8da 3000 	ldr.w	r3, [sl]
 800d14c:	4499      	add	r9, r3
 800d14e:	2200      	movs	r2, #0
 800d150:	2300      	movs	r3, #0
 800d152:	4620      	mov	r0, r4
 800d154:	4629      	mov	r1, r5
 800d156:	f7f3 fcbf 	bl	8000ad8 <__aeabi_dcmpeq>
 800d15a:	b108      	cbz	r0, 800d160 <__cvt+0xa4>
 800d15c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d160:	2230      	movs	r2, #48	; 0x30
 800d162:	9b03      	ldr	r3, [sp, #12]
 800d164:	454b      	cmp	r3, r9
 800d166:	d307      	bcc.n	800d178 <__cvt+0xbc>
 800d168:	9b03      	ldr	r3, [sp, #12]
 800d16a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d16c:	1bdb      	subs	r3, r3, r7
 800d16e:	4638      	mov	r0, r7
 800d170:	6013      	str	r3, [r2, #0]
 800d172:	b004      	add	sp, #16
 800d174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d178:	1c59      	adds	r1, r3, #1
 800d17a:	9103      	str	r1, [sp, #12]
 800d17c:	701a      	strb	r2, [r3, #0]
 800d17e:	e7f0      	b.n	800d162 <__cvt+0xa6>

0800d180 <__exponent>:
 800d180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d182:	4603      	mov	r3, r0
 800d184:	2900      	cmp	r1, #0
 800d186:	bfb8      	it	lt
 800d188:	4249      	neglt	r1, r1
 800d18a:	f803 2b02 	strb.w	r2, [r3], #2
 800d18e:	bfb4      	ite	lt
 800d190:	222d      	movlt	r2, #45	; 0x2d
 800d192:	222b      	movge	r2, #43	; 0x2b
 800d194:	2909      	cmp	r1, #9
 800d196:	7042      	strb	r2, [r0, #1]
 800d198:	dd2a      	ble.n	800d1f0 <__exponent+0x70>
 800d19a:	f10d 0407 	add.w	r4, sp, #7
 800d19e:	46a4      	mov	ip, r4
 800d1a0:	270a      	movs	r7, #10
 800d1a2:	46a6      	mov	lr, r4
 800d1a4:	460a      	mov	r2, r1
 800d1a6:	fb91 f6f7 	sdiv	r6, r1, r7
 800d1aa:	fb07 1516 	mls	r5, r7, r6, r1
 800d1ae:	3530      	adds	r5, #48	; 0x30
 800d1b0:	2a63      	cmp	r2, #99	; 0x63
 800d1b2:	f104 34ff 	add.w	r4, r4, #4294967295
 800d1b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d1ba:	4631      	mov	r1, r6
 800d1bc:	dcf1      	bgt.n	800d1a2 <__exponent+0x22>
 800d1be:	3130      	adds	r1, #48	; 0x30
 800d1c0:	f1ae 0502 	sub.w	r5, lr, #2
 800d1c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d1c8:	1c44      	adds	r4, r0, #1
 800d1ca:	4629      	mov	r1, r5
 800d1cc:	4561      	cmp	r1, ip
 800d1ce:	d30a      	bcc.n	800d1e6 <__exponent+0x66>
 800d1d0:	f10d 0209 	add.w	r2, sp, #9
 800d1d4:	eba2 020e 	sub.w	r2, r2, lr
 800d1d8:	4565      	cmp	r5, ip
 800d1da:	bf88      	it	hi
 800d1dc:	2200      	movhi	r2, #0
 800d1de:	4413      	add	r3, r2
 800d1e0:	1a18      	subs	r0, r3, r0
 800d1e2:	b003      	add	sp, #12
 800d1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d1ee:	e7ed      	b.n	800d1cc <__exponent+0x4c>
 800d1f0:	2330      	movs	r3, #48	; 0x30
 800d1f2:	3130      	adds	r1, #48	; 0x30
 800d1f4:	7083      	strb	r3, [r0, #2]
 800d1f6:	70c1      	strb	r1, [r0, #3]
 800d1f8:	1d03      	adds	r3, r0, #4
 800d1fa:	e7f1      	b.n	800d1e0 <__exponent+0x60>

0800d1fc <_printf_float>:
 800d1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d200:	ed2d 8b02 	vpush	{d8}
 800d204:	b08d      	sub	sp, #52	; 0x34
 800d206:	460c      	mov	r4, r1
 800d208:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d20c:	4616      	mov	r6, r2
 800d20e:	461f      	mov	r7, r3
 800d210:	4605      	mov	r5, r0
 800d212:	f002 fc1b 	bl	800fa4c <_localeconv_r>
 800d216:	f8d0 a000 	ldr.w	sl, [r0]
 800d21a:	4650      	mov	r0, sl
 800d21c:	f7f2 ffe0 	bl	80001e0 <strlen>
 800d220:	2300      	movs	r3, #0
 800d222:	930a      	str	r3, [sp, #40]	; 0x28
 800d224:	6823      	ldr	r3, [r4, #0]
 800d226:	9305      	str	r3, [sp, #20]
 800d228:	f8d8 3000 	ldr.w	r3, [r8]
 800d22c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d230:	3307      	adds	r3, #7
 800d232:	f023 0307 	bic.w	r3, r3, #7
 800d236:	f103 0208 	add.w	r2, r3, #8
 800d23a:	f8c8 2000 	str.w	r2, [r8]
 800d23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d242:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d246:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d24a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d24e:	9307      	str	r3, [sp, #28]
 800d250:	f8cd 8018 	str.w	r8, [sp, #24]
 800d254:	ee08 0a10 	vmov	s16, r0
 800d258:	4b9f      	ldr	r3, [pc, #636]	; (800d4d8 <_printf_float+0x2dc>)
 800d25a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d25e:	f04f 32ff 	mov.w	r2, #4294967295
 800d262:	f7f3 fc6b 	bl	8000b3c <__aeabi_dcmpun>
 800d266:	bb88      	cbnz	r0, 800d2cc <_printf_float+0xd0>
 800d268:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d26c:	4b9a      	ldr	r3, [pc, #616]	; (800d4d8 <_printf_float+0x2dc>)
 800d26e:	f04f 32ff 	mov.w	r2, #4294967295
 800d272:	f7f3 fc45 	bl	8000b00 <__aeabi_dcmple>
 800d276:	bb48      	cbnz	r0, 800d2cc <_printf_float+0xd0>
 800d278:	2200      	movs	r2, #0
 800d27a:	2300      	movs	r3, #0
 800d27c:	4640      	mov	r0, r8
 800d27e:	4649      	mov	r1, r9
 800d280:	f7f3 fc34 	bl	8000aec <__aeabi_dcmplt>
 800d284:	b110      	cbz	r0, 800d28c <_printf_float+0x90>
 800d286:	232d      	movs	r3, #45	; 0x2d
 800d288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d28c:	4b93      	ldr	r3, [pc, #588]	; (800d4dc <_printf_float+0x2e0>)
 800d28e:	4894      	ldr	r0, [pc, #592]	; (800d4e0 <_printf_float+0x2e4>)
 800d290:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d294:	bf94      	ite	ls
 800d296:	4698      	movls	r8, r3
 800d298:	4680      	movhi	r8, r0
 800d29a:	2303      	movs	r3, #3
 800d29c:	6123      	str	r3, [r4, #16]
 800d29e:	9b05      	ldr	r3, [sp, #20]
 800d2a0:	f023 0204 	bic.w	r2, r3, #4
 800d2a4:	6022      	str	r2, [r4, #0]
 800d2a6:	f04f 0900 	mov.w	r9, #0
 800d2aa:	9700      	str	r7, [sp, #0]
 800d2ac:	4633      	mov	r3, r6
 800d2ae:	aa0b      	add	r2, sp, #44	; 0x2c
 800d2b0:	4621      	mov	r1, r4
 800d2b2:	4628      	mov	r0, r5
 800d2b4:	f000 f9d8 	bl	800d668 <_printf_common>
 800d2b8:	3001      	adds	r0, #1
 800d2ba:	f040 8090 	bne.w	800d3de <_printf_float+0x1e2>
 800d2be:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c2:	b00d      	add	sp, #52	; 0x34
 800d2c4:	ecbd 8b02 	vpop	{d8}
 800d2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2cc:	4642      	mov	r2, r8
 800d2ce:	464b      	mov	r3, r9
 800d2d0:	4640      	mov	r0, r8
 800d2d2:	4649      	mov	r1, r9
 800d2d4:	f7f3 fc32 	bl	8000b3c <__aeabi_dcmpun>
 800d2d8:	b140      	cbz	r0, 800d2ec <_printf_float+0xf0>
 800d2da:	464b      	mov	r3, r9
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	bfbc      	itt	lt
 800d2e0:	232d      	movlt	r3, #45	; 0x2d
 800d2e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d2e6:	487f      	ldr	r0, [pc, #508]	; (800d4e4 <_printf_float+0x2e8>)
 800d2e8:	4b7f      	ldr	r3, [pc, #508]	; (800d4e8 <_printf_float+0x2ec>)
 800d2ea:	e7d1      	b.n	800d290 <_printf_float+0x94>
 800d2ec:	6863      	ldr	r3, [r4, #4]
 800d2ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d2f2:	9206      	str	r2, [sp, #24]
 800d2f4:	1c5a      	adds	r2, r3, #1
 800d2f6:	d13f      	bne.n	800d378 <_printf_float+0x17c>
 800d2f8:	2306      	movs	r3, #6
 800d2fa:	6063      	str	r3, [r4, #4]
 800d2fc:	9b05      	ldr	r3, [sp, #20]
 800d2fe:	6861      	ldr	r1, [r4, #4]
 800d300:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d304:	2300      	movs	r3, #0
 800d306:	9303      	str	r3, [sp, #12]
 800d308:	ab0a      	add	r3, sp, #40	; 0x28
 800d30a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d30e:	ab09      	add	r3, sp, #36	; 0x24
 800d310:	ec49 8b10 	vmov	d0, r8, r9
 800d314:	9300      	str	r3, [sp, #0]
 800d316:	6022      	str	r2, [r4, #0]
 800d318:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d31c:	4628      	mov	r0, r5
 800d31e:	f7ff fecd 	bl	800d0bc <__cvt>
 800d322:	9b06      	ldr	r3, [sp, #24]
 800d324:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d326:	2b47      	cmp	r3, #71	; 0x47
 800d328:	4680      	mov	r8, r0
 800d32a:	d108      	bne.n	800d33e <_printf_float+0x142>
 800d32c:	1cc8      	adds	r0, r1, #3
 800d32e:	db02      	blt.n	800d336 <_printf_float+0x13a>
 800d330:	6863      	ldr	r3, [r4, #4]
 800d332:	4299      	cmp	r1, r3
 800d334:	dd41      	ble.n	800d3ba <_printf_float+0x1be>
 800d336:	f1ab 0b02 	sub.w	fp, fp, #2
 800d33a:	fa5f fb8b 	uxtb.w	fp, fp
 800d33e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d342:	d820      	bhi.n	800d386 <_printf_float+0x18a>
 800d344:	3901      	subs	r1, #1
 800d346:	465a      	mov	r2, fp
 800d348:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d34c:	9109      	str	r1, [sp, #36]	; 0x24
 800d34e:	f7ff ff17 	bl	800d180 <__exponent>
 800d352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d354:	1813      	adds	r3, r2, r0
 800d356:	2a01      	cmp	r2, #1
 800d358:	4681      	mov	r9, r0
 800d35a:	6123      	str	r3, [r4, #16]
 800d35c:	dc02      	bgt.n	800d364 <_printf_float+0x168>
 800d35e:	6822      	ldr	r2, [r4, #0]
 800d360:	07d2      	lsls	r2, r2, #31
 800d362:	d501      	bpl.n	800d368 <_printf_float+0x16c>
 800d364:	3301      	adds	r3, #1
 800d366:	6123      	str	r3, [r4, #16]
 800d368:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d09c      	beq.n	800d2aa <_printf_float+0xae>
 800d370:	232d      	movs	r3, #45	; 0x2d
 800d372:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d376:	e798      	b.n	800d2aa <_printf_float+0xae>
 800d378:	9a06      	ldr	r2, [sp, #24]
 800d37a:	2a47      	cmp	r2, #71	; 0x47
 800d37c:	d1be      	bne.n	800d2fc <_printf_float+0x100>
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d1bc      	bne.n	800d2fc <_printf_float+0x100>
 800d382:	2301      	movs	r3, #1
 800d384:	e7b9      	b.n	800d2fa <_printf_float+0xfe>
 800d386:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d38a:	d118      	bne.n	800d3be <_printf_float+0x1c2>
 800d38c:	2900      	cmp	r1, #0
 800d38e:	6863      	ldr	r3, [r4, #4]
 800d390:	dd0b      	ble.n	800d3aa <_printf_float+0x1ae>
 800d392:	6121      	str	r1, [r4, #16]
 800d394:	b913      	cbnz	r3, 800d39c <_printf_float+0x1a0>
 800d396:	6822      	ldr	r2, [r4, #0]
 800d398:	07d0      	lsls	r0, r2, #31
 800d39a:	d502      	bpl.n	800d3a2 <_printf_float+0x1a6>
 800d39c:	3301      	adds	r3, #1
 800d39e:	440b      	add	r3, r1
 800d3a0:	6123      	str	r3, [r4, #16]
 800d3a2:	65a1      	str	r1, [r4, #88]	; 0x58
 800d3a4:	f04f 0900 	mov.w	r9, #0
 800d3a8:	e7de      	b.n	800d368 <_printf_float+0x16c>
 800d3aa:	b913      	cbnz	r3, 800d3b2 <_printf_float+0x1b6>
 800d3ac:	6822      	ldr	r2, [r4, #0]
 800d3ae:	07d2      	lsls	r2, r2, #31
 800d3b0:	d501      	bpl.n	800d3b6 <_printf_float+0x1ba>
 800d3b2:	3302      	adds	r3, #2
 800d3b4:	e7f4      	b.n	800d3a0 <_printf_float+0x1a4>
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e7f2      	b.n	800d3a0 <_printf_float+0x1a4>
 800d3ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d3be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3c0:	4299      	cmp	r1, r3
 800d3c2:	db05      	blt.n	800d3d0 <_printf_float+0x1d4>
 800d3c4:	6823      	ldr	r3, [r4, #0]
 800d3c6:	6121      	str	r1, [r4, #16]
 800d3c8:	07d8      	lsls	r0, r3, #31
 800d3ca:	d5ea      	bpl.n	800d3a2 <_printf_float+0x1a6>
 800d3cc:	1c4b      	adds	r3, r1, #1
 800d3ce:	e7e7      	b.n	800d3a0 <_printf_float+0x1a4>
 800d3d0:	2900      	cmp	r1, #0
 800d3d2:	bfd4      	ite	le
 800d3d4:	f1c1 0202 	rsble	r2, r1, #2
 800d3d8:	2201      	movgt	r2, #1
 800d3da:	4413      	add	r3, r2
 800d3dc:	e7e0      	b.n	800d3a0 <_printf_float+0x1a4>
 800d3de:	6823      	ldr	r3, [r4, #0]
 800d3e0:	055a      	lsls	r2, r3, #21
 800d3e2:	d407      	bmi.n	800d3f4 <_printf_float+0x1f8>
 800d3e4:	6923      	ldr	r3, [r4, #16]
 800d3e6:	4642      	mov	r2, r8
 800d3e8:	4631      	mov	r1, r6
 800d3ea:	4628      	mov	r0, r5
 800d3ec:	47b8      	blx	r7
 800d3ee:	3001      	adds	r0, #1
 800d3f0:	d12c      	bne.n	800d44c <_printf_float+0x250>
 800d3f2:	e764      	b.n	800d2be <_printf_float+0xc2>
 800d3f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d3f8:	f240 80e0 	bls.w	800d5bc <_printf_float+0x3c0>
 800d3fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d400:	2200      	movs	r2, #0
 800d402:	2300      	movs	r3, #0
 800d404:	f7f3 fb68 	bl	8000ad8 <__aeabi_dcmpeq>
 800d408:	2800      	cmp	r0, #0
 800d40a:	d034      	beq.n	800d476 <_printf_float+0x27a>
 800d40c:	4a37      	ldr	r2, [pc, #220]	; (800d4ec <_printf_float+0x2f0>)
 800d40e:	2301      	movs	r3, #1
 800d410:	4631      	mov	r1, r6
 800d412:	4628      	mov	r0, r5
 800d414:	47b8      	blx	r7
 800d416:	3001      	adds	r0, #1
 800d418:	f43f af51 	beq.w	800d2be <_printf_float+0xc2>
 800d41c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d420:	429a      	cmp	r2, r3
 800d422:	db02      	blt.n	800d42a <_printf_float+0x22e>
 800d424:	6823      	ldr	r3, [r4, #0]
 800d426:	07d8      	lsls	r0, r3, #31
 800d428:	d510      	bpl.n	800d44c <_printf_float+0x250>
 800d42a:	ee18 3a10 	vmov	r3, s16
 800d42e:	4652      	mov	r2, sl
 800d430:	4631      	mov	r1, r6
 800d432:	4628      	mov	r0, r5
 800d434:	47b8      	blx	r7
 800d436:	3001      	adds	r0, #1
 800d438:	f43f af41 	beq.w	800d2be <_printf_float+0xc2>
 800d43c:	f04f 0800 	mov.w	r8, #0
 800d440:	f104 091a 	add.w	r9, r4, #26
 800d444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d446:	3b01      	subs	r3, #1
 800d448:	4543      	cmp	r3, r8
 800d44a:	dc09      	bgt.n	800d460 <_printf_float+0x264>
 800d44c:	6823      	ldr	r3, [r4, #0]
 800d44e:	079b      	lsls	r3, r3, #30
 800d450:	f100 8105 	bmi.w	800d65e <_printf_float+0x462>
 800d454:	68e0      	ldr	r0, [r4, #12]
 800d456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d458:	4298      	cmp	r0, r3
 800d45a:	bfb8      	it	lt
 800d45c:	4618      	movlt	r0, r3
 800d45e:	e730      	b.n	800d2c2 <_printf_float+0xc6>
 800d460:	2301      	movs	r3, #1
 800d462:	464a      	mov	r2, r9
 800d464:	4631      	mov	r1, r6
 800d466:	4628      	mov	r0, r5
 800d468:	47b8      	blx	r7
 800d46a:	3001      	adds	r0, #1
 800d46c:	f43f af27 	beq.w	800d2be <_printf_float+0xc2>
 800d470:	f108 0801 	add.w	r8, r8, #1
 800d474:	e7e6      	b.n	800d444 <_printf_float+0x248>
 800d476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d478:	2b00      	cmp	r3, #0
 800d47a:	dc39      	bgt.n	800d4f0 <_printf_float+0x2f4>
 800d47c:	4a1b      	ldr	r2, [pc, #108]	; (800d4ec <_printf_float+0x2f0>)
 800d47e:	2301      	movs	r3, #1
 800d480:	4631      	mov	r1, r6
 800d482:	4628      	mov	r0, r5
 800d484:	47b8      	blx	r7
 800d486:	3001      	adds	r0, #1
 800d488:	f43f af19 	beq.w	800d2be <_printf_float+0xc2>
 800d48c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d490:	4313      	orrs	r3, r2
 800d492:	d102      	bne.n	800d49a <_printf_float+0x29e>
 800d494:	6823      	ldr	r3, [r4, #0]
 800d496:	07d9      	lsls	r1, r3, #31
 800d498:	d5d8      	bpl.n	800d44c <_printf_float+0x250>
 800d49a:	ee18 3a10 	vmov	r3, s16
 800d49e:	4652      	mov	r2, sl
 800d4a0:	4631      	mov	r1, r6
 800d4a2:	4628      	mov	r0, r5
 800d4a4:	47b8      	blx	r7
 800d4a6:	3001      	adds	r0, #1
 800d4a8:	f43f af09 	beq.w	800d2be <_printf_float+0xc2>
 800d4ac:	f04f 0900 	mov.w	r9, #0
 800d4b0:	f104 0a1a 	add.w	sl, r4, #26
 800d4b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4b6:	425b      	negs	r3, r3
 800d4b8:	454b      	cmp	r3, r9
 800d4ba:	dc01      	bgt.n	800d4c0 <_printf_float+0x2c4>
 800d4bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4be:	e792      	b.n	800d3e6 <_printf_float+0x1ea>
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	4652      	mov	r2, sl
 800d4c4:	4631      	mov	r1, r6
 800d4c6:	4628      	mov	r0, r5
 800d4c8:	47b8      	blx	r7
 800d4ca:	3001      	adds	r0, #1
 800d4cc:	f43f aef7 	beq.w	800d2be <_printf_float+0xc2>
 800d4d0:	f109 0901 	add.w	r9, r9, #1
 800d4d4:	e7ee      	b.n	800d4b4 <_printf_float+0x2b8>
 800d4d6:	bf00      	nop
 800d4d8:	7fefffff 	.word	0x7fefffff
 800d4dc:	080117f0 	.word	0x080117f0
 800d4e0:	080117f4 	.word	0x080117f4
 800d4e4:	080117fc 	.word	0x080117fc
 800d4e8:	080117f8 	.word	0x080117f8
 800d4ec:	08011800 	.word	0x08011800
 800d4f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	bfa8      	it	ge
 800d4f8:	461a      	movge	r2, r3
 800d4fa:	2a00      	cmp	r2, #0
 800d4fc:	4691      	mov	r9, r2
 800d4fe:	dc37      	bgt.n	800d570 <_printf_float+0x374>
 800d500:	f04f 0b00 	mov.w	fp, #0
 800d504:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d508:	f104 021a 	add.w	r2, r4, #26
 800d50c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d50e:	9305      	str	r3, [sp, #20]
 800d510:	eba3 0309 	sub.w	r3, r3, r9
 800d514:	455b      	cmp	r3, fp
 800d516:	dc33      	bgt.n	800d580 <_printf_float+0x384>
 800d518:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d51c:	429a      	cmp	r2, r3
 800d51e:	db3b      	blt.n	800d598 <_printf_float+0x39c>
 800d520:	6823      	ldr	r3, [r4, #0]
 800d522:	07da      	lsls	r2, r3, #31
 800d524:	d438      	bmi.n	800d598 <_printf_float+0x39c>
 800d526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d528:	9a05      	ldr	r2, [sp, #20]
 800d52a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d52c:	1a9a      	subs	r2, r3, r2
 800d52e:	eba3 0901 	sub.w	r9, r3, r1
 800d532:	4591      	cmp	r9, r2
 800d534:	bfa8      	it	ge
 800d536:	4691      	movge	r9, r2
 800d538:	f1b9 0f00 	cmp.w	r9, #0
 800d53c:	dc35      	bgt.n	800d5aa <_printf_float+0x3ae>
 800d53e:	f04f 0800 	mov.w	r8, #0
 800d542:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d546:	f104 0a1a 	add.w	sl, r4, #26
 800d54a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d54e:	1a9b      	subs	r3, r3, r2
 800d550:	eba3 0309 	sub.w	r3, r3, r9
 800d554:	4543      	cmp	r3, r8
 800d556:	f77f af79 	ble.w	800d44c <_printf_float+0x250>
 800d55a:	2301      	movs	r3, #1
 800d55c:	4652      	mov	r2, sl
 800d55e:	4631      	mov	r1, r6
 800d560:	4628      	mov	r0, r5
 800d562:	47b8      	blx	r7
 800d564:	3001      	adds	r0, #1
 800d566:	f43f aeaa 	beq.w	800d2be <_printf_float+0xc2>
 800d56a:	f108 0801 	add.w	r8, r8, #1
 800d56e:	e7ec      	b.n	800d54a <_printf_float+0x34e>
 800d570:	4613      	mov	r3, r2
 800d572:	4631      	mov	r1, r6
 800d574:	4642      	mov	r2, r8
 800d576:	4628      	mov	r0, r5
 800d578:	47b8      	blx	r7
 800d57a:	3001      	adds	r0, #1
 800d57c:	d1c0      	bne.n	800d500 <_printf_float+0x304>
 800d57e:	e69e      	b.n	800d2be <_printf_float+0xc2>
 800d580:	2301      	movs	r3, #1
 800d582:	4631      	mov	r1, r6
 800d584:	4628      	mov	r0, r5
 800d586:	9205      	str	r2, [sp, #20]
 800d588:	47b8      	blx	r7
 800d58a:	3001      	adds	r0, #1
 800d58c:	f43f ae97 	beq.w	800d2be <_printf_float+0xc2>
 800d590:	9a05      	ldr	r2, [sp, #20]
 800d592:	f10b 0b01 	add.w	fp, fp, #1
 800d596:	e7b9      	b.n	800d50c <_printf_float+0x310>
 800d598:	ee18 3a10 	vmov	r3, s16
 800d59c:	4652      	mov	r2, sl
 800d59e:	4631      	mov	r1, r6
 800d5a0:	4628      	mov	r0, r5
 800d5a2:	47b8      	blx	r7
 800d5a4:	3001      	adds	r0, #1
 800d5a6:	d1be      	bne.n	800d526 <_printf_float+0x32a>
 800d5a8:	e689      	b.n	800d2be <_printf_float+0xc2>
 800d5aa:	9a05      	ldr	r2, [sp, #20]
 800d5ac:	464b      	mov	r3, r9
 800d5ae:	4442      	add	r2, r8
 800d5b0:	4631      	mov	r1, r6
 800d5b2:	4628      	mov	r0, r5
 800d5b4:	47b8      	blx	r7
 800d5b6:	3001      	adds	r0, #1
 800d5b8:	d1c1      	bne.n	800d53e <_printf_float+0x342>
 800d5ba:	e680      	b.n	800d2be <_printf_float+0xc2>
 800d5bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5be:	2a01      	cmp	r2, #1
 800d5c0:	dc01      	bgt.n	800d5c6 <_printf_float+0x3ca>
 800d5c2:	07db      	lsls	r3, r3, #31
 800d5c4:	d538      	bpl.n	800d638 <_printf_float+0x43c>
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	4642      	mov	r2, r8
 800d5ca:	4631      	mov	r1, r6
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	47b8      	blx	r7
 800d5d0:	3001      	adds	r0, #1
 800d5d2:	f43f ae74 	beq.w	800d2be <_printf_float+0xc2>
 800d5d6:	ee18 3a10 	vmov	r3, s16
 800d5da:	4652      	mov	r2, sl
 800d5dc:	4631      	mov	r1, r6
 800d5de:	4628      	mov	r0, r5
 800d5e0:	47b8      	blx	r7
 800d5e2:	3001      	adds	r0, #1
 800d5e4:	f43f ae6b 	beq.w	800d2be <_printf_float+0xc2>
 800d5e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	f7f3 fa72 	bl	8000ad8 <__aeabi_dcmpeq>
 800d5f4:	b9d8      	cbnz	r0, 800d62e <_printf_float+0x432>
 800d5f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5f8:	f108 0201 	add.w	r2, r8, #1
 800d5fc:	3b01      	subs	r3, #1
 800d5fe:	4631      	mov	r1, r6
 800d600:	4628      	mov	r0, r5
 800d602:	47b8      	blx	r7
 800d604:	3001      	adds	r0, #1
 800d606:	d10e      	bne.n	800d626 <_printf_float+0x42a>
 800d608:	e659      	b.n	800d2be <_printf_float+0xc2>
 800d60a:	2301      	movs	r3, #1
 800d60c:	4652      	mov	r2, sl
 800d60e:	4631      	mov	r1, r6
 800d610:	4628      	mov	r0, r5
 800d612:	47b8      	blx	r7
 800d614:	3001      	adds	r0, #1
 800d616:	f43f ae52 	beq.w	800d2be <_printf_float+0xc2>
 800d61a:	f108 0801 	add.w	r8, r8, #1
 800d61e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d620:	3b01      	subs	r3, #1
 800d622:	4543      	cmp	r3, r8
 800d624:	dcf1      	bgt.n	800d60a <_printf_float+0x40e>
 800d626:	464b      	mov	r3, r9
 800d628:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d62c:	e6dc      	b.n	800d3e8 <_printf_float+0x1ec>
 800d62e:	f04f 0800 	mov.w	r8, #0
 800d632:	f104 0a1a 	add.w	sl, r4, #26
 800d636:	e7f2      	b.n	800d61e <_printf_float+0x422>
 800d638:	2301      	movs	r3, #1
 800d63a:	4642      	mov	r2, r8
 800d63c:	e7df      	b.n	800d5fe <_printf_float+0x402>
 800d63e:	2301      	movs	r3, #1
 800d640:	464a      	mov	r2, r9
 800d642:	4631      	mov	r1, r6
 800d644:	4628      	mov	r0, r5
 800d646:	47b8      	blx	r7
 800d648:	3001      	adds	r0, #1
 800d64a:	f43f ae38 	beq.w	800d2be <_printf_float+0xc2>
 800d64e:	f108 0801 	add.w	r8, r8, #1
 800d652:	68e3      	ldr	r3, [r4, #12]
 800d654:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d656:	1a5b      	subs	r3, r3, r1
 800d658:	4543      	cmp	r3, r8
 800d65a:	dcf0      	bgt.n	800d63e <_printf_float+0x442>
 800d65c:	e6fa      	b.n	800d454 <_printf_float+0x258>
 800d65e:	f04f 0800 	mov.w	r8, #0
 800d662:	f104 0919 	add.w	r9, r4, #25
 800d666:	e7f4      	b.n	800d652 <_printf_float+0x456>

0800d668 <_printf_common>:
 800d668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d66c:	4616      	mov	r6, r2
 800d66e:	4699      	mov	r9, r3
 800d670:	688a      	ldr	r2, [r1, #8]
 800d672:	690b      	ldr	r3, [r1, #16]
 800d674:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d678:	4293      	cmp	r3, r2
 800d67a:	bfb8      	it	lt
 800d67c:	4613      	movlt	r3, r2
 800d67e:	6033      	str	r3, [r6, #0]
 800d680:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d684:	4607      	mov	r7, r0
 800d686:	460c      	mov	r4, r1
 800d688:	b10a      	cbz	r2, 800d68e <_printf_common+0x26>
 800d68a:	3301      	adds	r3, #1
 800d68c:	6033      	str	r3, [r6, #0]
 800d68e:	6823      	ldr	r3, [r4, #0]
 800d690:	0699      	lsls	r1, r3, #26
 800d692:	bf42      	ittt	mi
 800d694:	6833      	ldrmi	r3, [r6, #0]
 800d696:	3302      	addmi	r3, #2
 800d698:	6033      	strmi	r3, [r6, #0]
 800d69a:	6825      	ldr	r5, [r4, #0]
 800d69c:	f015 0506 	ands.w	r5, r5, #6
 800d6a0:	d106      	bne.n	800d6b0 <_printf_common+0x48>
 800d6a2:	f104 0a19 	add.w	sl, r4, #25
 800d6a6:	68e3      	ldr	r3, [r4, #12]
 800d6a8:	6832      	ldr	r2, [r6, #0]
 800d6aa:	1a9b      	subs	r3, r3, r2
 800d6ac:	42ab      	cmp	r3, r5
 800d6ae:	dc26      	bgt.n	800d6fe <_printf_common+0x96>
 800d6b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d6b4:	1e13      	subs	r3, r2, #0
 800d6b6:	6822      	ldr	r2, [r4, #0]
 800d6b8:	bf18      	it	ne
 800d6ba:	2301      	movne	r3, #1
 800d6bc:	0692      	lsls	r2, r2, #26
 800d6be:	d42b      	bmi.n	800d718 <_printf_common+0xb0>
 800d6c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d6c4:	4649      	mov	r1, r9
 800d6c6:	4638      	mov	r0, r7
 800d6c8:	47c0      	blx	r8
 800d6ca:	3001      	adds	r0, #1
 800d6cc:	d01e      	beq.n	800d70c <_printf_common+0xa4>
 800d6ce:	6823      	ldr	r3, [r4, #0]
 800d6d0:	68e5      	ldr	r5, [r4, #12]
 800d6d2:	6832      	ldr	r2, [r6, #0]
 800d6d4:	f003 0306 	and.w	r3, r3, #6
 800d6d8:	2b04      	cmp	r3, #4
 800d6da:	bf08      	it	eq
 800d6dc:	1aad      	subeq	r5, r5, r2
 800d6de:	68a3      	ldr	r3, [r4, #8]
 800d6e0:	6922      	ldr	r2, [r4, #16]
 800d6e2:	bf0c      	ite	eq
 800d6e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6e8:	2500      	movne	r5, #0
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	bfc4      	itt	gt
 800d6ee:	1a9b      	subgt	r3, r3, r2
 800d6f0:	18ed      	addgt	r5, r5, r3
 800d6f2:	2600      	movs	r6, #0
 800d6f4:	341a      	adds	r4, #26
 800d6f6:	42b5      	cmp	r5, r6
 800d6f8:	d11a      	bne.n	800d730 <_printf_common+0xc8>
 800d6fa:	2000      	movs	r0, #0
 800d6fc:	e008      	b.n	800d710 <_printf_common+0xa8>
 800d6fe:	2301      	movs	r3, #1
 800d700:	4652      	mov	r2, sl
 800d702:	4649      	mov	r1, r9
 800d704:	4638      	mov	r0, r7
 800d706:	47c0      	blx	r8
 800d708:	3001      	adds	r0, #1
 800d70a:	d103      	bne.n	800d714 <_printf_common+0xac>
 800d70c:	f04f 30ff 	mov.w	r0, #4294967295
 800d710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d714:	3501      	adds	r5, #1
 800d716:	e7c6      	b.n	800d6a6 <_printf_common+0x3e>
 800d718:	18e1      	adds	r1, r4, r3
 800d71a:	1c5a      	adds	r2, r3, #1
 800d71c:	2030      	movs	r0, #48	; 0x30
 800d71e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d722:	4422      	add	r2, r4
 800d724:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d728:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d72c:	3302      	adds	r3, #2
 800d72e:	e7c7      	b.n	800d6c0 <_printf_common+0x58>
 800d730:	2301      	movs	r3, #1
 800d732:	4622      	mov	r2, r4
 800d734:	4649      	mov	r1, r9
 800d736:	4638      	mov	r0, r7
 800d738:	47c0      	blx	r8
 800d73a:	3001      	adds	r0, #1
 800d73c:	d0e6      	beq.n	800d70c <_printf_common+0xa4>
 800d73e:	3601      	adds	r6, #1
 800d740:	e7d9      	b.n	800d6f6 <_printf_common+0x8e>
	...

0800d744 <_printf_i>:
 800d744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d748:	7e0f      	ldrb	r7, [r1, #24]
 800d74a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d74c:	2f78      	cmp	r7, #120	; 0x78
 800d74e:	4691      	mov	r9, r2
 800d750:	4680      	mov	r8, r0
 800d752:	460c      	mov	r4, r1
 800d754:	469a      	mov	sl, r3
 800d756:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d75a:	d807      	bhi.n	800d76c <_printf_i+0x28>
 800d75c:	2f62      	cmp	r7, #98	; 0x62
 800d75e:	d80a      	bhi.n	800d776 <_printf_i+0x32>
 800d760:	2f00      	cmp	r7, #0
 800d762:	f000 80d8 	beq.w	800d916 <_printf_i+0x1d2>
 800d766:	2f58      	cmp	r7, #88	; 0x58
 800d768:	f000 80a3 	beq.w	800d8b2 <_printf_i+0x16e>
 800d76c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d770:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d774:	e03a      	b.n	800d7ec <_printf_i+0xa8>
 800d776:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d77a:	2b15      	cmp	r3, #21
 800d77c:	d8f6      	bhi.n	800d76c <_printf_i+0x28>
 800d77e:	a101      	add	r1, pc, #4	; (adr r1, 800d784 <_printf_i+0x40>)
 800d780:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d784:	0800d7dd 	.word	0x0800d7dd
 800d788:	0800d7f1 	.word	0x0800d7f1
 800d78c:	0800d76d 	.word	0x0800d76d
 800d790:	0800d76d 	.word	0x0800d76d
 800d794:	0800d76d 	.word	0x0800d76d
 800d798:	0800d76d 	.word	0x0800d76d
 800d79c:	0800d7f1 	.word	0x0800d7f1
 800d7a0:	0800d76d 	.word	0x0800d76d
 800d7a4:	0800d76d 	.word	0x0800d76d
 800d7a8:	0800d76d 	.word	0x0800d76d
 800d7ac:	0800d76d 	.word	0x0800d76d
 800d7b0:	0800d8fd 	.word	0x0800d8fd
 800d7b4:	0800d821 	.word	0x0800d821
 800d7b8:	0800d8df 	.word	0x0800d8df
 800d7bc:	0800d76d 	.word	0x0800d76d
 800d7c0:	0800d76d 	.word	0x0800d76d
 800d7c4:	0800d91f 	.word	0x0800d91f
 800d7c8:	0800d76d 	.word	0x0800d76d
 800d7cc:	0800d821 	.word	0x0800d821
 800d7d0:	0800d76d 	.word	0x0800d76d
 800d7d4:	0800d76d 	.word	0x0800d76d
 800d7d8:	0800d8e7 	.word	0x0800d8e7
 800d7dc:	682b      	ldr	r3, [r5, #0]
 800d7de:	1d1a      	adds	r2, r3, #4
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	602a      	str	r2, [r5, #0]
 800d7e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	e0a3      	b.n	800d938 <_printf_i+0x1f4>
 800d7f0:	6820      	ldr	r0, [r4, #0]
 800d7f2:	6829      	ldr	r1, [r5, #0]
 800d7f4:	0606      	lsls	r6, r0, #24
 800d7f6:	f101 0304 	add.w	r3, r1, #4
 800d7fa:	d50a      	bpl.n	800d812 <_printf_i+0xce>
 800d7fc:	680e      	ldr	r6, [r1, #0]
 800d7fe:	602b      	str	r3, [r5, #0]
 800d800:	2e00      	cmp	r6, #0
 800d802:	da03      	bge.n	800d80c <_printf_i+0xc8>
 800d804:	232d      	movs	r3, #45	; 0x2d
 800d806:	4276      	negs	r6, r6
 800d808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d80c:	485e      	ldr	r0, [pc, #376]	; (800d988 <_printf_i+0x244>)
 800d80e:	230a      	movs	r3, #10
 800d810:	e019      	b.n	800d846 <_printf_i+0x102>
 800d812:	680e      	ldr	r6, [r1, #0]
 800d814:	602b      	str	r3, [r5, #0]
 800d816:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d81a:	bf18      	it	ne
 800d81c:	b236      	sxthne	r6, r6
 800d81e:	e7ef      	b.n	800d800 <_printf_i+0xbc>
 800d820:	682b      	ldr	r3, [r5, #0]
 800d822:	6820      	ldr	r0, [r4, #0]
 800d824:	1d19      	adds	r1, r3, #4
 800d826:	6029      	str	r1, [r5, #0]
 800d828:	0601      	lsls	r1, r0, #24
 800d82a:	d501      	bpl.n	800d830 <_printf_i+0xec>
 800d82c:	681e      	ldr	r6, [r3, #0]
 800d82e:	e002      	b.n	800d836 <_printf_i+0xf2>
 800d830:	0646      	lsls	r6, r0, #25
 800d832:	d5fb      	bpl.n	800d82c <_printf_i+0xe8>
 800d834:	881e      	ldrh	r6, [r3, #0]
 800d836:	4854      	ldr	r0, [pc, #336]	; (800d988 <_printf_i+0x244>)
 800d838:	2f6f      	cmp	r7, #111	; 0x6f
 800d83a:	bf0c      	ite	eq
 800d83c:	2308      	moveq	r3, #8
 800d83e:	230a      	movne	r3, #10
 800d840:	2100      	movs	r1, #0
 800d842:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d846:	6865      	ldr	r5, [r4, #4]
 800d848:	60a5      	str	r5, [r4, #8]
 800d84a:	2d00      	cmp	r5, #0
 800d84c:	bfa2      	ittt	ge
 800d84e:	6821      	ldrge	r1, [r4, #0]
 800d850:	f021 0104 	bicge.w	r1, r1, #4
 800d854:	6021      	strge	r1, [r4, #0]
 800d856:	b90e      	cbnz	r6, 800d85c <_printf_i+0x118>
 800d858:	2d00      	cmp	r5, #0
 800d85a:	d04d      	beq.n	800d8f8 <_printf_i+0x1b4>
 800d85c:	4615      	mov	r5, r2
 800d85e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d862:	fb03 6711 	mls	r7, r3, r1, r6
 800d866:	5dc7      	ldrb	r7, [r0, r7]
 800d868:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d86c:	4637      	mov	r7, r6
 800d86e:	42bb      	cmp	r3, r7
 800d870:	460e      	mov	r6, r1
 800d872:	d9f4      	bls.n	800d85e <_printf_i+0x11a>
 800d874:	2b08      	cmp	r3, #8
 800d876:	d10b      	bne.n	800d890 <_printf_i+0x14c>
 800d878:	6823      	ldr	r3, [r4, #0]
 800d87a:	07de      	lsls	r6, r3, #31
 800d87c:	d508      	bpl.n	800d890 <_printf_i+0x14c>
 800d87e:	6923      	ldr	r3, [r4, #16]
 800d880:	6861      	ldr	r1, [r4, #4]
 800d882:	4299      	cmp	r1, r3
 800d884:	bfde      	ittt	le
 800d886:	2330      	movle	r3, #48	; 0x30
 800d888:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d88c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d890:	1b52      	subs	r2, r2, r5
 800d892:	6122      	str	r2, [r4, #16]
 800d894:	f8cd a000 	str.w	sl, [sp]
 800d898:	464b      	mov	r3, r9
 800d89a:	aa03      	add	r2, sp, #12
 800d89c:	4621      	mov	r1, r4
 800d89e:	4640      	mov	r0, r8
 800d8a0:	f7ff fee2 	bl	800d668 <_printf_common>
 800d8a4:	3001      	adds	r0, #1
 800d8a6:	d14c      	bne.n	800d942 <_printf_i+0x1fe>
 800d8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ac:	b004      	add	sp, #16
 800d8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8b2:	4835      	ldr	r0, [pc, #212]	; (800d988 <_printf_i+0x244>)
 800d8b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d8b8:	6829      	ldr	r1, [r5, #0]
 800d8ba:	6823      	ldr	r3, [r4, #0]
 800d8bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800d8c0:	6029      	str	r1, [r5, #0]
 800d8c2:	061d      	lsls	r5, r3, #24
 800d8c4:	d514      	bpl.n	800d8f0 <_printf_i+0x1ac>
 800d8c6:	07df      	lsls	r7, r3, #31
 800d8c8:	bf44      	itt	mi
 800d8ca:	f043 0320 	orrmi.w	r3, r3, #32
 800d8ce:	6023      	strmi	r3, [r4, #0]
 800d8d0:	b91e      	cbnz	r6, 800d8da <_printf_i+0x196>
 800d8d2:	6823      	ldr	r3, [r4, #0]
 800d8d4:	f023 0320 	bic.w	r3, r3, #32
 800d8d8:	6023      	str	r3, [r4, #0]
 800d8da:	2310      	movs	r3, #16
 800d8dc:	e7b0      	b.n	800d840 <_printf_i+0xfc>
 800d8de:	6823      	ldr	r3, [r4, #0]
 800d8e0:	f043 0320 	orr.w	r3, r3, #32
 800d8e4:	6023      	str	r3, [r4, #0]
 800d8e6:	2378      	movs	r3, #120	; 0x78
 800d8e8:	4828      	ldr	r0, [pc, #160]	; (800d98c <_printf_i+0x248>)
 800d8ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d8ee:	e7e3      	b.n	800d8b8 <_printf_i+0x174>
 800d8f0:	0659      	lsls	r1, r3, #25
 800d8f2:	bf48      	it	mi
 800d8f4:	b2b6      	uxthmi	r6, r6
 800d8f6:	e7e6      	b.n	800d8c6 <_printf_i+0x182>
 800d8f8:	4615      	mov	r5, r2
 800d8fa:	e7bb      	b.n	800d874 <_printf_i+0x130>
 800d8fc:	682b      	ldr	r3, [r5, #0]
 800d8fe:	6826      	ldr	r6, [r4, #0]
 800d900:	6961      	ldr	r1, [r4, #20]
 800d902:	1d18      	adds	r0, r3, #4
 800d904:	6028      	str	r0, [r5, #0]
 800d906:	0635      	lsls	r5, r6, #24
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	d501      	bpl.n	800d910 <_printf_i+0x1cc>
 800d90c:	6019      	str	r1, [r3, #0]
 800d90e:	e002      	b.n	800d916 <_printf_i+0x1d2>
 800d910:	0670      	lsls	r0, r6, #25
 800d912:	d5fb      	bpl.n	800d90c <_printf_i+0x1c8>
 800d914:	8019      	strh	r1, [r3, #0]
 800d916:	2300      	movs	r3, #0
 800d918:	6123      	str	r3, [r4, #16]
 800d91a:	4615      	mov	r5, r2
 800d91c:	e7ba      	b.n	800d894 <_printf_i+0x150>
 800d91e:	682b      	ldr	r3, [r5, #0]
 800d920:	1d1a      	adds	r2, r3, #4
 800d922:	602a      	str	r2, [r5, #0]
 800d924:	681d      	ldr	r5, [r3, #0]
 800d926:	6862      	ldr	r2, [r4, #4]
 800d928:	2100      	movs	r1, #0
 800d92a:	4628      	mov	r0, r5
 800d92c:	f7f2 fc60 	bl	80001f0 <memchr>
 800d930:	b108      	cbz	r0, 800d936 <_printf_i+0x1f2>
 800d932:	1b40      	subs	r0, r0, r5
 800d934:	6060      	str	r0, [r4, #4]
 800d936:	6863      	ldr	r3, [r4, #4]
 800d938:	6123      	str	r3, [r4, #16]
 800d93a:	2300      	movs	r3, #0
 800d93c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d940:	e7a8      	b.n	800d894 <_printf_i+0x150>
 800d942:	6923      	ldr	r3, [r4, #16]
 800d944:	462a      	mov	r2, r5
 800d946:	4649      	mov	r1, r9
 800d948:	4640      	mov	r0, r8
 800d94a:	47d0      	blx	sl
 800d94c:	3001      	adds	r0, #1
 800d94e:	d0ab      	beq.n	800d8a8 <_printf_i+0x164>
 800d950:	6823      	ldr	r3, [r4, #0]
 800d952:	079b      	lsls	r3, r3, #30
 800d954:	d413      	bmi.n	800d97e <_printf_i+0x23a>
 800d956:	68e0      	ldr	r0, [r4, #12]
 800d958:	9b03      	ldr	r3, [sp, #12]
 800d95a:	4298      	cmp	r0, r3
 800d95c:	bfb8      	it	lt
 800d95e:	4618      	movlt	r0, r3
 800d960:	e7a4      	b.n	800d8ac <_printf_i+0x168>
 800d962:	2301      	movs	r3, #1
 800d964:	4632      	mov	r2, r6
 800d966:	4649      	mov	r1, r9
 800d968:	4640      	mov	r0, r8
 800d96a:	47d0      	blx	sl
 800d96c:	3001      	adds	r0, #1
 800d96e:	d09b      	beq.n	800d8a8 <_printf_i+0x164>
 800d970:	3501      	adds	r5, #1
 800d972:	68e3      	ldr	r3, [r4, #12]
 800d974:	9903      	ldr	r1, [sp, #12]
 800d976:	1a5b      	subs	r3, r3, r1
 800d978:	42ab      	cmp	r3, r5
 800d97a:	dcf2      	bgt.n	800d962 <_printf_i+0x21e>
 800d97c:	e7eb      	b.n	800d956 <_printf_i+0x212>
 800d97e:	2500      	movs	r5, #0
 800d980:	f104 0619 	add.w	r6, r4, #25
 800d984:	e7f5      	b.n	800d972 <_printf_i+0x22e>
 800d986:	bf00      	nop
 800d988:	08011802 	.word	0x08011802
 800d98c:	08011813 	.word	0x08011813

0800d990 <_sbrk_r>:
 800d990:	b538      	push	{r3, r4, r5, lr}
 800d992:	4d06      	ldr	r5, [pc, #24]	; (800d9ac <_sbrk_r+0x1c>)
 800d994:	2300      	movs	r3, #0
 800d996:	4604      	mov	r4, r0
 800d998:	4608      	mov	r0, r1
 800d99a:	602b      	str	r3, [r5, #0]
 800d99c:	f7f7 f84c 	bl	8004a38 <_sbrk>
 800d9a0:	1c43      	adds	r3, r0, #1
 800d9a2:	d102      	bne.n	800d9aa <_sbrk_r+0x1a>
 800d9a4:	682b      	ldr	r3, [r5, #0]
 800d9a6:	b103      	cbz	r3, 800d9aa <_sbrk_r+0x1a>
 800d9a8:	6023      	str	r3, [r4, #0]
 800d9aa:	bd38      	pop	{r3, r4, r5, pc}
 800d9ac:	20002b24 	.word	0x20002b24

0800d9b0 <siprintf>:
 800d9b0:	b40e      	push	{r1, r2, r3}
 800d9b2:	b500      	push	{lr}
 800d9b4:	b09c      	sub	sp, #112	; 0x70
 800d9b6:	ab1d      	add	r3, sp, #116	; 0x74
 800d9b8:	9002      	str	r0, [sp, #8]
 800d9ba:	9006      	str	r0, [sp, #24]
 800d9bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d9c0:	4809      	ldr	r0, [pc, #36]	; (800d9e8 <siprintf+0x38>)
 800d9c2:	9107      	str	r1, [sp, #28]
 800d9c4:	9104      	str	r1, [sp, #16]
 800d9c6:	4909      	ldr	r1, [pc, #36]	; (800d9ec <siprintf+0x3c>)
 800d9c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9cc:	9105      	str	r1, [sp, #20]
 800d9ce:	6800      	ldr	r0, [r0, #0]
 800d9d0:	9301      	str	r3, [sp, #4]
 800d9d2:	a902      	add	r1, sp, #8
 800d9d4:	f002 fd8e 	bl	80104f4 <_svfiprintf_r>
 800d9d8:	9b02      	ldr	r3, [sp, #8]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	701a      	strb	r2, [r3, #0]
 800d9de:	b01c      	add	sp, #112	; 0x70
 800d9e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9e4:	b003      	add	sp, #12
 800d9e6:	4770      	bx	lr
 800d9e8:	20000024 	.word	0x20000024
 800d9ec:	ffff0208 	.word	0xffff0208

0800d9f0 <strncmp>:
 800d9f0:	b510      	push	{r4, lr}
 800d9f2:	b17a      	cbz	r2, 800da14 <strncmp+0x24>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	3901      	subs	r1, #1
 800d9f8:	1884      	adds	r4, r0, r2
 800d9fa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d9fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800da02:	4290      	cmp	r0, r2
 800da04:	d101      	bne.n	800da0a <strncmp+0x1a>
 800da06:	42a3      	cmp	r3, r4
 800da08:	d101      	bne.n	800da0e <strncmp+0x1e>
 800da0a:	1a80      	subs	r0, r0, r2
 800da0c:	bd10      	pop	{r4, pc}
 800da0e:	2800      	cmp	r0, #0
 800da10:	d1f3      	bne.n	800d9fa <strncmp+0xa>
 800da12:	e7fa      	b.n	800da0a <strncmp+0x1a>
 800da14:	4610      	mov	r0, r2
 800da16:	e7f9      	b.n	800da0c <strncmp+0x1c>

0800da18 <sulp>:
 800da18:	b570      	push	{r4, r5, r6, lr}
 800da1a:	4604      	mov	r4, r0
 800da1c:	460d      	mov	r5, r1
 800da1e:	ec45 4b10 	vmov	d0, r4, r5
 800da22:	4616      	mov	r6, r2
 800da24:	f002 fba6 	bl	8010174 <__ulp>
 800da28:	ec51 0b10 	vmov	r0, r1, d0
 800da2c:	b17e      	cbz	r6, 800da4e <sulp+0x36>
 800da2e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800da32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800da36:	2b00      	cmp	r3, #0
 800da38:	dd09      	ble.n	800da4e <sulp+0x36>
 800da3a:	051b      	lsls	r3, r3, #20
 800da3c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800da40:	2400      	movs	r4, #0
 800da42:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800da46:	4622      	mov	r2, r4
 800da48:	462b      	mov	r3, r5
 800da4a:	f7f2 fddd 	bl	8000608 <__aeabi_dmul>
 800da4e:	bd70      	pop	{r4, r5, r6, pc}

0800da50 <_strtod_l>:
 800da50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da54:	ed2d 8b02 	vpush	{d8}
 800da58:	b09d      	sub	sp, #116	; 0x74
 800da5a:	461f      	mov	r7, r3
 800da5c:	2300      	movs	r3, #0
 800da5e:	9318      	str	r3, [sp, #96]	; 0x60
 800da60:	4ba2      	ldr	r3, [pc, #648]	; (800dcec <_strtod_l+0x29c>)
 800da62:	9213      	str	r2, [sp, #76]	; 0x4c
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	9305      	str	r3, [sp, #20]
 800da68:	4604      	mov	r4, r0
 800da6a:	4618      	mov	r0, r3
 800da6c:	4688      	mov	r8, r1
 800da6e:	f7f2 fbb7 	bl	80001e0 <strlen>
 800da72:	f04f 0a00 	mov.w	sl, #0
 800da76:	4605      	mov	r5, r0
 800da78:	f04f 0b00 	mov.w	fp, #0
 800da7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800da80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800da82:	781a      	ldrb	r2, [r3, #0]
 800da84:	2a2b      	cmp	r2, #43	; 0x2b
 800da86:	d04e      	beq.n	800db26 <_strtod_l+0xd6>
 800da88:	d83b      	bhi.n	800db02 <_strtod_l+0xb2>
 800da8a:	2a0d      	cmp	r2, #13
 800da8c:	d834      	bhi.n	800daf8 <_strtod_l+0xa8>
 800da8e:	2a08      	cmp	r2, #8
 800da90:	d834      	bhi.n	800dafc <_strtod_l+0xac>
 800da92:	2a00      	cmp	r2, #0
 800da94:	d03e      	beq.n	800db14 <_strtod_l+0xc4>
 800da96:	2300      	movs	r3, #0
 800da98:	930a      	str	r3, [sp, #40]	; 0x28
 800da9a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800da9c:	7833      	ldrb	r3, [r6, #0]
 800da9e:	2b30      	cmp	r3, #48	; 0x30
 800daa0:	f040 80b0 	bne.w	800dc04 <_strtod_l+0x1b4>
 800daa4:	7873      	ldrb	r3, [r6, #1]
 800daa6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800daaa:	2b58      	cmp	r3, #88	; 0x58
 800daac:	d168      	bne.n	800db80 <_strtod_l+0x130>
 800daae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dab0:	9301      	str	r3, [sp, #4]
 800dab2:	ab18      	add	r3, sp, #96	; 0x60
 800dab4:	9702      	str	r7, [sp, #8]
 800dab6:	9300      	str	r3, [sp, #0]
 800dab8:	4a8d      	ldr	r2, [pc, #564]	; (800dcf0 <_strtod_l+0x2a0>)
 800daba:	ab19      	add	r3, sp, #100	; 0x64
 800dabc:	a917      	add	r1, sp, #92	; 0x5c
 800dabe:	4620      	mov	r0, r4
 800dac0:	f001 fcbc 	bl	800f43c <__gethex>
 800dac4:	f010 0707 	ands.w	r7, r0, #7
 800dac8:	4605      	mov	r5, r0
 800daca:	d005      	beq.n	800dad8 <_strtod_l+0x88>
 800dacc:	2f06      	cmp	r7, #6
 800dace:	d12c      	bne.n	800db2a <_strtod_l+0xda>
 800dad0:	3601      	adds	r6, #1
 800dad2:	2300      	movs	r3, #0
 800dad4:	9617      	str	r6, [sp, #92]	; 0x5c
 800dad6:	930a      	str	r3, [sp, #40]	; 0x28
 800dad8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dada:	2b00      	cmp	r3, #0
 800dadc:	f040 8590 	bne.w	800e600 <_strtod_l+0xbb0>
 800dae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dae2:	b1eb      	cbz	r3, 800db20 <_strtod_l+0xd0>
 800dae4:	4652      	mov	r2, sl
 800dae6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800daea:	ec43 2b10 	vmov	d0, r2, r3
 800daee:	b01d      	add	sp, #116	; 0x74
 800daf0:	ecbd 8b02 	vpop	{d8}
 800daf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daf8:	2a20      	cmp	r2, #32
 800dafa:	d1cc      	bne.n	800da96 <_strtod_l+0x46>
 800dafc:	3301      	adds	r3, #1
 800dafe:	9317      	str	r3, [sp, #92]	; 0x5c
 800db00:	e7be      	b.n	800da80 <_strtod_l+0x30>
 800db02:	2a2d      	cmp	r2, #45	; 0x2d
 800db04:	d1c7      	bne.n	800da96 <_strtod_l+0x46>
 800db06:	2201      	movs	r2, #1
 800db08:	920a      	str	r2, [sp, #40]	; 0x28
 800db0a:	1c5a      	adds	r2, r3, #1
 800db0c:	9217      	str	r2, [sp, #92]	; 0x5c
 800db0e:	785b      	ldrb	r3, [r3, #1]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d1c2      	bne.n	800da9a <_strtod_l+0x4a>
 800db14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800db16:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	f040 856e 	bne.w	800e5fc <_strtod_l+0xbac>
 800db20:	4652      	mov	r2, sl
 800db22:	465b      	mov	r3, fp
 800db24:	e7e1      	b.n	800daea <_strtod_l+0x9a>
 800db26:	2200      	movs	r2, #0
 800db28:	e7ee      	b.n	800db08 <_strtod_l+0xb8>
 800db2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800db2c:	b13a      	cbz	r2, 800db3e <_strtod_l+0xee>
 800db2e:	2135      	movs	r1, #53	; 0x35
 800db30:	a81a      	add	r0, sp, #104	; 0x68
 800db32:	f002 fc2a 	bl	801038a <__copybits>
 800db36:	9918      	ldr	r1, [sp, #96]	; 0x60
 800db38:	4620      	mov	r0, r4
 800db3a:	f001 ffe9 	bl	800fb10 <_Bfree>
 800db3e:	3f01      	subs	r7, #1
 800db40:	2f04      	cmp	r7, #4
 800db42:	d806      	bhi.n	800db52 <_strtod_l+0x102>
 800db44:	e8df f007 	tbb	[pc, r7]
 800db48:	1714030a 	.word	0x1714030a
 800db4c:	0a          	.byte	0x0a
 800db4d:	00          	.byte	0x00
 800db4e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800db52:	0728      	lsls	r0, r5, #28
 800db54:	d5c0      	bpl.n	800dad8 <_strtod_l+0x88>
 800db56:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800db5a:	e7bd      	b.n	800dad8 <_strtod_l+0x88>
 800db5c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800db60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800db62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800db66:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800db6a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800db6e:	e7f0      	b.n	800db52 <_strtod_l+0x102>
 800db70:	f8df b180 	ldr.w	fp, [pc, #384]	; 800dcf4 <_strtod_l+0x2a4>
 800db74:	e7ed      	b.n	800db52 <_strtod_l+0x102>
 800db76:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800db7a:	f04f 3aff 	mov.w	sl, #4294967295
 800db7e:	e7e8      	b.n	800db52 <_strtod_l+0x102>
 800db80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db82:	1c5a      	adds	r2, r3, #1
 800db84:	9217      	str	r2, [sp, #92]	; 0x5c
 800db86:	785b      	ldrb	r3, [r3, #1]
 800db88:	2b30      	cmp	r3, #48	; 0x30
 800db8a:	d0f9      	beq.n	800db80 <_strtod_l+0x130>
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d0a3      	beq.n	800dad8 <_strtod_l+0x88>
 800db90:	2301      	movs	r3, #1
 800db92:	f04f 0900 	mov.w	r9, #0
 800db96:	9304      	str	r3, [sp, #16]
 800db98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db9a:	9308      	str	r3, [sp, #32]
 800db9c:	f8cd 901c 	str.w	r9, [sp, #28]
 800dba0:	464f      	mov	r7, r9
 800dba2:	220a      	movs	r2, #10
 800dba4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800dba6:	7806      	ldrb	r6, [r0, #0]
 800dba8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800dbac:	b2d9      	uxtb	r1, r3
 800dbae:	2909      	cmp	r1, #9
 800dbb0:	d92a      	bls.n	800dc08 <_strtod_l+0x1b8>
 800dbb2:	9905      	ldr	r1, [sp, #20]
 800dbb4:	462a      	mov	r2, r5
 800dbb6:	f7ff ff1b 	bl	800d9f0 <strncmp>
 800dbba:	b398      	cbz	r0, 800dc24 <_strtod_l+0x1d4>
 800dbbc:	2000      	movs	r0, #0
 800dbbe:	4632      	mov	r2, r6
 800dbc0:	463d      	mov	r5, r7
 800dbc2:	9005      	str	r0, [sp, #20]
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	2a65      	cmp	r2, #101	; 0x65
 800dbc8:	d001      	beq.n	800dbce <_strtod_l+0x17e>
 800dbca:	2a45      	cmp	r2, #69	; 0x45
 800dbcc:	d118      	bne.n	800dc00 <_strtod_l+0x1b0>
 800dbce:	b91d      	cbnz	r5, 800dbd8 <_strtod_l+0x188>
 800dbd0:	9a04      	ldr	r2, [sp, #16]
 800dbd2:	4302      	orrs	r2, r0
 800dbd4:	d09e      	beq.n	800db14 <_strtod_l+0xc4>
 800dbd6:	2500      	movs	r5, #0
 800dbd8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800dbdc:	f108 0201 	add.w	r2, r8, #1
 800dbe0:	9217      	str	r2, [sp, #92]	; 0x5c
 800dbe2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800dbe6:	2a2b      	cmp	r2, #43	; 0x2b
 800dbe8:	d075      	beq.n	800dcd6 <_strtod_l+0x286>
 800dbea:	2a2d      	cmp	r2, #45	; 0x2d
 800dbec:	d07b      	beq.n	800dce6 <_strtod_l+0x296>
 800dbee:	f04f 0c00 	mov.w	ip, #0
 800dbf2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800dbf6:	2909      	cmp	r1, #9
 800dbf8:	f240 8082 	bls.w	800dd00 <_strtod_l+0x2b0>
 800dbfc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800dc00:	2600      	movs	r6, #0
 800dc02:	e09d      	b.n	800dd40 <_strtod_l+0x2f0>
 800dc04:	2300      	movs	r3, #0
 800dc06:	e7c4      	b.n	800db92 <_strtod_l+0x142>
 800dc08:	2f08      	cmp	r7, #8
 800dc0a:	bfd8      	it	le
 800dc0c:	9907      	ldrle	r1, [sp, #28]
 800dc0e:	f100 0001 	add.w	r0, r0, #1
 800dc12:	bfda      	itte	le
 800dc14:	fb02 3301 	mlale	r3, r2, r1, r3
 800dc18:	9307      	strle	r3, [sp, #28]
 800dc1a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800dc1e:	3701      	adds	r7, #1
 800dc20:	9017      	str	r0, [sp, #92]	; 0x5c
 800dc22:	e7bf      	b.n	800dba4 <_strtod_l+0x154>
 800dc24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc26:	195a      	adds	r2, r3, r5
 800dc28:	9217      	str	r2, [sp, #92]	; 0x5c
 800dc2a:	5d5a      	ldrb	r2, [r3, r5]
 800dc2c:	2f00      	cmp	r7, #0
 800dc2e:	d037      	beq.n	800dca0 <_strtod_l+0x250>
 800dc30:	9005      	str	r0, [sp, #20]
 800dc32:	463d      	mov	r5, r7
 800dc34:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800dc38:	2b09      	cmp	r3, #9
 800dc3a:	d912      	bls.n	800dc62 <_strtod_l+0x212>
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	e7c2      	b.n	800dbc6 <_strtod_l+0x176>
 800dc40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc42:	1c5a      	adds	r2, r3, #1
 800dc44:	9217      	str	r2, [sp, #92]	; 0x5c
 800dc46:	785a      	ldrb	r2, [r3, #1]
 800dc48:	3001      	adds	r0, #1
 800dc4a:	2a30      	cmp	r2, #48	; 0x30
 800dc4c:	d0f8      	beq.n	800dc40 <_strtod_l+0x1f0>
 800dc4e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800dc52:	2b08      	cmp	r3, #8
 800dc54:	f200 84d9 	bhi.w	800e60a <_strtod_l+0xbba>
 800dc58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc5a:	9005      	str	r0, [sp, #20]
 800dc5c:	2000      	movs	r0, #0
 800dc5e:	9308      	str	r3, [sp, #32]
 800dc60:	4605      	mov	r5, r0
 800dc62:	3a30      	subs	r2, #48	; 0x30
 800dc64:	f100 0301 	add.w	r3, r0, #1
 800dc68:	d014      	beq.n	800dc94 <_strtod_l+0x244>
 800dc6a:	9905      	ldr	r1, [sp, #20]
 800dc6c:	4419      	add	r1, r3
 800dc6e:	9105      	str	r1, [sp, #20]
 800dc70:	462b      	mov	r3, r5
 800dc72:	eb00 0e05 	add.w	lr, r0, r5
 800dc76:	210a      	movs	r1, #10
 800dc78:	4573      	cmp	r3, lr
 800dc7a:	d113      	bne.n	800dca4 <_strtod_l+0x254>
 800dc7c:	182b      	adds	r3, r5, r0
 800dc7e:	2b08      	cmp	r3, #8
 800dc80:	f105 0501 	add.w	r5, r5, #1
 800dc84:	4405      	add	r5, r0
 800dc86:	dc1c      	bgt.n	800dcc2 <_strtod_l+0x272>
 800dc88:	9907      	ldr	r1, [sp, #28]
 800dc8a:	230a      	movs	r3, #10
 800dc8c:	fb03 2301 	mla	r3, r3, r1, r2
 800dc90:	9307      	str	r3, [sp, #28]
 800dc92:	2300      	movs	r3, #0
 800dc94:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc96:	1c51      	adds	r1, r2, #1
 800dc98:	9117      	str	r1, [sp, #92]	; 0x5c
 800dc9a:	7852      	ldrb	r2, [r2, #1]
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	e7c9      	b.n	800dc34 <_strtod_l+0x1e4>
 800dca0:	4638      	mov	r0, r7
 800dca2:	e7d2      	b.n	800dc4a <_strtod_l+0x1fa>
 800dca4:	2b08      	cmp	r3, #8
 800dca6:	dc04      	bgt.n	800dcb2 <_strtod_l+0x262>
 800dca8:	9e07      	ldr	r6, [sp, #28]
 800dcaa:	434e      	muls	r6, r1
 800dcac:	9607      	str	r6, [sp, #28]
 800dcae:	3301      	adds	r3, #1
 800dcb0:	e7e2      	b.n	800dc78 <_strtod_l+0x228>
 800dcb2:	f103 0c01 	add.w	ip, r3, #1
 800dcb6:	f1bc 0f10 	cmp.w	ip, #16
 800dcba:	bfd8      	it	le
 800dcbc:	fb01 f909 	mulle.w	r9, r1, r9
 800dcc0:	e7f5      	b.n	800dcae <_strtod_l+0x25e>
 800dcc2:	2d10      	cmp	r5, #16
 800dcc4:	bfdc      	itt	le
 800dcc6:	230a      	movle	r3, #10
 800dcc8:	fb03 2909 	mlale	r9, r3, r9, r2
 800dccc:	e7e1      	b.n	800dc92 <_strtod_l+0x242>
 800dcce:	2300      	movs	r3, #0
 800dcd0:	9305      	str	r3, [sp, #20]
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	e77c      	b.n	800dbd0 <_strtod_l+0x180>
 800dcd6:	f04f 0c00 	mov.w	ip, #0
 800dcda:	f108 0202 	add.w	r2, r8, #2
 800dcde:	9217      	str	r2, [sp, #92]	; 0x5c
 800dce0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800dce4:	e785      	b.n	800dbf2 <_strtod_l+0x1a2>
 800dce6:	f04f 0c01 	mov.w	ip, #1
 800dcea:	e7f6      	b.n	800dcda <_strtod_l+0x28a>
 800dcec:	08011970 	.word	0x08011970
 800dcf0:	08011824 	.word	0x08011824
 800dcf4:	7ff00000 	.word	0x7ff00000
 800dcf8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dcfa:	1c51      	adds	r1, r2, #1
 800dcfc:	9117      	str	r1, [sp, #92]	; 0x5c
 800dcfe:	7852      	ldrb	r2, [r2, #1]
 800dd00:	2a30      	cmp	r2, #48	; 0x30
 800dd02:	d0f9      	beq.n	800dcf8 <_strtod_l+0x2a8>
 800dd04:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800dd08:	2908      	cmp	r1, #8
 800dd0a:	f63f af79 	bhi.w	800dc00 <_strtod_l+0x1b0>
 800dd0e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800dd12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dd14:	9206      	str	r2, [sp, #24]
 800dd16:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dd18:	1c51      	adds	r1, r2, #1
 800dd1a:	9117      	str	r1, [sp, #92]	; 0x5c
 800dd1c:	7852      	ldrb	r2, [r2, #1]
 800dd1e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800dd22:	2e09      	cmp	r6, #9
 800dd24:	d937      	bls.n	800dd96 <_strtod_l+0x346>
 800dd26:	9e06      	ldr	r6, [sp, #24]
 800dd28:	1b89      	subs	r1, r1, r6
 800dd2a:	2908      	cmp	r1, #8
 800dd2c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800dd30:	dc02      	bgt.n	800dd38 <_strtod_l+0x2e8>
 800dd32:	4576      	cmp	r6, lr
 800dd34:	bfa8      	it	ge
 800dd36:	4676      	movge	r6, lr
 800dd38:	f1bc 0f00 	cmp.w	ip, #0
 800dd3c:	d000      	beq.n	800dd40 <_strtod_l+0x2f0>
 800dd3e:	4276      	negs	r6, r6
 800dd40:	2d00      	cmp	r5, #0
 800dd42:	d14d      	bne.n	800dde0 <_strtod_l+0x390>
 800dd44:	9904      	ldr	r1, [sp, #16]
 800dd46:	4301      	orrs	r1, r0
 800dd48:	f47f aec6 	bne.w	800dad8 <_strtod_l+0x88>
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	f47f aee1 	bne.w	800db14 <_strtod_l+0xc4>
 800dd52:	2a69      	cmp	r2, #105	; 0x69
 800dd54:	d027      	beq.n	800dda6 <_strtod_l+0x356>
 800dd56:	dc24      	bgt.n	800dda2 <_strtod_l+0x352>
 800dd58:	2a49      	cmp	r2, #73	; 0x49
 800dd5a:	d024      	beq.n	800dda6 <_strtod_l+0x356>
 800dd5c:	2a4e      	cmp	r2, #78	; 0x4e
 800dd5e:	f47f aed9 	bne.w	800db14 <_strtod_l+0xc4>
 800dd62:	499f      	ldr	r1, [pc, #636]	; (800dfe0 <_strtod_l+0x590>)
 800dd64:	a817      	add	r0, sp, #92	; 0x5c
 800dd66:	f001 fdc1 	bl	800f8ec <__match>
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	f43f aed2 	beq.w	800db14 <_strtod_l+0xc4>
 800dd70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	2b28      	cmp	r3, #40	; 0x28
 800dd76:	d12d      	bne.n	800ddd4 <_strtod_l+0x384>
 800dd78:	499a      	ldr	r1, [pc, #616]	; (800dfe4 <_strtod_l+0x594>)
 800dd7a:	aa1a      	add	r2, sp, #104	; 0x68
 800dd7c:	a817      	add	r0, sp, #92	; 0x5c
 800dd7e:	f001 fdc9 	bl	800f914 <__hexnan>
 800dd82:	2805      	cmp	r0, #5
 800dd84:	d126      	bne.n	800ddd4 <_strtod_l+0x384>
 800dd86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dd88:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800dd8c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800dd90:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800dd94:	e6a0      	b.n	800dad8 <_strtod_l+0x88>
 800dd96:	210a      	movs	r1, #10
 800dd98:	fb01 2e0e 	mla	lr, r1, lr, r2
 800dd9c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800dda0:	e7b9      	b.n	800dd16 <_strtod_l+0x2c6>
 800dda2:	2a6e      	cmp	r2, #110	; 0x6e
 800dda4:	e7db      	b.n	800dd5e <_strtod_l+0x30e>
 800dda6:	4990      	ldr	r1, [pc, #576]	; (800dfe8 <_strtod_l+0x598>)
 800dda8:	a817      	add	r0, sp, #92	; 0x5c
 800ddaa:	f001 fd9f 	bl	800f8ec <__match>
 800ddae:	2800      	cmp	r0, #0
 800ddb0:	f43f aeb0 	beq.w	800db14 <_strtod_l+0xc4>
 800ddb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ddb6:	498d      	ldr	r1, [pc, #564]	; (800dfec <_strtod_l+0x59c>)
 800ddb8:	3b01      	subs	r3, #1
 800ddba:	a817      	add	r0, sp, #92	; 0x5c
 800ddbc:	9317      	str	r3, [sp, #92]	; 0x5c
 800ddbe:	f001 fd95 	bl	800f8ec <__match>
 800ddc2:	b910      	cbnz	r0, 800ddca <_strtod_l+0x37a>
 800ddc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	9317      	str	r3, [sp, #92]	; 0x5c
 800ddca:	f8df b230 	ldr.w	fp, [pc, #560]	; 800dffc <_strtod_l+0x5ac>
 800ddce:	f04f 0a00 	mov.w	sl, #0
 800ddd2:	e681      	b.n	800dad8 <_strtod_l+0x88>
 800ddd4:	4886      	ldr	r0, [pc, #536]	; (800dff0 <_strtod_l+0x5a0>)
 800ddd6:	f002 fc8f 	bl	80106f8 <nan>
 800ddda:	ec5b ab10 	vmov	sl, fp, d0
 800ddde:	e67b      	b.n	800dad8 <_strtod_l+0x88>
 800dde0:	9b05      	ldr	r3, [sp, #20]
 800dde2:	9807      	ldr	r0, [sp, #28]
 800dde4:	1af3      	subs	r3, r6, r3
 800dde6:	2f00      	cmp	r7, #0
 800dde8:	bf08      	it	eq
 800ddea:	462f      	moveq	r7, r5
 800ddec:	2d10      	cmp	r5, #16
 800ddee:	9306      	str	r3, [sp, #24]
 800ddf0:	46a8      	mov	r8, r5
 800ddf2:	bfa8      	it	ge
 800ddf4:	f04f 0810 	movge.w	r8, #16
 800ddf8:	f7f2 fb8c 	bl	8000514 <__aeabi_ui2d>
 800ddfc:	2d09      	cmp	r5, #9
 800ddfe:	4682      	mov	sl, r0
 800de00:	468b      	mov	fp, r1
 800de02:	dd13      	ble.n	800de2c <_strtod_l+0x3dc>
 800de04:	4b7b      	ldr	r3, [pc, #492]	; (800dff4 <_strtod_l+0x5a4>)
 800de06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800de0a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800de0e:	f7f2 fbfb 	bl	8000608 <__aeabi_dmul>
 800de12:	4682      	mov	sl, r0
 800de14:	4648      	mov	r0, r9
 800de16:	468b      	mov	fp, r1
 800de18:	f7f2 fb7c 	bl	8000514 <__aeabi_ui2d>
 800de1c:	4602      	mov	r2, r0
 800de1e:	460b      	mov	r3, r1
 800de20:	4650      	mov	r0, sl
 800de22:	4659      	mov	r1, fp
 800de24:	f7f2 fa3a 	bl	800029c <__adddf3>
 800de28:	4682      	mov	sl, r0
 800de2a:	468b      	mov	fp, r1
 800de2c:	2d0f      	cmp	r5, #15
 800de2e:	dc38      	bgt.n	800dea2 <_strtod_l+0x452>
 800de30:	9b06      	ldr	r3, [sp, #24]
 800de32:	2b00      	cmp	r3, #0
 800de34:	f43f ae50 	beq.w	800dad8 <_strtod_l+0x88>
 800de38:	dd24      	ble.n	800de84 <_strtod_l+0x434>
 800de3a:	2b16      	cmp	r3, #22
 800de3c:	dc0b      	bgt.n	800de56 <_strtod_l+0x406>
 800de3e:	496d      	ldr	r1, [pc, #436]	; (800dff4 <_strtod_l+0x5a4>)
 800de40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800de44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de48:	4652      	mov	r2, sl
 800de4a:	465b      	mov	r3, fp
 800de4c:	f7f2 fbdc 	bl	8000608 <__aeabi_dmul>
 800de50:	4682      	mov	sl, r0
 800de52:	468b      	mov	fp, r1
 800de54:	e640      	b.n	800dad8 <_strtod_l+0x88>
 800de56:	9a06      	ldr	r2, [sp, #24]
 800de58:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800de5c:	4293      	cmp	r3, r2
 800de5e:	db20      	blt.n	800dea2 <_strtod_l+0x452>
 800de60:	4c64      	ldr	r4, [pc, #400]	; (800dff4 <_strtod_l+0x5a4>)
 800de62:	f1c5 050f 	rsb	r5, r5, #15
 800de66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800de6a:	4652      	mov	r2, sl
 800de6c:	465b      	mov	r3, fp
 800de6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de72:	f7f2 fbc9 	bl	8000608 <__aeabi_dmul>
 800de76:	9b06      	ldr	r3, [sp, #24]
 800de78:	1b5d      	subs	r5, r3, r5
 800de7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800de7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800de82:	e7e3      	b.n	800de4c <_strtod_l+0x3fc>
 800de84:	9b06      	ldr	r3, [sp, #24]
 800de86:	3316      	adds	r3, #22
 800de88:	db0b      	blt.n	800dea2 <_strtod_l+0x452>
 800de8a:	9b05      	ldr	r3, [sp, #20]
 800de8c:	1b9e      	subs	r6, r3, r6
 800de8e:	4b59      	ldr	r3, [pc, #356]	; (800dff4 <_strtod_l+0x5a4>)
 800de90:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800de94:	e9d6 2300 	ldrd	r2, r3, [r6]
 800de98:	4650      	mov	r0, sl
 800de9a:	4659      	mov	r1, fp
 800de9c:	f7f2 fcde 	bl	800085c <__aeabi_ddiv>
 800dea0:	e7d6      	b.n	800de50 <_strtod_l+0x400>
 800dea2:	9b06      	ldr	r3, [sp, #24]
 800dea4:	eba5 0808 	sub.w	r8, r5, r8
 800dea8:	4498      	add	r8, r3
 800deaa:	f1b8 0f00 	cmp.w	r8, #0
 800deae:	dd74      	ble.n	800df9a <_strtod_l+0x54a>
 800deb0:	f018 030f 	ands.w	r3, r8, #15
 800deb4:	d00a      	beq.n	800decc <_strtod_l+0x47c>
 800deb6:	494f      	ldr	r1, [pc, #316]	; (800dff4 <_strtod_l+0x5a4>)
 800deb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800debc:	4652      	mov	r2, sl
 800debe:	465b      	mov	r3, fp
 800dec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dec4:	f7f2 fba0 	bl	8000608 <__aeabi_dmul>
 800dec8:	4682      	mov	sl, r0
 800deca:	468b      	mov	fp, r1
 800decc:	f038 080f 	bics.w	r8, r8, #15
 800ded0:	d04f      	beq.n	800df72 <_strtod_l+0x522>
 800ded2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ded6:	dd22      	ble.n	800df1e <_strtod_l+0x4ce>
 800ded8:	2500      	movs	r5, #0
 800deda:	462e      	mov	r6, r5
 800dedc:	9507      	str	r5, [sp, #28]
 800dede:	9505      	str	r5, [sp, #20]
 800dee0:	2322      	movs	r3, #34	; 0x22
 800dee2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800dffc <_strtod_l+0x5ac>
 800dee6:	6023      	str	r3, [r4, #0]
 800dee8:	f04f 0a00 	mov.w	sl, #0
 800deec:	9b07      	ldr	r3, [sp, #28]
 800deee:	2b00      	cmp	r3, #0
 800def0:	f43f adf2 	beq.w	800dad8 <_strtod_l+0x88>
 800def4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800def6:	4620      	mov	r0, r4
 800def8:	f001 fe0a 	bl	800fb10 <_Bfree>
 800defc:	9905      	ldr	r1, [sp, #20]
 800defe:	4620      	mov	r0, r4
 800df00:	f001 fe06 	bl	800fb10 <_Bfree>
 800df04:	4631      	mov	r1, r6
 800df06:	4620      	mov	r0, r4
 800df08:	f001 fe02 	bl	800fb10 <_Bfree>
 800df0c:	9907      	ldr	r1, [sp, #28]
 800df0e:	4620      	mov	r0, r4
 800df10:	f001 fdfe 	bl	800fb10 <_Bfree>
 800df14:	4629      	mov	r1, r5
 800df16:	4620      	mov	r0, r4
 800df18:	f001 fdfa 	bl	800fb10 <_Bfree>
 800df1c:	e5dc      	b.n	800dad8 <_strtod_l+0x88>
 800df1e:	4b36      	ldr	r3, [pc, #216]	; (800dff8 <_strtod_l+0x5a8>)
 800df20:	9304      	str	r3, [sp, #16]
 800df22:	2300      	movs	r3, #0
 800df24:	ea4f 1828 	mov.w	r8, r8, asr #4
 800df28:	4650      	mov	r0, sl
 800df2a:	4659      	mov	r1, fp
 800df2c:	4699      	mov	r9, r3
 800df2e:	f1b8 0f01 	cmp.w	r8, #1
 800df32:	dc21      	bgt.n	800df78 <_strtod_l+0x528>
 800df34:	b10b      	cbz	r3, 800df3a <_strtod_l+0x4ea>
 800df36:	4682      	mov	sl, r0
 800df38:	468b      	mov	fp, r1
 800df3a:	4b2f      	ldr	r3, [pc, #188]	; (800dff8 <_strtod_l+0x5a8>)
 800df3c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800df40:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800df44:	4652      	mov	r2, sl
 800df46:	465b      	mov	r3, fp
 800df48:	e9d9 0100 	ldrd	r0, r1, [r9]
 800df4c:	f7f2 fb5c 	bl	8000608 <__aeabi_dmul>
 800df50:	4b2a      	ldr	r3, [pc, #168]	; (800dffc <_strtod_l+0x5ac>)
 800df52:	460a      	mov	r2, r1
 800df54:	400b      	ands	r3, r1
 800df56:	492a      	ldr	r1, [pc, #168]	; (800e000 <_strtod_l+0x5b0>)
 800df58:	428b      	cmp	r3, r1
 800df5a:	4682      	mov	sl, r0
 800df5c:	d8bc      	bhi.n	800ded8 <_strtod_l+0x488>
 800df5e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800df62:	428b      	cmp	r3, r1
 800df64:	bf86      	itte	hi
 800df66:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800e004 <_strtod_l+0x5b4>
 800df6a:	f04f 3aff 	movhi.w	sl, #4294967295
 800df6e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800df72:	2300      	movs	r3, #0
 800df74:	9304      	str	r3, [sp, #16]
 800df76:	e084      	b.n	800e082 <_strtod_l+0x632>
 800df78:	f018 0f01 	tst.w	r8, #1
 800df7c:	d005      	beq.n	800df8a <_strtod_l+0x53a>
 800df7e:	9b04      	ldr	r3, [sp, #16]
 800df80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df84:	f7f2 fb40 	bl	8000608 <__aeabi_dmul>
 800df88:	2301      	movs	r3, #1
 800df8a:	9a04      	ldr	r2, [sp, #16]
 800df8c:	3208      	adds	r2, #8
 800df8e:	f109 0901 	add.w	r9, r9, #1
 800df92:	ea4f 0868 	mov.w	r8, r8, asr #1
 800df96:	9204      	str	r2, [sp, #16]
 800df98:	e7c9      	b.n	800df2e <_strtod_l+0x4de>
 800df9a:	d0ea      	beq.n	800df72 <_strtod_l+0x522>
 800df9c:	f1c8 0800 	rsb	r8, r8, #0
 800dfa0:	f018 020f 	ands.w	r2, r8, #15
 800dfa4:	d00a      	beq.n	800dfbc <_strtod_l+0x56c>
 800dfa6:	4b13      	ldr	r3, [pc, #76]	; (800dff4 <_strtod_l+0x5a4>)
 800dfa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfac:	4650      	mov	r0, sl
 800dfae:	4659      	mov	r1, fp
 800dfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb4:	f7f2 fc52 	bl	800085c <__aeabi_ddiv>
 800dfb8:	4682      	mov	sl, r0
 800dfba:	468b      	mov	fp, r1
 800dfbc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800dfc0:	d0d7      	beq.n	800df72 <_strtod_l+0x522>
 800dfc2:	f1b8 0f1f 	cmp.w	r8, #31
 800dfc6:	dd1f      	ble.n	800e008 <_strtod_l+0x5b8>
 800dfc8:	2500      	movs	r5, #0
 800dfca:	462e      	mov	r6, r5
 800dfcc:	9507      	str	r5, [sp, #28]
 800dfce:	9505      	str	r5, [sp, #20]
 800dfd0:	2322      	movs	r3, #34	; 0x22
 800dfd2:	f04f 0a00 	mov.w	sl, #0
 800dfd6:	f04f 0b00 	mov.w	fp, #0
 800dfda:	6023      	str	r3, [r4, #0]
 800dfdc:	e786      	b.n	800deec <_strtod_l+0x49c>
 800dfde:	bf00      	nop
 800dfe0:	080117fd 	.word	0x080117fd
 800dfe4:	08011838 	.word	0x08011838
 800dfe8:	080117f5 	.word	0x080117f5
 800dfec:	0801187b 	.word	0x0801187b
 800dff0:	08011b28 	.word	0x08011b28
 800dff4:	08011a08 	.word	0x08011a08
 800dff8:	080119e0 	.word	0x080119e0
 800dffc:	7ff00000 	.word	0x7ff00000
 800e000:	7ca00000 	.word	0x7ca00000
 800e004:	7fefffff 	.word	0x7fefffff
 800e008:	f018 0310 	ands.w	r3, r8, #16
 800e00c:	bf18      	it	ne
 800e00e:	236a      	movne	r3, #106	; 0x6a
 800e010:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800e3c0 <_strtod_l+0x970>
 800e014:	9304      	str	r3, [sp, #16]
 800e016:	4650      	mov	r0, sl
 800e018:	4659      	mov	r1, fp
 800e01a:	2300      	movs	r3, #0
 800e01c:	f018 0f01 	tst.w	r8, #1
 800e020:	d004      	beq.n	800e02c <_strtod_l+0x5dc>
 800e022:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e026:	f7f2 faef 	bl	8000608 <__aeabi_dmul>
 800e02a:	2301      	movs	r3, #1
 800e02c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e030:	f109 0908 	add.w	r9, r9, #8
 800e034:	d1f2      	bne.n	800e01c <_strtod_l+0x5cc>
 800e036:	b10b      	cbz	r3, 800e03c <_strtod_l+0x5ec>
 800e038:	4682      	mov	sl, r0
 800e03a:	468b      	mov	fp, r1
 800e03c:	9b04      	ldr	r3, [sp, #16]
 800e03e:	b1c3      	cbz	r3, 800e072 <_strtod_l+0x622>
 800e040:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e044:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e048:	2b00      	cmp	r3, #0
 800e04a:	4659      	mov	r1, fp
 800e04c:	dd11      	ble.n	800e072 <_strtod_l+0x622>
 800e04e:	2b1f      	cmp	r3, #31
 800e050:	f340 8124 	ble.w	800e29c <_strtod_l+0x84c>
 800e054:	2b34      	cmp	r3, #52	; 0x34
 800e056:	bfde      	ittt	le
 800e058:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e05c:	f04f 33ff 	movle.w	r3, #4294967295
 800e060:	fa03 f202 	lslle.w	r2, r3, r2
 800e064:	f04f 0a00 	mov.w	sl, #0
 800e068:	bfcc      	ite	gt
 800e06a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e06e:	ea02 0b01 	andle.w	fp, r2, r1
 800e072:	2200      	movs	r2, #0
 800e074:	2300      	movs	r3, #0
 800e076:	4650      	mov	r0, sl
 800e078:	4659      	mov	r1, fp
 800e07a:	f7f2 fd2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800e07e:	2800      	cmp	r0, #0
 800e080:	d1a2      	bne.n	800dfc8 <_strtod_l+0x578>
 800e082:	9b07      	ldr	r3, [sp, #28]
 800e084:	9300      	str	r3, [sp, #0]
 800e086:	9908      	ldr	r1, [sp, #32]
 800e088:	462b      	mov	r3, r5
 800e08a:	463a      	mov	r2, r7
 800e08c:	4620      	mov	r0, r4
 800e08e:	f001 fda7 	bl	800fbe0 <__s2b>
 800e092:	9007      	str	r0, [sp, #28]
 800e094:	2800      	cmp	r0, #0
 800e096:	f43f af1f 	beq.w	800ded8 <_strtod_l+0x488>
 800e09a:	9b05      	ldr	r3, [sp, #20]
 800e09c:	1b9e      	subs	r6, r3, r6
 800e09e:	9b06      	ldr	r3, [sp, #24]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	bfb4      	ite	lt
 800e0a4:	4633      	movlt	r3, r6
 800e0a6:	2300      	movge	r3, #0
 800e0a8:	930c      	str	r3, [sp, #48]	; 0x30
 800e0aa:	9b06      	ldr	r3, [sp, #24]
 800e0ac:	2500      	movs	r5, #0
 800e0ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e0b2:	9312      	str	r3, [sp, #72]	; 0x48
 800e0b4:	462e      	mov	r6, r5
 800e0b6:	9b07      	ldr	r3, [sp, #28]
 800e0b8:	4620      	mov	r0, r4
 800e0ba:	6859      	ldr	r1, [r3, #4]
 800e0bc:	f001 fce8 	bl	800fa90 <_Balloc>
 800e0c0:	9005      	str	r0, [sp, #20]
 800e0c2:	2800      	cmp	r0, #0
 800e0c4:	f43f af0c 	beq.w	800dee0 <_strtod_l+0x490>
 800e0c8:	9b07      	ldr	r3, [sp, #28]
 800e0ca:	691a      	ldr	r2, [r3, #16]
 800e0cc:	3202      	adds	r2, #2
 800e0ce:	f103 010c 	add.w	r1, r3, #12
 800e0d2:	0092      	lsls	r2, r2, #2
 800e0d4:	300c      	adds	r0, #12
 800e0d6:	f7fe fefb 	bl	800ced0 <memcpy>
 800e0da:	ec4b ab10 	vmov	d0, sl, fp
 800e0de:	aa1a      	add	r2, sp, #104	; 0x68
 800e0e0:	a919      	add	r1, sp, #100	; 0x64
 800e0e2:	4620      	mov	r0, r4
 800e0e4:	f002 f8c2 	bl	801026c <__d2b>
 800e0e8:	ec4b ab18 	vmov	d8, sl, fp
 800e0ec:	9018      	str	r0, [sp, #96]	; 0x60
 800e0ee:	2800      	cmp	r0, #0
 800e0f0:	f43f aef6 	beq.w	800dee0 <_strtod_l+0x490>
 800e0f4:	2101      	movs	r1, #1
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	f001 fe0c 	bl	800fd14 <__i2b>
 800e0fc:	4606      	mov	r6, r0
 800e0fe:	2800      	cmp	r0, #0
 800e100:	f43f aeee 	beq.w	800dee0 <_strtod_l+0x490>
 800e104:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e106:	9904      	ldr	r1, [sp, #16]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	bfab      	itete	ge
 800e10c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800e10e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800e110:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e112:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800e116:	bfac      	ite	ge
 800e118:	eb03 0902 	addge.w	r9, r3, r2
 800e11c:	1ad7      	sublt	r7, r2, r3
 800e11e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e120:	eba3 0801 	sub.w	r8, r3, r1
 800e124:	4490      	add	r8, r2
 800e126:	4ba1      	ldr	r3, [pc, #644]	; (800e3ac <_strtod_l+0x95c>)
 800e128:	f108 38ff 	add.w	r8, r8, #4294967295
 800e12c:	4598      	cmp	r8, r3
 800e12e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e132:	f280 80c7 	bge.w	800e2c4 <_strtod_l+0x874>
 800e136:	eba3 0308 	sub.w	r3, r3, r8
 800e13a:	2b1f      	cmp	r3, #31
 800e13c:	eba2 0203 	sub.w	r2, r2, r3
 800e140:	f04f 0101 	mov.w	r1, #1
 800e144:	f300 80b1 	bgt.w	800e2aa <_strtod_l+0x85a>
 800e148:	fa01 f303 	lsl.w	r3, r1, r3
 800e14c:	930d      	str	r3, [sp, #52]	; 0x34
 800e14e:	2300      	movs	r3, #0
 800e150:	9308      	str	r3, [sp, #32]
 800e152:	eb09 0802 	add.w	r8, r9, r2
 800e156:	9b04      	ldr	r3, [sp, #16]
 800e158:	45c1      	cmp	r9, r8
 800e15a:	4417      	add	r7, r2
 800e15c:	441f      	add	r7, r3
 800e15e:	464b      	mov	r3, r9
 800e160:	bfa8      	it	ge
 800e162:	4643      	movge	r3, r8
 800e164:	42bb      	cmp	r3, r7
 800e166:	bfa8      	it	ge
 800e168:	463b      	movge	r3, r7
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	bfc2      	ittt	gt
 800e16e:	eba8 0803 	subgt.w	r8, r8, r3
 800e172:	1aff      	subgt	r7, r7, r3
 800e174:	eba9 0903 	subgt.w	r9, r9, r3
 800e178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	dd17      	ble.n	800e1ae <_strtod_l+0x75e>
 800e17e:	4631      	mov	r1, r6
 800e180:	461a      	mov	r2, r3
 800e182:	4620      	mov	r0, r4
 800e184:	f001 fe86 	bl	800fe94 <__pow5mult>
 800e188:	4606      	mov	r6, r0
 800e18a:	2800      	cmp	r0, #0
 800e18c:	f43f aea8 	beq.w	800dee0 <_strtod_l+0x490>
 800e190:	4601      	mov	r1, r0
 800e192:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e194:	4620      	mov	r0, r4
 800e196:	f001 fdd3 	bl	800fd40 <__multiply>
 800e19a:	900b      	str	r0, [sp, #44]	; 0x2c
 800e19c:	2800      	cmp	r0, #0
 800e19e:	f43f ae9f 	beq.w	800dee0 <_strtod_l+0x490>
 800e1a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	f001 fcb3 	bl	800fb10 <_Bfree>
 800e1aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1ac:	9318      	str	r3, [sp, #96]	; 0x60
 800e1ae:	f1b8 0f00 	cmp.w	r8, #0
 800e1b2:	f300 808c 	bgt.w	800e2ce <_strtod_l+0x87e>
 800e1b6:	9b06      	ldr	r3, [sp, #24]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	dd08      	ble.n	800e1ce <_strtod_l+0x77e>
 800e1bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e1be:	9905      	ldr	r1, [sp, #20]
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	f001 fe67 	bl	800fe94 <__pow5mult>
 800e1c6:	9005      	str	r0, [sp, #20]
 800e1c8:	2800      	cmp	r0, #0
 800e1ca:	f43f ae89 	beq.w	800dee0 <_strtod_l+0x490>
 800e1ce:	2f00      	cmp	r7, #0
 800e1d0:	dd08      	ble.n	800e1e4 <_strtod_l+0x794>
 800e1d2:	9905      	ldr	r1, [sp, #20]
 800e1d4:	463a      	mov	r2, r7
 800e1d6:	4620      	mov	r0, r4
 800e1d8:	f001 feb6 	bl	800ff48 <__lshift>
 800e1dc:	9005      	str	r0, [sp, #20]
 800e1de:	2800      	cmp	r0, #0
 800e1e0:	f43f ae7e 	beq.w	800dee0 <_strtod_l+0x490>
 800e1e4:	f1b9 0f00 	cmp.w	r9, #0
 800e1e8:	dd08      	ble.n	800e1fc <_strtod_l+0x7ac>
 800e1ea:	4631      	mov	r1, r6
 800e1ec:	464a      	mov	r2, r9
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	f001 feaa 	bl	800ff48 <__lshift>
 800e1f4:	4606      	mov	r6, r0
 800e1f6:	2800      	cmp	r0, #0
 800e1f8:	f43f ae72 	beq.w	800dee0 <_strtod_l+0x490>
 800e1fc:	9a05      	ldr	r2, [sp, #20]
 800e1fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e200:	4620      	mov	r0, r4
 800e202:	f001 ff2d 	bl	8010060 <__mdiff>
 800e206:	4605      	mov	r5, r0
 800e208:	2800      	cmp	r0, #0
 800e20a:	f43f ae69 	beq.w	800dee0 <_strtod_l+0x490>
 800e20e:	68c3      	ldr	r3, [r0, #12]
 800e210:	930b      	str	r3, [sp, #44]	; 0x2c
 800e212:	2300      	movs	r3, #0
 800e214:	60c3      	str	r3, [r0, #12]
 800e216:	4631      	mov	r1, r6
 800e218:	f001 ff06 	bl	8010028 <__mcmp>
 800e21c:	2800      	cmp	r0, #0
 800e21e:	da60      	bge.n	800e2e2 <_strtod_l+0x892>
 800e220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e222:	ea53 030a 	orrs.w	r3, r3, sl
 800e226:	f040 8082 	bne.w	800e32e <_strtod_l+0x8de>
 800e22a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d17d      	bne.n	800e32e <_strtod_l+0x8de>
 800e232:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e236:	0d1b      	lsrs	r3, r3, #20
 800e238:	051b      	lsls	r3, r3, #20
 800e23a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e23e:	d976      	bls.n	800e32e <_strtod_l+0x8de>
 800e240:	696b      	ldr	r3, [r5, #20]
 800e242:	b913      	cbnz	r3, 800e24a <_strtod_l+0x7fa>
 800e244:	692b      	ldr	r3, [r5, #16]
 800e246:	2b01      	cmp	r3, #1
 800e248:	dd71      	ble.n	800e32e <_strtod_l+0x8de>
 800e24a:	4629      	mov	r1, r5
 800e24c:	2201      	movs	r2, #1
 800e24e:	4620      	mov	r0, r4
 800e250:	f001 fe7a 	bl	800ff48 <__lshift>
 800e254:	4631      	mov	r1, r6
 800e256:	4605      	mov	r5, r0
 800e258:	f001 fee6 	bl	8010028 <__mcmp>
 800e25c:	2800      	cmp	r0, #0
 800e25e:	dd66      	ble.n	800e32e <_strtod_l+0x8de>
 800e260:	9904      	ldr	r1, [sp, #16]
 800e262:	4a53      	ldr	r2, [pc, #332]	; (800e3b0 <_strtod_l+0x960>)
 800e264:	465b      	mov	r3, fp
 800e266:	2900      	cmp	r1, #0
 800e268:	f000 8081 	beq.w	800e36e <_strtod_l+0x91e>
 800e26c:	ea02 010b 	and.w	r1, r2, fp
 800e270:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e274:	dc7b      	bgt.n	800e36e <_strtod_l+0x91e>
 800e276:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e27a:	f77f aea9 	ble.w	800dfd0 <_strtod_l+0x580>
 800e27e:	4b4d      	ldr	r3, [pc, #308]	; (800e3b4 <_strtod_l+0x964>)
 800e280:	4650      	mov	r0, sl
 800e282:	4659      	mov	r1, fp
 800e284:	2200      	movs	r2, #0
 800e286:	f7f2 f9bf 	bl	8000608 <__aeabi_dmul>
 800e28a:	460b      	mov	r3, r1
 800e28c:	4303      	orrs	r3, r0
 800e28e:	bf08      	it	eq
 800e290:	2322      	moveq	r3, #34	; 0x22
 800e292:	4682      	mov	sl, r0
 800e294:	468b      	mov	fp, r1
 800e296:	bf08      	it	eq
 800e298:	6023      	streq	r3, [r4, #0]
 800e29a:	e62b      	b.n	800def4 <_strtod_l+0x4a4>
 800e29c:	f04f 32ff 	mov.w	r2, #4294967295
 800e2a0:	fa02 f303 	lsl.w	r3, r2, r3
 800e2a4:	ea03 0a0a 	and.w	sl, r3, sl
 800e2a8:	e6e3      	b.n	800e072 <_strtod_l+0x622>
 800e2aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e2ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e2b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e2b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e2ba:	fa01 f308 	lsl.w	r3, r1, r8
 800e2be:	9308      	str	r3, [sp, #32]
 800e2c0:	910d      	str	r1, [sp, #52]	; 0x34
 800e2c2:	e746      	b.n	800e152 <_strtod_l+0x702>
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	9308      	str	r3, [sp, #32]
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	930d      	str	r3, [sp, #52]	; 0x34
 800e2cc:	e741      	b.n	800e152 <_strtod_l+0x702>
 800e2ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e2d0:	4642      	mov	r2, r8
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	f001 fe38 	bl	800ff48 <__lshift>
 800e2d8:	9018      	str	r0, [sp, #96]	; 0x60
 800e2da:	2800      	cmp	r0, #0
 800e2dc:	f47f af6b 	bne.w	800e1b6 <_strtod_l+0x766>
 800e2e0:	e5fe      	b.n	800dee0 <_strtod_l+0x490>
 800e2e2:	465f      	mov	r7, fp
 800e2e4:	d16e      	bne.n	800e3c4 <_strtod_l+0x974>
 800e2e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e2e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e2ec:	b342      	cbz	r2, 800e340 <_strtod_l+0x8f0>
 800e2ee:	4a32      	ldr	r2, [pc, #200]	; (800e3b8 <_strtod_l+0x968>)
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d128      	bne.n	800e346 <_strtod_l+0x8f6>
 800e2f4:	9b04      	ldr	r3, [sp, #16]
 800e2f6:	4651      	mov	r1, sl
 800e2f8:	b1eb      	cbz	r3, 800e336 <_strtod_l+0x8e6>
 800e2fa:	4b2d      	ldr	r3, [pc, #180]	; (800e3b0 <_strtod_l+0x960>)
 800e2fc:	403b      	ands	r3, r7
 800e2fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e302:	f04f 32ff 	mov.w	r2, #4294967295
 800e306:	d819      	bhi.n	800e33c <_strtod_l+0x8ec>
 800e308:	0d1b      	lsrs	r3, r3, #20
 800e30a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e30e:	fa02 f303 	lsl.w	r3, r2, r3
 800e312:	4299      	cmp	r1, r3
 800e314:	d117      	bne.n	800e346 <_strtod_l+0x8f6>
 800e316:	4b29      	ldr	r3, [pc, #164]	; (800e3bc <_strtod_l+0x96c>)
 800e318:	429f      	cmp	r7, r3
 800e31a:	d102      	bne.n	800e322 <_strtod_l+0x8d2>
 800e31c:	3101      	adds	r1, #1
 800e31e:	f43f addf 	beq.w	800dee0 <_strtod_l+0x490>
 800e322:	4b23      	ldr	r3, [pc, #140]	; (800e3b0 <_strtod_l+0x960>)
 800e324:	403b      	ands	r3, r7
 800e326:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e32a:	f04f 0a00 	mov.w	sl, #0
 800e32e:	9b04      	ldr	r3, [sp, #16]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d1a4      	bne.n	800e27e <_strtod_l+0x82e>
 800e334:	e5de      	b.n	800def4 <_strtod_l+0x4a4>
 800e336:	f04f 33ff 	mov.w	r3, #4294967295
 800e33a:	e7ea      	b.n	800e312 <_strtod_l+0x8c2>
 800e33c:	4613      	mov	r3, r2
 800e33e:	e7e8      	b.n	800e312 <_strtod_l+0x8c2>
 800e340:	ea53 030a 	orrs.w	r3, r3, sl
 800e344:	d08c      	beq.n	800e260 <_strtod_l+0x810>
 800e346:	9b08      	ldr	r3, [sp, #32]
 800e348:	b1db      	cbz	r3, 800e382 <_strtod_l+0x932>
 800e34a:	423b      	tst	r3, r7
 800e34c:	d0ef      	beq.n	800e32e <_strtod_l+0x8de>
 800e34e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e350:	9a04      	ldr	r2, [sp, #16]
 800e352:	4650      	mov	r0, sl
 800e354:	4659      	mov	r1, fp
 800e356:	b1c3      	cbz	r3, 800e38a <_strtod_l+0x93a>
 800e358:	f7ff fb5e 	bl	800da18 <sulp>
 800e35c:	4602      	mov	r2, r0
 800e35e:	460b      	mov	r3, r1
 800e360:	ec51 0b18 	vmov	r0, r1, d8
 800e364:	f7f1 ff9a 	bl	800029c <__adddf3>
 800e368:	4682      	mov	sl, r0
 800e36a:	468b      	mov	fp, r1
 800e36c:	e7df      	b.n	800e32e <_strtod_l+0x8de>
 800e36e:	4013      	ands	r3, r2
 800e370:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e374:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e378:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e37c:	f04f 3aff 	mov.w	sl, #4294967295
 800e380:	e7d5      	b.n	800e32e <_strtod_l+0x8de>
 800e382:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e384:	ea13 0f0a 	tst.w	r3, sl
 800e388:	e7e0      	b.n	800e34c <_strtod_l+0x8fc>
 800e38a:	f7ff fb45 	bl	800da18 <sulp>
 800e38e:	4602      	mov	r2, r0
 800e390:	460b      	mov	r3, r1
 800e392:	ec51 0b18 	vmov	r0, r1, d8
 800e396:	f7f1 ff7f 	bl	8000298 <__aeabi_dsub>
 800e39a:	2200      	movs	r2, #0
 800e39c:	2300      	movs	r3, #0
 800e39e:	4682      	mov	sl, r0
 800e3a0:	468b      	mov	fp, r1
 800e3a2:	f7f2 fb99 	bl	8000ad8 <__aeabi_dcmpeq>
 800e3a6:	2800      	cmp	r0, #0
 800e3a8:	d0c1      	beq.n	800e32e <_strtod_l+0x8de>
 800e3aa:	e611      	b.n	800dfd0 <_strtod_l+0x580>
 800e3ac:	fffffc02 	.word	0xfffffc02
 800e3b0:	7ff00000 	.word	0x7ff00000
 800e3b4:	39500000 	.word	0x39500000
 800e3b8:	000fffff 	.word	0x000fffff
 800e3bc:	7fefffff 	.word	0x7fefffff
 800e3c0:	08011850 	.word	0x08011850
 800e3c4:	4631      	mov	r1, r6
 800e3c6:	4628      	mov	r0, r5
 800e3c8:	f001 ffac 	bl	8010324 <__ratio>
 800e3cc:	ec59 8b10 	vmov	r8, r9, d0
 800e3d0:	ee10 0a10 	vmov	r0, s0
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e3da:	4649      	mov	r1, r9
 800e3dc:	f7f2 fb90 	bl	8000b00 <__aeabi_dcmple>
 800e3e0:	2800      	cmp	r0, #0
 800e3e2:	d07a      	beq.n	800e4da <_strtod_l+0xa8a>
 800e3e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d04a      	beq.n	800e480 <_strtod_l+0xa30>
 800e3ea:	4b95      	ldr	r3, [pc, #596]	; (800e640 <_strtod_l+0xbf0>)
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e3f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e640 <_strtod_l+0xbf0>
 800e3f6:	f04f 0800 	mov.w	r8, #0
 800e3fa:	4b92      	ldr	r3, [pc, #584]	; (800e644 <_strtod_l+0xbf4>)
 800e3fc:	403b      	ands	r3, r7
 800e3fe:	930d      	str	r3, [sp, #52]	; 0x34
 800e400:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e402:	4b91      	ldr	r3, [pc, #580]	; (800e648 <_strtod_l+0xbf8>)
 800e404:	429a      	cmp	r2, r3
 800e406:	f040 80b0 	bne.w	800e56a <_strtod_l+0xb1a>
 800e40a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e40e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e412:	ec4b ab10 	vmov	d0, sl, fp
 800e416:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e41a:	f001 feab 	bl	8010174 <__ulp>
 800e41e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e422:	ec53 2b10 	vmov	r2, r3, d0
 800e426:	f7f2 f8ef 	bl	8000608 <__aeabi_dmul>
 800e42a:	4652      	mov	r2, sl
 800e42c:	465b      	mov	r3, fp
 800e42e:	f7f1 ff35 	bl	800029c <__adddf3>
 800e432:	460b      	mov	r3, r1
 800e434:	4983      	ldr	r1, [pc, #524]	; (800e644 <_strtod_l+0xbf4>)
 800e436:	4a85      	ldr	r2, [pc, #532]	; (800e64c <_strtod_l+0xbfc>)
 800e438:	4019      	ands	r1, r3
 800e43a:	4291      	cmp	r1, r2
 800e43c:	4682      	mov	sl, r0
 800e43e:	d960      	bls.n	800e502 <_strtod_l+0xab2>
 800e440:	ee18 3a90 	vmov	r3, s17
 800e444:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e448:	4293      	cmp	r3, r2
 800e44a:	d104      	bne.n	800e456 <_strtod_l+0xa06>
 800e44c:	ee18 3a10 	vmov	r3, s16
 800e450:	3301      	adds	r3, #1
 800e452:	f43f ad45 	beq.w	800dee0 <_strtod_l+0x490>
 800e456:	f8df b200 	ldr.w	fp, [pc, #512]	; 800e658 <_strtod_l+0xc08>
 800e45a:	f04f 3aff 	mov.w	sl, #4294967295
 800e45e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e460:	4620      	mov	r0, r4
 800e462:	f001 fb55 	bl	800fb10 <_Bfree>
 800e466:	9905      	ldr	r1, [sp, #20]
 800e468:	4620      	mov	r0, r4
 800e46a:	f001 fb51 	bl	800fb10 <_Bfree>
 800e46e:	4631      	mov	r1, r6
 800e470:	4620      	mov	r0, r4
 800e472:	f001 fb4d 	bl	800fb10 <_Bfree>
 800e476:	4629      	mov	r1, r5
 800e478:	4620      	mov	r0, r4
 800e47a:	f001 fb49 	bl	800fb10 <_Bfree>
 800e47e:	e61a      	b.n	800e0b6 <_strtod_l+0x666>
 800e480:	f1ba 0f00 	cmp.w	sl, #0
 800e484:	d11b      	bne.n	800e4be <_strtod_l+0xa6e>
 800e486:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e48a:	b9f3      	cbnz	r3, 800e4ca <_strtod_l+0xa7a>
 800e48c:	4b6c      	ldr	r3, [pc, #432]	; (800e640 <_strtod_l+0xbf0>)
 800e48e:	2200      	movs	r2, #0
 800e490:	4640      	mov	r0, r8
 800e492:	4649      	mov	r1, r9
 800e494:	f7f2 fb2a 	bl	8000aec <__aeabi_dcmplt>
 800e498:	b9d0      	cbnz	r0, 800e4d0 <_strtod_l+0xa80>
 800e49a:	4640      	mov	r0, r8
 800e49c:	4649      	mov	r1, r9
 800e49e:	4b6c      	ldr	r3, [pc, #432]	; (800e650 <_strtod_l+0xc00>)
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	f7f2 f8b1 	bl	8000608 <__aeabi_dmul>
 800e4a6:	4680      	mov	r8, r0
 800e4a8:	4689      	mov	r9, r1
 800e4aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e4ae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e4b2:	9315      	str	r3, [sp, #84]	; 0x54
 800e4b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e4b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e4bc:	e79d      	b.n	800e3fa <_strtod_l+0x9aa>
 800e4be:	f1ba 0f01 	cmp.w	sl, #1
 800e4c2:	d102      	bne.n	800e4ca <_strtod_l+0xa7a>
 800e4c4:	2f00      	cmp	r7, #0
 800e4c6:	f43f ad83 	beq.w	800dfd0 <_strtod_l+0x580>
 800e4ca:	4b62      	ldr	r3, [pc, #392]	; (800e654 <_strtod_l+0xc04>)
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	e78e      	b.n	800e3ee <_strtod_l+0x99e>
 800e4d0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800e650 <_strtod_l+0xc00>
 800e4d4:	f04f 0800 	mov.w	r8, #0
 800e4d8:	e7e7      	b.n	800e4aa <_strtod_l+0xa5a>
 800e4da:	4b5d      	ldr	r3, [pc, #372]	; (800e650 <_strtod_l+0xc00>)
 800e4dc:	4640      	mov	r0, r8
 800e4de:	4649      	mov	r1, r9
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	f7f2 f891 	bl	8000608 <__aeabi_dmul>
 800e4e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4e8:	4680      	mov	r8, r0
 800e4ea:	4689      	mov	r9, r1
 800e4ec:	b933      	cbnz	r3, 800e4fc <_strtod_l+0xaac>
 800e4ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e4f2:	900e      	str	r0, [sp, #56]	; 0x38
 800e4f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800e4f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e4fa:	e7dd      	b.n	800e4b8 <_strtod_l+0xa68>
 800e4fc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800e500:	e7f9      	b.n	800e4f6 <_strtod_l+0xaa6>
 800e502:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e506:	9b04      	ldr	r3, [sp, #16]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d1a8      	bne.n	800e45e <_strtod_l+0xa0e>
 800e50c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e510:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e512:	0d1b      	lsrs	r3, r3, #20
 800e514:	051b      	lsls	r3, r3, #20
 800e516:	429a      	cmp	r2, r3
 800e518:	d1a1      	bne.n	800e45e <_strtod_l+0xa0e>
 800e51a:	4640      	mov	r0, r8
 800e51c:	4649      	mov	r1, r9
 800e51e:	f7f2 fc23 	bl	8000d68 <__aeabi_d2lz>
 800e522:	f7f2 f843 	bl	80005ac <__aeabi_l2d>
 800e526:	4602      	mov	r2, r0
 800e528:	460b      	mov	r3, r1
 800e52a:	4640      	mov	r0, r8
 800e52c:	4649      	mov	r1, r9
 800e52e:	f7f1 feb3 	bl	8000298 <__aeabi_dsub>
 800e532:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e534:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e538:	ea43 030a 	orr.w	r3, r3, sl
 800e53c:	4313      	orrs	r3, r2
 800e53e:	4680      	mov	r8, r0
 800e540:	4689      	mov	r9, r1
 800e542:	d055      	beq.n	800e5f0 <_strtod_l+0xba0>
 800e544:	a336      	add	r3, pc, #216	; (adr r3, 800e620 <_strtod_l+0xbd0>)
 800e546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54a:	f7f2 facf 	bl	8000aec <__aeabi_dcmplt>
 800e54e:	2800      	cmp	r0, #0
 800e550:	f47f acd0 	bne.w	800def4 <_strtod_l+0x4a4>
 800e554:	a334      	add	r3, pc, #208	; (adr r3, 800e628 <_strtod_l+0xbd8>)
 800e556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55a:	4640      	mov	r0, r8
 800e55c:	4649      	mov	r1, r9
 800e55e:	f7f2 fae3 	bl	8000b28 <__aeabi_dcmpgt>
 800e562:	2800      	cmp	r0, #0
 800e564:	f43f af7b 	beq.w	800e45e <_strtod_l+0xa0e>
 800e568:	e4c4      	b.n	800def4 <_strtod_l+0x4a4>
 800e56a:	9b04      	ldr	r3, [sp, #16]
 800e56c:	b333      	cbz	r3, 800e5bc <_strtod_l+0xb6c>
 800e56e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e570:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e574:	d822      	bhi.n	800e5bc <_strtod_l+0xb6c>
 800e576:	a32e      	add	r3, pc, #184	; (adr r3, 800e630 <_strtod_l+0xbe0>)
 800e578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57c:	4640      	mov	r0, r8
 800e57e:	4649      	mov	r1, r9
 800e580:	f7f2 fabe 	bl	8000b00 <__aeabi_dcmple>
 800e584:	b1a0      	cbz	r0, 800e5b0 <_strtod_l+0xb60>
 800e586:	4649      	mov	r1, r9
 800e588:	4640      	mov	r0, r8
 800e58a:	f7f2 fb15 	bl	8000bb8 <__aeabi_d2uiz>
 800e58e:	2801      	cmp	r0, #1
 800e590:	bf38      	it	cc
 800e592:	2001      	movcc	r0, #1
 800e594:	f7f1 ffbe 	bl	8000514 <__aeabi_ui2d>
 800e598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e59a:	4680      	mov	r8, r0
 800e59c:	4689      	mov	r9, r1
 800e59e:	bb23      	cbnz	r3, 800e5ea <_strtod_l+0xb9a>
 800e5a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5a4:	9010      	str	r0, [sp, #64]	; 0x40
 800e5a6:	9311      	str	r3, [sp, #68]	; 0x44
 800e5a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e5ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e5b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e5b4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e5b8:	1a9b      	subs	r3, r3, r2
 800e5ba:	9309      	str	r3, [sp, #36]	; 0x24
 800e5bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e5c0:	eeb0 0a48 	vmov.f32	s0, s16
 800e5c4:	eef0 0a68 	vmov.f32	s1, s17
 800e5c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e5cc:	f001 fdd2 	bl	8010174 <__ulp>
 800e5d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e5d4:	ec53 2b10 	vmov	r2, r3, d0
 800e5d8:	f7f2 f816 	bl	8000608 <__aeabi_dmul>
 800e5dc:	ec53 2b18 	vmov	r2, r3, d8
 800e5e0:	f7f1 fe5c 	bl	800029c <__adddf3>
 800e5e4:	4682      	mov	sl, r0
 800e5e6:	468b      	mov	fp, r1
 800e5e8:	e78d      	b.n	800e506 <_strtod_l+0xab6>
 800e5ea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800e5ee:	e7db      	b.n	800e5a8 <_strtod_l+0xb58>
 800e5f0:	a311      	add	r3, pc, #68	; (adr r3, 800e638 <_strtod_l+0xbe8>)
 800e5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f6:	f7f2 fa79 	bl	8000aec <__aeabi_dcmplt>
 800e5fa:	e7b2      	b.n	800e562 <_strtod_l+0xb12>
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	930a      	str	r3, [sp, #40]	; 0x28
 800e600:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e602:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e604:	6013      	str	r3, [r2, #0]
 800e606:	f7ff ba6b 	b.w	800dae0 <_strtod_l+0x90>
 800e60a:	2a65      	cmp	r2, #101	; 0x65
 800e60c:	f43f ab5f 	beq.w	800dcce <_strtod_l+0x27e>
 800e610:	2a45      	cmp	r2, #69	; 0x45
 800e612:	f43f ab5c 	beq.w	800dcce <_strtod_l+0x27e>
 800e616:	2301      	movs	r3, #1
 800e618:	f7ff bb94 	b.w	800dd44 <_strtod_l+0x2f4>
 800e61c:	f3af 8000 	nop.w
 800e620:	94a03595 	.word	0x94a03595
 800e624:	3fdfffff 	.word	0x3fdfffff
 800e628:	35afe535 	.word	0x35afe535
 800e62c:	3fe00000 	.word	0x3fe00000
 800e630:	ffc00000 	.word	0xffc00000
 800e634:	41dfffff 	.word	0x41dfffff
 800e638:	94a03595 	.word	0x94a03595
 800e63c:	3fcfffff 	.word	0x3fcfffff
 800e640:	3ff00000 	.word	0x3ff00000
 800e644:	7ff00000 	.word	0x7ff00000
 800e648:	7fe00000 	.word	0x7fe00000
 800e64c:	7c9fffff 	.word	0x7c9fffff
 800e650:	3fe00000 	.word	0x3fe00000
 800e654:	bff00000 	.word	0xbff00000
 800e658:	7fefffff 	.word	0x7fefffff

0800e65c <strtod>:
 800e65c:	460a      	mov	r2, r1
 800e65e:	4601      	mov	r1, r0
 800e660:	4802      	ldr	r0, [pc, #8]	; (800e66c <strtod+0x10>)
 800e662:	4b03      	ldr	r3, [pc, #12]	; (800e670 <strtod+0x14>)
 800e664:	6800      	ldr	r0, [r0, #0]
 800e666:	f7ff b9f3 	b.w	800da50 <_strtod_l>
 800e66a:	bf00      	nop
 800e66c:	20000024 	.word	0x20000024
 800e670:	2000008c 	.word	0x2000008c

0800e674 <quorem>:
 800e674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e678:	6903      	ldr	r3, [r0, #16]
 800e67a:	690c      	ldr	r4, [r1, #16]
 800e67c:	42a3      	cmp	r3, r4
 800e67e:	4607      	mov	r7, r0
 800e680:	f2c0 8081 	blt.w	800e786 <quorem+0x112>
 800e684:	3c01      	subs	r4, #1
 800e686:	f101 0814 	add.w	r8, r1, #20
 800e68a:	f100 0514 	add.w	r5, r0, #20
 800e68e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e692:	9301      	str	r3, [sp, #4]
 800e694:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e698:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e69c:	3301      	adds	r3, #1
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e6a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e6a8:	fbb2 f6f3 	udiv	r6, r2, r3
 800e6ac:	d331      	bcc.n	800e712 <quorem+0x9e>
 800e6ae:	f04f 0e00 	mov.w	lr, #0
 800e6b2:	4640      	mov	r0, r8
 800e6b4:	46ac      	mov	ip, r5
 800e6b6:	46f2      	mov	sl, lr
 800e6b8:	f850 2b04 	ldr.w	r2, [r0], #4
 800e6bc:	b293      	uxth	r3, r2
 800e6be:	fb06 e303 	mla	r3, r6, r3, lr
 800e6c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e6c6:	b29b      	uxth	r3, r3
 800e6c8:	ebaa 0303 	sub.w	r3, sl, r3
 800e6cc:	f8dc a000 	ldr.w	sl, [ip]
 800e6d0:	0c12      	lsrs	r2, r2, #16
 800e6d2:	fa13 f38a 	uxtah	r3, r3, sl
 800e6d6:	fb06 e202 	mla	r2, r6, r2, lr
 800e6da:	9300      	str	r3, [sp, #0]
 800e6dc:	9b00      	ldr	r3, [sp, #0]
 800e6de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e6e2:	b292      	uxth	r2, r2
 800e6e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e6e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e6ec:	f8bd 3000 	ldrh.w	r3, [sp]
 800e6f0:	4581      	cmp	r9, r0
 800e6f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e6f6:	f84c 3b04 	str.w	r3, [ip], #4
 800e6fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e6fe:	d2db      	bcs.n	800e6b8 <quorem+0x44>
 800e700:	f855 300b 	ldr.w	r3, [r5, fp]
 800e704:	b92b      	cbnz	r3, 800e712 <quorem+0x9e>
 800e706:	9b01      	ldr	r3, [sp, #4]
 800e708:	3b04      	subs	r3, #4
 800e70a:	429d      	cmp	r5, r3
 800e70c:	461a      	mov	r2, r3
 800e70e:	d32e      	bcc.n	800e76e <quorem+0xfa>
 800e710:	613c      	str	r4, [r7, #16]
 800e712:	4638      	mov	r0, r7
 800e714:	f001 fc88 	bl	8010028 <__mcmp>
 800e718:	2800      	cmp	r0, #0
 800e71a:	db24      	blt.n	800e766 <quorem+0xf2>
 800e71c:	3601      	adds	r6, #1
 800e71e:	4628      	mov	r0, r5
 800e720:	f04f 0c00 	mov.w	ip, #0
 800e724:	f858 2b04 	ldr.w	r2, [r8], #4
 800e728:	f8d0 e000 	ldr.w	lr, [r0]
 800e72c:	b293      	uxth	r3, r2
 800e72e:	ebac 0303 	sub.w	r3, ip, r3
 800e732:	0c12      	lsrs	r2, r2, #16
 800e734:	fa13 f38e 	uxtah	r3, r3, lr
 800e738:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e73c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e740:	b29b      	uxth	r3, r3
 800e742:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e746:	45c1      	cmp	r9, r8
 800e748:	f840 3b04 	str.w	r3, [r0], #4
 800e74c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e750:	d2e8      	bcs.n	800e724 <quorem+0xb0>
 800e752:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e756:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e75a:	b922      	cbnz	r2, 800e766 <quorem+0xf2>
 800e75c:	3b04      	subs	r3, #4
 800e75e:	429d      	cmp	r5, r3
 800e760:	461a      	mov	r2, r3
 800e762:	d30a      	bcc.n	800e77a <quorem+0x106>
 800e764:	613c      	str	r4, [r7, #16]
 800e766:	4630      	mov	r0, r6
 800e768:	b003      	add	sp, #12
 800e76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e76e:	6812      	ldr	r2, [r2, #0]
 800e770:	3b04      	subs	r3, #4
 800e772:	2a00      	cmp	r2, #0
 800e774:	d1cc      	bne.n	800e710 <quorem+0x9c>
 800e776:	3c01      	subs	r4, #1
 800e778:	e7c7      	b.n	800e70a <quorem+0x96>
 800e77a:	6812      	ldr	r2, [r2, #0]
 800e77c:	3b04      	subs	r3, #4
 800e77e:	2a00      	cmp	r2, #0
 800e780:	d1f0      	bne.n	800e764 <quorem+0xf0>
 800e782:	3c01      	subs	r4, #1
 800e784:	e7eb      	b.n	800e75e <quorem+0xea>
 800e786:	2000      	movs	r0, #0
 800e788:	e7ee      	b.n	800e768 <quorem+0xf4>
 800e78a:	0000      	movs	r0, r0
 800e78c:	0000      	movs	r0, r0
	...

0800e790 <_dtoa_r>:
 800e790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e794:	ed2d 8b04 	vpush	{d8-d9}
 800e798:	ec57 6b10 	vmov	r6, r7, d0
 800e79c:	b093      	sub	sp, #76	; 0x4c
 800e79e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e7a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e7a4:	9106      	str	r1, [sp, #24]
 800e7a6:	ee10 aa10 	vmov	sl, s0
 800e7aa:	4604      	mov	r4, r0
 800e7ac:	9209      	str	r2, [sp, #36]	; 0x24
 800e7ae:	930c      	str	r3, [sp, #48]	; 0x30
 800e7b0:	46bb      	mov	fp, r7
 800e7b2:	b975      	cbnz	r5, 800e7d2 <_dtoa_r+0x42>
 800e7b4:	2010      	movs	r0, #16
 800e7b6:	f7fe fb7b 	bl	800ceb0 <malloc>
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	6260      	str	r0, [r4, #36]	; 0x24
 800e7be:	b920      	cbnz	r0, 800e7ca <_dtoa_r+0x3a>
 800e7c0:	4ba7      	ldr	r3, [pc, #668]	; (800ea60 <_dtoa_r+0x2d0>)
 800e7c2:	21ea      	movs	r1, #234	; 0xea
 800e7c4:	48a7      	ldr	r0, [pc, #668]	; (800ea64 <_dtoa_r+0x2d4>)
 800e7c6:	f001 ffad 	bl	8010724 <__assert_func>
 800e7ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e7ce:	6005      	str	r5, [r0, #0]
 800e7d0:	60c5      	str	r5, [r0, #12]
 800e7d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7d4:	6819      	ldr	r1, [r3, #0]
 800e7d6:	b151      	cbz	r1, 800e7ee <_dtoa_r+0x5e>
 800e7d8:	685a      	ldr	r2, [r3, #4]
 800e7da:	604a      	str	r2, [r1, #4]
 800e7dc:	2301      	movs	r3, #1
 800e7de:	4093      	lsls	r3, r2
 800e7e0:	608b      	str	r3, [r1, #8]
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	f001 f994 	bl	800fb10 <_Bfree>
 800e7e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	601a      	str	r2, [r3, #0]
 800e7ee:	1e3b      	subs	r3, r7, #0
 800e7f0:	bfaa      	itet	ge
 800e7f2:	2300      	movge	r3, #0
 800e7f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e7f8:	f8c8 3000 	strge.w	r3, [r8]
 800e7fc:	4b9a      	ldr	r3, [pc, #616]	; (800ea68 <_dtoa_r+0x2d8>)
 800e7fe:	bfbc      	itt	lt
 800e800:	2201      	movlt	r2, #1
 800e802:	f8c8 2000 	strlt.w	r2, [r8]
 800e806:	ea33 030b 	bics.w	r3, r3, fp
 800e80a:	d11b      	bne.n	800e844 <_dtoa_r+0xb4>
 800e80c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e80e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e812:	6013      	str	r3, [r2, #0]
 800e814:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e818:	4333      	orrs	r3, r6
 800e81a:	f000 8592 	beq.w	800f342 <_dtoa_r+0xbb2>
 800e81e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e820:	b963      	cbnz	r3, 800e83c <_dtoa_r+0xac>
 800e822:	4b92      	ldr	r3, [pc, #584]	; (800ea6c <_dtoa_r+0x2dc>)
 800e824:	e022      	b.n	800e86c <_dtoa_r+0xdc>
 800e826:	4b92      	ldr	r3, [pc, #584]	; (800ea70 <_dtoa_r+0x2e0>)
 800e828:	9301      	str	r3, [sp, #4]
 800e82a:	3308      	adds	r3, #8
 800e82c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e82e:	6013      	str	r3, [r2, #0]
 800e830:	9801      	ldr	r0, [sp, #4]
 800e832:	b013      	add	sp, #76	; 0x4c
 800e834:	ecbd 8b04 	vpop	{d8-d9}
 800e838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e83c:	4b8b      	ldr	r3, [pc, #556]	; (800ea6c <_dtoa_r+0x2dc>)
 800e83e:	9301      	str	r3, [sp, #4]
 800e840:	3303      	adds	r3, #3
 800e842:	e7f3      	b.n	800e82c <_dtoa_r+0x9c>
 800e844:	2200      	movs	r2, #0
 800e846:	2300      	movs	r3, #0
 800e848:	4650      	mov	r0, sl
 800e84a:	4659      	mov	r1, fp
 800e84c:	f7f2 f944 	bl	8000ad8 <__aeabi_dcmpeq>
 800e850:	ec4b ab19 	vmov	d9, sl, fp
 800e854:	4680      	mov	r8, r0
 800e856:	b158      	cbz	r0, 800e870 <_dtoa_r+0xe0>
 800e858:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e85a:	2301      	movs	r3, #1
 800e85c:	6013      	str	r3, [r2, #0]
 800e85e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e860:	2b00      	cmp	r3, #0
 800e862:	f000 856b 	beq.w	800f33c <_dtoa_r+0xbac>
 800e866:	4883      	ldr	r0, [pc, #524]	; (800ea74 <_dtoa_r+0x2e4>)
 800e868:	6018      	str	r0, [r3, #0]
 800e86a:	1e43      	subs	r3, r0, #1
 800e86c:	9301      	str	r3, [sp, #4]
 800e86e:	e7df      	b.n	800e830 <_dtoa_r+0xa0>
 800e870:	ec4b ab10 	vmov	d0, sl, fp
 800e874:	aa10      	add	r2, sp, #64	; 0x40
 800e876:	a911      	add	r1, sp, #68	; 0x44
 800e878:	4620      	mov	r0, r4
 800e87a:	f001 fcf7 	bl	801026c <__d2b>
 800e87e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e882:	ee08 0a10 	vmov	s16, r0
 800e886:	2d00      	cmp	r5, #0
 800e888:	f000 8084 	beq.w	800e994 <_dtoa_r+0x204>
 800e88c:	ee19 3a90 	vmov	r3, s19
 800e890:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e894:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e898:	4656      	mov	r6, sl
 800e89a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e89e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e8a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e8a6:	4b74      	ldr	r3, [pc, #464]	; (800ea78 <_dtoa_r+0x2e8>)
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	4630      	mov	r0, r6
 800e8ac:	4639      	mov	r1, r7
 800e8ae:	f7f1 fcf3 	bl	8000298 <__aeabi_dsub>
 800e8b2:	a365      	add	r3, pc, #404	; (adr r3, 800ea48 <_dtoa_r+0x2b8>)
 800e8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b8:	f7f1 fea6 	bl	8000608 <__aeabi_dmul>
 800e8bc:	a364      	add	r3, pc, #400	; (adr r3, 800ea50 <_dtoa_r+0x2c0>)
 800e8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c2:	f7f1 fceb 	bl	800029c <__adddf3>
 800e8c6:	4606      	mov	r6, r0
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	460f      	mov	r7, r1
 800e8cc:	f7f1 fe32 	bl	8000534 <__aeabi_i2d>
 800e8d0:	a361      	add	r3, pc, #388	; (adr r3, 800ea58 <_dtoa_r+0x2c8>)
 800e8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d6:	f7f1 fe97 	bl	8000608 <__aeabi_dmul>
 800e8da:	4602      	mov	r2, r0
 800e8dc:	460b      	mov	r3, r1
 800e8de:	4630      	mov	r0, r6
 800e8e0:	4639      	mov	r1, r7
 800e8e2:	f7f1 fcdb 	bl	800029c <__adddf3>
 800e8e6:	4606      	mov	r6, r0
 800e8e8:	460f      	mov	r7, r1
 800e8ea:	f7f2 f93d 	bl	8000b68 <__aeabi_d2iz>
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	9000      	str	r0, [sp, #0]
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	4630      	mov	r0, r6
 800e8f6:	4639      	mov	r1, r7
 800e8f8:	f7f2 f8f8 	bl	8000aec <__aeabi_dcmplt>
 800e8fc:	b150      	cbz	r0, 800e914 <_dtoa_r+0x184>
 800e8fe:	9800      	ldr	r0, [sp, #0]
 800e900:	f7f1 fe18 	bl	8000534 <__aeabi_i2d>
 800e904:	4632      	mov	r2, r6
 800e906:	463b      	mov	r3, r7
 800e908:	f7f2 f8e6 	bl	8000ad8 <__aeabi_dcmpeq>
 800e90c:	b910      	cbnz	r0, 800e914 <_dtoa_r+0x184>
 800e90e:	9b00      	ldr	r3, [sp, #0]
 800e910:	3b01      	subs	r3, #1
 800e912:	9300      	str	r3, [sp, #0]
 800e914:	9b00      	ldr	r3, [sp, #0]
 800e916:	2b16      	cmp	r3, #22
 800e918:	d85a      	bhi.n	800e9d0 <_dtoa_r+0x240>
 800e91a:	9a00      	ldr	r2, [sp, #0]
 800e91c:	4b57      	ldr	r3, [pc, #348]	; (800ea7c <_dtoa_r+0x2ec>)
 800e91e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e926:	ec51 0b19 	vmov	r0, r1, d9
 800e92a:	f7f2 f8df 	bl	8000aec <__aeabi_dcmplt>
 800e92e:	2800      	cmp	r0, #0
 800e930:	d050      	beq.n	800e9d4 <_dtoa_r+0x244>
 800e932:	9b00      	ldr	r3, [sp, #0]
 800e934:	3b01      	subs	r3, #1
 800e936:	9300      	str	r3, [sp, #0]
 800e938:	2300      	movs	r3, #0
 800e93a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e93c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e93e:	1b5d      	subs	r5, r3, r5
 800e940:	1e6b      	subs	r3, r5, #1
 800e942:	9305      	str	r3, [sp, #20]
 800e944:	bf45      	ittet	mi
 800e946:	f1c5 0301 	rsbmi	r3, r5, #1
 800e94a:	9304      	strmi	r3, [sp, #16]
 800e94c:	2300      	movpl	r3, #0
 800e94e:	2300      	movmi	r3, #0
 800e950:	bf4c      	ite	mi
 800e952:	9305      	strmi	r3, [sp, #20]
 800e954:	9304      	strpl	r3, [sp, #16]
 800e956:	9b00      	ldr	r3, [sp, #0]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	db3d      	blt.n	800e9d8 <_dtoa_r+0x248>
 800e95c:	9b05      	ldr	r3, [sp, #20]
 800e95e:	9a00      	ldr	r2, [sp, #0]
 800e960:	920a      	str	r2, [sp, #40]	; 0x28
 800e962:	4413      	add	r3, r2
 800e964:	9305      	str	r3, [sp, #20]
 800e966:	2300      	movs	r3, #0
 800e968:	9307      	str	r3, [sp, #28]
 800e96a:	9b06      	ldr	r3, [sp, #24]
 800e96c:	2b09      	cmp	r3, #9
 800e96e:	f200 8089 	bhi.w	800ea84 <_dtoa_r+0x2f4>
 800e972:	2b05      	cmp	r3, #5
 800e974:	bfc4      	itt	gt
 800e976:	3b04      	subgt	r3, #4
 800e978:	9306      	strgt	r3, [sp, #24]
 800e97a:	9b06      	ldr	r3, [sp, #24]
 800e97c:	f1a3 0302 	sub.w	r3, r3, #2
 800e980:	bfcc      	ite	gt
 800e982:	2500      	movgt	r5, #0
 800e984:	2501      	movle	r5, #1
 800e986:	2b03      	cmp	r3, #3
 800e988:	f200 8087 	bhi.w	800ea9a <_dtoa_r+0x30a>
 800e98c:	e8df f003 	tbb	[pc, r3]
 800e990:	59383a2d 	.word	0x59383a2d
 800e994:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e998:	441d      	add	r5, r3
 800e99a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e99e:	2b20      	cmp	r3, #32
 800e9a0:	bfc1      	itttt	gt
 800e9a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e9a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e9aa:	fa0b f303 	lslgt.w	r3, fp, r3
 800e9ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e9b2:	bfda      	itte	le
 800e9b4:	f1c3 0320 	rsble	r3, r3, #32
 800e9b8:	fa06 f003 	lslle.w	r0, r6, r3
 800e9bc:	4318      	orrgt	r0, r3
 800e9be:	f7f1 fda9 	bl	8000514 <__aeabi_ui2d>
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	4606      	mov	r6, r0
 800e9c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e9ca:	3d01      	subs	r5, #1
 800e9cc:	930e      	str	r3, [sp, #56]	; 0x38
 800e9ce:	e76a      	b.n	800e8a6 <_dtoa_r+0x116>
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	e7b2      	b.n	800e93a <_dtoa_r+0x1aa>
 800e9d4:	900b      	str	r0, [sp, #44]	; 0x2c
 800e9d6:	e7b1      	b.n	800e93c <_dtoa_r+0x1ac>
 800e9d8:	9b04      	ldr	r3, [sp, #16]
 800e9da:	9a00      	ldr	r2, [sp, #0]
 800e9dc:	1a9b      	subs	r3, r3, r2
 800e9de:	9304      	str	r3, [sp, #16]
 800e9e0:	4253      	negs	r3, r2
 800e9e2:	9307      	str	r3, [sp, #28]
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	930a      	str	r3, [sp, #40]	; 0x28
 800e9e8:	e7bf      	b.n	800e96a <_dtoa_r+0x1da>
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	9308      	str	r3, [sp, #32]
 800e9ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	dc55      	bgt.n	800eaa0 <_dtoa_r+0x310>
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	9209      	str	r2, [sp, #36]	; 0x24
 800e9fe:	e00c      	b.n	800ea1a <_dtoa_r+0x28a>
 800ea00:	2301      	movs	r3, #1
 800ea02:	e7f3      	b.n	800e9ec <_dtoa_r+0x25c>
 800ea04:	2300      	movs	r3, #0
 800ea06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea08:	9308      	str	r3, [sp, #32]
 800ea0a:	9b00      	ldr	r3, [sp, #0]
 800ea0c:	4413      	add	r3, r2
 800ea0e:	9302      	str	r3, [sp, #8]
 800ea10:	3301      	adds	r3, #1
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	9303      	str	r3, [sp, #12]
 800ea16:	bfb8      	it	lt
 800ea18:	2301      	movlt	r3, #1
 800ea1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	6042      	str	r2, [r0, #4]
 800ea20:	2204      	movs	r2, #4
 800ea22:	f102 0614 	add.w	r6, r2, #20
 800ea26:	429e      	cmp	r6, r3
 800ea28:	6841      	ldr	r1, [r0, #4]
 800ea2a:	d93d      	bls.n	800eaa8 <_dtoa_r+0x318>
 800ea2c:	4620      	mov	r0, r4
 800ea2e:	f001 f82f 	bl	800fa90 <_Balloc>
 800ea32:	9001      	str	r0, [sp, #4]
 800ea34:	2800      	cmp	r0, #0
 800ea36:	d13b      	bne.n	800eab0 <_dtoa_r+0x320>
 800ea38:	4b11      	ldr	r3, [pc, #68]	; (800ea80 <_dtoa_r+0x2f0>)
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ea40:	e6c0      	b.n	800e7c4 <_dtoa_r+0x34>
 800ea42:	2301      	movs	r3, #1
 800ea44:	e7df      	b.n	800ea06 <_dtoa_r+0x276>
 800ea46:	bf00      	nop
 800ea48:	636f4361 	.word	0x636f4361
 800ea4c:	3fd287a7 	.word	0x3fd287a7
 800ea50:	8b60c8b3 	.word	0x8b60c8b3
 800ea54:	3fc68a28 	.word	0x3fc68a28
 800ea58:	509f79fb 	.word	0x509f79fb
 800ea5c:	3fd34413 	.word	0x3fd34413
 800ea60:	08011885 	.word	0x08011885
 800ea64:	0801189c 	.word	0x0801189c
 800ea68:	7ff00000 	.word	0x7ff00000
 800ea6c:	08011881 	.word	0x08011881
 800ea70:	08011878 	.word	0x08011878
 800ea74:	08011801 	.word	0x08011801
 800ea78:	3ff80000 	.word	0x3ff80000
 800ea7c:	08011a08 	.word	0x08011a08
 800ea80:	080118f7 	.word	0x080118f7
 800ea84:	2501      	movs	r5, #1
 800ea86:	2300      	movs	r3, #0
 800ea88:	9306      	str	r3, [sp, #24]
 800ea8a:	9508      	str	r5, [sp, #32]
 800ea8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea90:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ea94:	2200      	movs	r2, #0
 800ea96:	2312      	movs	r3, #18
 800ea98:	e7b0      	b.n	800e9fc <_dtoa_r+0x26c>
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	9308      	str	r3, [sp, #32]
 800ea9e:	e7f5      	b.n	800ea8c <_dtoa_r+0x2fc>
 800eaa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaa2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eaa6:	e7b8      	b.n	800ea1a <_dtoa_r+0x28a>
 800eaa8:	3101      	adds	r1, #1
 800eaaa:	6041      	str	r1, [r0, #4]
 800eaac:	0052      	lsls	r2, r2, #1
 800eaae:	e7b8      	b.n	800ea22 <_dtoa_r+0x292>
 800eab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eab2:	9a01      	ldr	r2, [sp, #4]
 800eab4:	601a      	str	r2, [r3, #0]
 800eab6:	9b03      	ldr	r3, [sp, #12]
 800eab8:	2b0e      	cmp	r3, #14
 800eaba:	f200 809d 	bhi.w	800ebf8 <_dtoa_r+0x468>
 800eabe:	2d00      	cmp	r5, #0
 800eac0:	f000 809a 	beq.w	800ebf8 <_dtoa_r+0x468>
 800eac4:	9b00      	ldr	r3, [sp, #0]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	dd32      	ble.n	800eb30 <_dtoa_r+0x3a0>
 800eaca:	4ab7      	ldr	r2, [pc, #732]	; (800eda8 <_dtoa_r+0x618>)
 800eacc:	f003 030f 	and.w	r3, r3, #15
 800ead0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ead4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ead8:	9b00      	ldr	r3, [sp, #0]
 800eada:	05d8      	lsls	r0, r3, #23
 800eadc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800eae0:	d516      	bpl.n	800eb10 <_dtoa_r+0x380>
 800eae2:	4bb2      	ldr	r3, [pc, #712]	; (800edac <_dtoa_r+0x61c>)
 800eae4:	ec51 0b19 	vmov	r0, r1, d9
 800eae8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eaec:	f7f1 feb6 	bl	800085c <__aeabi_ddiv>
 800eaf0:	f007 070f 	and.w	r7, r7, #15
 800eaf4:	4682      	mov	sl, r0
 800eaf6:	468b      	mov	fp, r1
 800eaf8:	2503      	movs	r5, #3
 800eafa:	4eac      	ldr	r6, [pc, #688]	; (800edac <_dtoa_r+0x61c>)
 800eafc:	b957      	cbnz	r7, 800eb14 <_dtoa_r+0x384>
 800eafe:	4642      	mov	r2, r8
 800eb00:	464b      	mov	r3, r9
 800eb02:	4650      	mov	r0, sl
 800eb04:	4659      	mov	r1, fp
 800eb06:	f7f1 fea9 	bl	800085c <__aeabi_ddiv>
 800eb0a:	4682      	mov	sl, r0
 800eb0c:	468b      	mov	fp, r1
 800eb0e:	e028      	b.n	800eb62 <_dtoa_r+0x3d2>
 800eb10:	2502      	movs	r5, #2
 800eb12:	e7f2      	b.n	800eafa <_dtoa_r+0x36a>
 800eb14:	07f9      	lsls	r1, r7, #31
 800eb16:	d508      	bpl.n	800eb2a <_dtoa_r+0x39a>
 800eb18:	4640      	mov	r0, r8
 800eb1a:	4649      	mov	r1, r9
 800eb1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eb20:	f7f1 fd72 	bl	8000608 <__aeabi_dmul>
 800eb24:	3501      	adds	r5, #1
 800eb26:	4680      	mov	r8, r0
 800eb28:	4689      	mov	r9, r1
 800eb2a:	107f      	asrs	r7, r7, #1
 800eb2c:	3608      	adds	r6, #8
 800eb2e:	e7e5      	b.n	800eafc <_dtoa_r+0x36c>
 800eb30:	f000 809b 	beq.w	800ec6a <_dtoa_r+0x4da>
 800eb34:	9b00      	ldr	r3, [sp, #0]
 800eb36:	4f9d      	ldr	r7, [pc, #628]	; (800edac <_dtoa_r+0x61c>)
 800eb38:	425e      	negs	r6, r3
 800eb3a:	4b9b      	ldr	r3, [pc, #620]	; (800eda8 <_dtoa_r+0x618>)
 800eb3c:	f006 020f 	and.w	r2, r6, #15
 800eb40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb48:	ec51 0b19 	vmov	r0, r1, d9
 800eb4c:	f7f1 fd5c 	bl	8000608 <__aeabi_dmul>
 800eb50:	1136      	asrs	r6, r6, #4
 800eb52:	4682      	mov	sl, r0
 800eb54:	468b      	mov	fp, r1
 800eb56:	2300      	movs	r3, #0
 800eb58:	2502      	movs	r5, #2
 800eb5a:	2e00      	cmp	r6, #0
 800eb5c:	d17a      	bne.n	800ec54 <_dtoa_r+0x4c4>
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d1d3      	bne.n	800eb0a <_dtoa_r+0x37a>
 800eb62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	f000 8082 	beq.w	800ec6e <_dtoa_r+0x4de>
 800eb6a:	4b91      	ldr	r3, [pc, #580]	; (800edb0 <_dtoa_r+0x620>)
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	4650      	mov	r0, sl
 800eb70:	4659      	mov	r1, fp
 800eb72:	f7f1 ffbb 	bl	8000aec <__aeabi_dcmplt>
 800eb76:	2800      	cmp	r0, #0
 800eb78:	d079      	beq.n	800ec6e <_dtoa_r+0x4de>
 800eb7a:	9b03      	ldr	r3, [sp, #12]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d076      	beq.n	800ec6e <_dtoa_r+0x4de>
 800eb80:	9b02      	ldr	r3, [sp, #8]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	dd36      	ble.n	800ebf4 <_dtoa_r+0x464>
 800eb86:	9b00      	ldr	r3, [sp, #0]
 800eb88:	4650      	mov	r0, sl
 800eb8a:	4659      	mov	r1, fp
 800eb8c:	1e5f      	subs	r7, r3, #1
 800eb8e:	2200      	movs	r2, #0
 800eb90:	4b88      	ldr	r3, [pc, #544]	; (800edb4 <_dtoa_r+0x624>)
 800eb92:	f7f1 fd39 	bl	8000608 <__aeabi_dmul>
 800eb96:	9e02      	ldr	r6, [sp, #8]
 800eb98:	4682      	mov	sl, r0
 800eb9a:	468b      	mov	fp, r1
 800eb9c:	3501      	adds	r5, #1
 800eb9e:	4628      	mov	r0, r5
 800eba0:	f7f1 fcc8 	bl	8000534 <__aeabi_i2d>
 800eba4:	4652      	mov	r2, sl
 800eba6:	465b      	mov	r3, fp
 800eba8:	f7f1 fd2e 	bl	8000608 <__aeabi_dmul>
 800ebac:	4b82      	ldr	r3, [pc, #520]	; (800edb8 <_dtoa_r+0x628>)
 800ebae:	2200      	movs	r2, #0
 800ebb0:	f7f1 fb74 	bl	800029c <__adddf3>
 800ebb4:	46d0      	mov	r8, sl
 800ebb6:	46d9      	mov	r9, fp
 800ebb8:	4682      	mov	sl, r0
 800ebba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ebbe:	2e00      	cmp	r6, #0
 800ebc0:	d158      	bne.n	800ec74 <_dtoa_r+0x4e4>
 800ebc2:	4b7e      	ldr	r3, [pc, #504]	; (800edbc <_dtoa_r+0x62c>)
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	4640      	mov	r0, r8
 800ebc8:	4649      	mov	r1, r9
 800ebca:	f7f1 fb65 	bl	8000298 <__aeabi_dsub>
 800ebce:	4652      	mov	r2, sl
 800ebd0:	465b      	mov	r3, fp
 800ebd2:	4680      	mov	r8, r0
 800ebd4:	4689      	mov	r9, r1
 800ebd6:	f7f1 ffa7 	bl	8000b28 <__aeabi_dcmpgt>
 800ebda:	2800      	cmp	r0, #0
 800ebdc:	f040 8295 	bne.w	800f10a <_dtoa_r+0x97a>
 800ebe0:	4652      	mov	r2, sl
 800ebe2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ebe6:	4640      	mov	r0, r8
 800ebe8:	4649      	mov	r1, r9
 800ebea:	f7f1 ff7f 	bl	8000aec <__aeabi_dcmplt>
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	f040 8289 	bne.w	800f106 <_dtoa_r+0x976>
 800ebf4:	ec5b ab19 	vmov	sl, fp, d9
 800ebf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	f2c0 8148 	blt.w	800ee90 <_dtoa_r+0x700>
 800ec00:	9a00      	ldr	r2, [sp, #0]
 800ec02:	2a0e      	cmp	r2, #14
 800ec04:	f300 8144 	bgt.w	800ee90 <_dtoa_r+0x700>
 800ec08:	4b67      	ldr	r3, [pc, #412]	; (800eda8 <_dtoa_r+0x618>)
 800ec0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ec12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	f280 80d5 	bge.w	800edc4 <_dtoa_r+0x634>
 800ec1a:	9b03      	ldr	r3, [sp, #12]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	f300 80d1 	bgt.w	800edc4 <_dtoa_r+0x634>
 800ec22:	f040 826f 	bne.w	800f104 <_dtoa_r+0x974>
 800ec26:	4b65      	ldr	r3, [pc, #404]	; (800edbc <_dtoa_r+0x62c>)
 800ec28:	2200      	movs	r2, #0
 800ec2a:	4640      	mov	r0, r8
 800ec2c:	4649      	mov	r1, r9
 800ec2e:	f7f1 fceb 	bl	8000608 <__aeabi_dmul>
 800ec32:	4652      	mov	r2, sl
 800ec34:	465b      	mov	r3, fp
 800ec36:	f7f1 ff6d 	bl	8000b14 <__aeabi_dcmpge>
 800ec3a:	9e03      	ldr	r6, [sp, #12]
 800ec3c:	4637      	mov	r7, r6
 800ec3e:	2800      	cmp	r0, #0
 800ec40:	f040 8245 	bne.w	800f0ce <_dtoa_r+0x93e>
 800ec44:	9d01      	ldr	r5, [sp, #4]
 800ec46:	2331      	movs	r3, #49	; 0x31
 800ec48:	f805 3b01 	strb.w	r3, [r5], #1
 800ec4c:	9b00      	ldr	r3, [sp, #0]
 800ec4e:	3301      	adds	r3, #1
 800ec50:	9300      	str	r3, [sp, #0]
 800ec52:	e240      	b.n	800f0d6 <_dtoa_r+0x946>
 800ec54:	07f2      	lsls	r2, r6, #31
 800ec56:	d505      	bpl.n	800ec64 <_dtoa_r+0x4d4>
 800ec58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec5c:	f7f1 fcd4 	bl	8000608 <__aeabi_dmul>
 800ec60:	3501      	adds	r5, #1
 800ec62:	2301      	movs	r3, #1
 800ec64:	1076      	asrs	r6, r6, #1
 800ec66:	3708      	adds	r7, #8
 800ec68:	e777      	b.n	800eb5a <_dtoa_r+0x3ca>
 800ec6a:	2502      	movs	r5, #2
 800ec6c:	e779      	b.n	800eb62 <_dtoa_r+0x3d2>
 800ec6e:	9f00      	ldr	r7, [sp, #0]
 800ec70:	9e03      	ldr	r6, [sp, #12]
 800ec72:	e794      	b.n	800eb9e <_dtoa_r+0x40e>
 800ec74:	9901      	ldr	r1, [sp, #4]
 800ec76:	4b4c      	ldr	r3, [pc, #304]	; (800eda8 <_dtoa_r+0x618>)
 800ec78:	4431      	add	r1, r6
 800ec7a:	910d      	str	r1, [sp, #52]	; 0x34
 800ec7c:	9908      	ldr	r1, [sp, #32]
 800ec7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ec82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ec86:	2900      	cmp	r1, #0
 800ec88:	d043      	beq.n	800ed12 <_dtoa_r+0x582>
 800ec8a:	494d      	ldr	r1, [pc, #308]	; (800edc0 <_dtoa_r+0x630>)
 800ec8c:	2000      	movs	r0, #0
 800ec8e:	f7f1 fde5 	bl	800085c <__aeabi_ddiv>
 800ec92:	4652      	mov	r2, sl
 800ec94:	465b      	mov	r3, fp
 800ec96:	f7f1 faff 	bl	8000298 <__aeabi_dsub>
 800ec9a:	9d01      	ldr	r5, [sp, #4]
 800ec9c:	4682      	mov	sl, r0
 800ec9e:	468b      	mov	fp, r1
 800eca0:	4649      	mov	r1, r9
 800eca2:	4640      	mov	r0, r8
 800eca4:	f7f1 ff60 	bl	8000b68 <__aeabi_d2iz>
 800eca8:	4606      	mov	r6, r0
 800ecaa:	f7f1 fc43 	bl	8000534 <__aeabi_i2d>
 800ecae:	4602      	mov	r2, r0
 800ecb0:	460b      	mov	r3, r1
 800ecb2:	4640      	mov	r0, r8
 800ecb4:	4649      	mov	r1, r9
 800ecb6:	f7f1 faef 	bl	8000298 <__aeabi_dsub>
 800ecba:	3630      	adds	r6, #48	; 0x30
 800ecbc:	f805 6b01 	strb.w	r6, [r5], #1
 800ecc0:	4652      	mov	r2, sl
 800ecc2:	465b      	mov	r3, fp
 800ecc4:	4680      	mov	r8, r0
 800ecc6:	4689      	mov	r9, r1
 800ecc8:	f7f1 ff10 	bl	8000aec <__aeabi_dcmplt>
 800eccc:	2800      	cmp	r0, #0
 800ecce:	d163      	bne.n	800ed98 <_dtoa_r+0x608>
 800ecd0:	4642      	mov	r2, r8
 800ecd2:	464b      	mov	r3, r9
 800ecd4:	4936      	ldr	r1, [pc, #216]	; (800edb0 <_dtoa_r+0x620>)
 800ecd6:	2000      	movs	r0, #0
 800ecd8:	f7f1 fade 	bl	8000298 <__aeabi_dsub>
 800ecdc:	4652      	mov	r2, sl
 800ecde:	465b      	mov	r3, fp
 800ece0:	f7f1 ff04 	bl	8000aec <__aeabi_dcmplt>
 800ece4:	2800      	cmp	r0, #0
 800ece6:	f040 80b5 	bne.w	800ee54 <_dtoa_r+0x6c4>
 800ecea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ecec:	429d      	cmp	r5, r3
 800ecee:	d081      	beq.n	800ebf4 <_dtoa_r+0x464>
 800ecf0:	4b30      	ldr	r3, [pc, #192]	; (800edb4 <_dtoa_r+0x624>)
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	4650      	mov	r0, sl
 800ecf6:	4659      	mov	r1, fp
 800ecf8:	f7f1 fc86 	bl	8000608 <__aeabi_dmul>
 800ecfc:	4b2d      	ldr	r3, [pc, #180]	; (800edb4 <_dtoa_r+0x624>)
 800ecfe:	4682      	mov	sl, r0
 800ed00:	468b      	mov	fp, r1
 800ed02:	4640      	mov	r0, r8
 800ed04:	4649      	mov	r1, r9
 800ed06:	2200      	movs	r2, #0
 800ed08:	f7f1 fc7e 	bl	8000608 <__aeabi_dmul>
 800ed0c:	4680      	mov	r8, r0
 800ed0e:	4689      	mov	r9, r1
 800ed10:	e7c6      	b.n	800eca0 <_dtoa_r+0x510>
 800ed12:	4650      	mov	r0, sl
 800ed14:	4659      	mov	r1, fp
 800ed16:	f7f1 fc77 	bl	8000608 <__aeabi_dmul>
 800ed1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed1c:	9d01      	ldr	r5, [sp, #4]
 800ed1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed20:	4682      	mov	sl, r0
 800ed22:	468b      	mov	fp, r1
 800ed24:	4649      	mov	r1, r9
 800ed26:	4640      	mov	r0, r8
 800ed28:	f7f1 ff1e 	bl	8000b68 <__aeabi_d2iz>
 800ed2c:	4606      	mov	r6, r0
 800ed2e:	f7f1 fc01 	bl	8000534 <__aeabi_i2d>
 800ed32:	3630      	adds	r6, #48	; 0x30
 800ed34:	4602      	mov	r2, r0
 800ed36:	460b      	mov	r3, r1
 800ed38:	4640      	mov	r0, r8
 800ed3a:	4649      	mov	r1, r9
 800ed3c:	f7f1 faac 	bl	8000298 <__aeabi_dsub>
 800ed40:	f805 6b01 	strb.w	r6, [r5], #1
 800ed44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed46:	429d      	cmp	r5, r3
 800ed48:	4680      	mov	r8, r0
 800ed4a:	4689      	mov	r9, r1
 800ed4c:	f04f 0200 	mov.w	r2, #0
 800ed50:	d124      	bne.n	800ed9c <_dtoa_r+0x60c>
 800ed52:	4b1b      	ldr	r3, [pc, #108]	; (800edc0 <_dtoa_r+0x630>)
 800ed54:	4650      	mov	r0, sl
 800ed56:	4659      	mov	r1, fp
 800ed58:	f7f1 faa0 	bl	800029c <__adddf3>
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	460b      	mov	r3, r1
 800ed60:	4640      	mov	r0, r8
 800ed62:	4649      	mov	r1, r9
 800ed64:	f7f1 fee0 	bl	8000b28 <__aeabi_dcmpgt>
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	d173      	bne.n	800ee54 <_dtoa_r+0x6c4>
 800ed6c:	4652      	mov	r2, sl
 800ed6e:	465b      	mov	r3, fp
 800ed70:	4913      	ldr	r1, [pc, #76]	; (800edc0 <_dtoa_r+0x630>)
 800ed72:	2000      	movs	r0, #0
 800ed74:	f7f1 fa90 	bl	8000298 <__aeabi_dsub>
 800ed78:	4602      	mov	r2, r0
 800ed7a:	460b      	mov	r3, r1
 800ed7c:	4640      	mov	r0, r8
 800ed7e:	4649      	mov	r1, r9
 800ed80:	f7f1 feb4 	bl	8000aec <__aeabi_dcmplt>
 800ed84:	2800      	cmp	r0, #0
 800ed86:	f43f af35 	beq.w	800ebf4 <_dtoa_r+0x464>
 800ed8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ed8c:	1e6b      	subs	r3, r5, #1
 800ed8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ed94:	2b30      	cmp	r3, #48	; 0x30
 800ed96:	d0f8      	beq.n	800ed8a <_dtoa_r+0x5fa>
 800ed98:	9700      	str	r7, [sp, #0]
 800ed9a:	e049      	b.n	800ee30 <_dtoa_r+0x6a0>
 800ed9c:	4b05      	ldr	r3, [pc, #20]	; (800edb4 <_dtoa_r+0x624>)
 800ed9e:	f7f1 fc33 	bl	8000608 <__aeabi_dmul>
 800eda2:	4680      	mov	r8, r0
 800eda4:	4689      	mov	r9, r1
 800eda6:	e7bd      	b.n	800ed24 <_dtoa_r+0x594>
 800eda8:	08011a08 	.word	0x08011a08
 800edac:	080119e0 	.word	0x080119e0
 800edb0:	3ff00000 	.word	0x3ff00000
 800edb4:	40240000 	.word	0x40240000
 800edb8:	401c0000 	.word	0x401c0000
 800edbc:	40140000 	.word	0x40140000
 800edc0:	3fe00000 	.word	0x3fe00000
 800edc4:	9d01      	ldr	r5, [sp, #4]
 800edc6:	4656      	mov	r6, sl
 800edc8:	465f      	mov	r7, fp
 800edca:	4642      	mov	r2, r8
 800edcc:	464b      	mov	r3, r9
 800edce:	4630      	mov	r0, r6
 800edd0:	4639      	mov	r1, r7
 800edd2:	f7f1 fd43 	bl	800085c <__aeabi_ddiv>
 800edd6:	f7f1 fec7 	bl	8000b68 <__aeabi_d2iz>
 800edda:	4682      	mov	sl, r0
 800eddc:	f7f1 fbaa 	bl	8000534 <__aeabi_i2d>
 800ede0:	4642      	mov	r2, r8
 800ede2:	464b      	mov	r3, r9
 800ede4:	f7f1 fc10 	bl	8000608 <__aeabi_dmul>
 800ede8:	4602      	mov	r2, r0
 800edea:	460b      	mov	r3, r1
 800edec:	4630      	mov	r0, r6
 800edee:	4639      	mov	r1, r7
 800edf0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800edf4:	f7f1 fa50 	bl	8000298 <__aeabi_dsub>
 800edf8:	f805 6b01 	strb.w	r6, [r5], #1
 800edfc:	9e01      	ldr	r6, [sp, #4]
 800edfe:	9f03      	ldr	r7, [sp, #12]
 800ee00:	1bae      	subs	r6, r5, r6
 800ee02:	42b7      	cmp	r7, r6
 800ee04:	4602      	mov	r2, r0
 800ee06:	460b      	mov	r3, r1
 800ee08:	d135      	bne.n	800ee76 <_dtoa_r+0x6e6>
 800ee0a:	f7f1 fa47 	bl	800029c <__adddf3>
 800ee0e:	4642      	mov	r2, r8
 800ee10:	464b      	mov	r3, r9
 800ee12:	4606      	mov	r6, r0
 800ee14:	460f      	mov	r7, r1
 800ee16:	f7f1 fe87 	bl	8000b28 <__aeabi_dcmpgt>
 800ee1a:	b9d0      	cbnz	r0, 800ee52 <_dtoa_r+0x6c2>
 800ee1c:	4642      	mov	r2, r8
 800ee1e:	464b      	mov	r3, r9
 800ee20:	4630      	mov	r0, r6
 800ee22:	4639      	mov	r1, r7
 800ee24:	f7f1 fe58 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee28:	b110      	cbz	r0, 800ee30 <_dtoa_r+0x6a0>
 800ee2a:	f01a 0f01 	tst.w	sl, #1
 800ee2e:	d110      	bne.n	800ee52 <_dtoa_r+0x6c2>
 800ee30:	4620      	mov	r0, r4
 800ee32:	ee18 1a10 	vmov	r1, s16
 800ee36:	f000 fe6b 	bl	800fb10 <_Bfree>
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	9800      	ldr	r0, [sp, #0]
 800ee3e:	702b      	strb	r3, [r5, #0]
 800ee40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee42:	3001      	adds	r0, #1
 800ee44:	6018      	str	r0, [r3, #0]
 800ee46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	f43f acf1 	beq.w	800e830 <_dtoa_r+0xa0>
 800ee4e:	601d      	str	r5, [r3, #0]
 800ee50:	e4ee      	b.n	800e830 <_dtoa_r+0xa0>
 800ee52:	9f00      	ldr	r7, [sp, #0]
 800ee54:	462b      	mov	r3, r5
 800ee56:	461d      	mov	r5, r3
 800ee58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee5c:	2a39      	cmp	r2, #57	; 0x39
 800ee5e:	d106      	bne.n	800ee6e <_dtoa_r+0x6de>
 800ee60:	9a01      	ldr	r2, [sp, #4]
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d1f7      	bne.n	800ee56 <_dtoa_r+0x6c6>
 800ee66:	9901      	ldr	r1, [sp, #4]
 800ee68:	2230      	movs	r2, #48	; 0x30
 800ee6a:	3701      	adds	r7, #1
 800ee6c:	700a      	strb	r2, [r1, #0]
 800ee6e:	781a      	ldrb	r2, [r3, #0]
 800ee70:	3201      	adds	r2, #1
 800ee72:	701a      	strb	r2, [r3, #0]
 800ee74:	e790      	b.n	800ed98 <_dtoa_r+0x608>
 800ee76:	4ba6      	ldr	r3, [pc, #664]	; (800f110 <_dtoa_r+0x980>)
 800ee78:	2200      	movs	r2, #0
 800ee7a:	f7f1 fbc5 	bl	8000608 <__aeabi_dmul>
 800ee7e:	2200      	movs	r2, #0
 800ee80:	2300      	movs	r3, #0
 800ee82:	4606      	mov	r6, r0
 800ee84:	460f      	mov	r7, r1
 800ee86:	f7f1 fe27 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee8a:	2800      	cmp	r0, #0
 800ee8c:	d09d      	beq.n	800edca <_dtoa_r+0x63a>
 800ee8e:	e7cf      	b.n	800ee30 <_dtoa_r+0x6a0>
 800ee90:	9a08      	ldr	r2, [sp, #32]
 800ee92:	2a00      	cmp	r2, #0
 800ee94:	f000 80d7 	beq.w	800f046 <_dtoa_r+0x8b6>
 800ee98:	9a06      	ldr	r2, [sp, #24]
 800ee9a:	2a01      	cmp	r2, #1
 800ee9c:	f300 80ba 	bgt.w	800f014 <_dtoa_r+0x884>
 800eea0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eea2:	2a00      	cmp	r2, #0
 800eea4:	f000 80b2 	beq.w	800f00c <_dtoa_r+0x87c>
 800eea8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800eeac:	9e07      	ldr	r6, [sp, #28]
 800eeae:	9d04      	ldr	r5, [sp, #16]
 800eeb0:	9a04      	ldr	r2, [sp, #16]
 800eeb2:	441a      	add	r2, r3
 800eeb4:	9204      	str	r2, [sp, #16]
 800eeb6:	9a05      	ldr	r2, [sp, #20]
 800eeb8:	2101      	movs	r1, #1
 800eeba:	441a      	add	r2, r3
 800eebc:	4620      	mov	r0, r4
 800eebe:	9205      	str	r2, [sp, #20]
 800eec0:	f000 ff28 	bl	800fd14 <__i2b>
 800eec4:	4607      	mov	r7, r0
 800eec6:	2d00      	cmp	r5, #0
 800eec8:	dd0c      	ble.n	800eee4 <_dtoa_r+0x754>
 800eeca:	9b05      	ldr	r3, [sp, #20]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	dd09      	ble.n	800eee4 <_dtoa_r+0x754>
 800eed0:	42ab      	cmp	r3, r5
 800eed2:	9a04      	ldr	r2, [sp, #16]
 800eed4:	bfa8      	it	ge
 800eed6:	462b      	movge	r3, r5
 800eed8:	1ad2      	subs	r2, r2, r3
 800eeda:	9204      	str	r2, [sp, #16]
 800eedc:	9a05      	ldr	r2, [sp, #20]
 800eede:	1aed      	subs	r5, r5, r3
 800eee0:	1ad3      	subs	r3, r2, r3
 800eee2:	9305      	str	r3, [sp, #20]
 800eee4:	9b07      	ldr	r3, [sp, #28]
 800eee6:	b31b      	cbz	r3, 800ef30 <_dtoa_r+0x7a0>
 800eee8:	9b08      	ldr	r3, [sp, #32]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	f000 80af 	beq.w	800f04e <_dtoa_r+0x8be>
 800eef0:	2e00      	cmp	r6, #0
 800eef2:	dd13      	ble.n	800ef1c <_dtoa_r+0x78c>
 800eef4:	4639      	mov	r1, r7
 800eef6:	4632      	mov	r2, r6
 800eef8:	4620      	mov	r0, r4
 800eefa:	f000 ffcb 	bl	800fe94 <__pow5mult>
 800eefe:	ee18 2a10 	vmov	r2, s16
 800ef02:	4601      	mov	r1, r0
 800ef04:	4607      	mov	r7, r0
 800ef06:	4620      	mov	r0, r4
 800ef08:	f000 ff1a 	bl	800fd40 <__multiply>
 800ef0c:	ee18 1a10 	vmov	r1, s16
 800ef10:	4680      	mov	r8, r0
 800ef12:	4620      	mov	r0, r4
 800ef14:	f000 fdfc 	bl	800fb10 <_Bfree>
 800ef18:	ee08 8a10 	vmov	s16, r8
 800ef1c:	9b07      	ldr	r3, [sp, #28]
 800ef1e:	1b9a      	subs	r2, r3, r6
 800ef20:	d006      	beq.n	800ef30 <_dtoa_r+0x7a0>
 800ef22:	ee18 1a10 	vmov	r1, s16
 800ef26:	4620      	mov	r0, r4
 800ef28:	f000 ffb4 	bl	800fe94 <__pow5mult>
 800ef2c:	ee08 0a10 	vmov	s16, r0
 800ef30:	2101      	movs	r1, #1
 800ef32:	4620      	mov	r0, r4
 800ef34:	f000 feee 	bl	800fd14 <__i2b>
 800ef38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	4606      	mov	r6, r0
 800ef3e:	f340 8088 	ble.w	800f052 <_dtoa_r+0x8c2>
 800ef42:	461a      	mov	r2, r3
 800ef44:	4601      	mov	r1, r0
 800ef46:	4620      	mov	r0, r4
 800ef48:	f000 ffa4 	bl	800fe94 <__pow5mult>
 800ef4c:	9b06      	ldr	r3, [sp, #24]
 800ef4e:	2b01      	cmp	r3, #1
 800ef50:	4606      	mov	r6, r0
 800ef52:	f340 8081 	ble.w	800f058 <_dtoa_r+0x8c8>
 800ef56:	f04f 0800 	mov.w	r8, #0
 800ef5a:	6933      	ldr	r3, [r6, #16]
 800ef5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ef60:	6918      	ldr	r0, [r3, #16]
 800ef62:	f000 fe87 	bl	800fc74 <__hi0bits>
 800ef66:	f1c0 0020 	rsb	r0, r0, #32
 800ef6a:	9b05      	ldr	r3, [sp, #20]
 800ef6c:	4418      	add	r0, r3
 800ef6e:	f010 001f 	ands.w	r0, r0, #31
 800ef72:	f000 8092 	beq.w	800f09a <_dtoa_r+0x90a>
 800ef76:	f1c0 0320 	rsb	r3, r0, #32
 800ef7a:	2b04      	cmp	r3, #4
 800ef7c:	f340 808a 	ble.w	800f094 <_dtoa_r+0x904>
 800ef80:	f1c0 001c 	rsb	r0, r0, #28
 800ef84:	9b04      	ldr	r3, [sp, #16]
 800ef86:	4403      	add	r3, r0
 800ef88:	9304      	str	r3, [sp, #16]
 800ef8a:	9b05      	ldr	r3, [sp, #20]
 800ef8c:	4403      	add	r3, r0
 800ef8e:	4405      	add	r5, r0
 800ef90:	9305      	str	r3, [sp, #20]
 800ef92:	9b04      	ldr	r3, [sp, #16]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	dd07      	ble.n	800efa8 <_dtoa_r+0x818>
 800ef98:	ee18 1a10 	vmov	r1, s16
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f000 ffd2 	bl	800ff48 <__lshift>
 800efa4:	ee08 0a10 	vmov	s16, r0
 800efa8:	9b05      	ldr	r3, [sp, #20]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	dd05      	ble.n	800efba <_dtoa_r+0x82a>
 800efae:	4631      	mov	r1, r6
 800efb0:	461a      	mov	r2, r3
 800efb2:	4620      	mov	r0, r4
 800efb4:	f000 ffc8 	bl	800ff48 <__lshift>
 800efb8:	4606      	mov	r6, r0
 800efba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d06e      	beq.n	800f09e <_dtoa_r+0x90e>
 800efc0:	ee18 0a10 	vmov	r0, s16
 800efc4:	4631      	mov	r1, r6
 800efc6:	f001 f82f 	bl	8010028 <__mcmp>
 800efca:	2800      	cmp	r0, #0
 800efcc:	da67      	bge.n	800f09e <_dtoa_r+0x90e>
 800efce:	9b00      	ldr	r3, [sp, #0]
 800efd0:	3b01      	subs	r3, #1
 800efd2:	ee18 1a10 	vmov	r1, s16
 800efd6:	9300      	str	r3, [sp, #0]
 800efd8:	220a      	movs	r2, #10
 800efda:	2300      	movs	r3, #0
 800efdc:	4620      	mov	r0, r4
 800efde:	f000 fdb9 	bl	800fb54 <__multadd>
 800efe2:	9b08      	ldr	r3, [sp, #32]
 800efe4:	ee08 0a10 	vmov	s16, r0
 800efe8:	2b00      	cmp	r3, #0
 800efea:	f000 81b1 	beq.w	800f350 <_dtoa_r+0xbc0>
 800efee:	2300      	movs	r3, #0
 800eff0:	4639      	mov	r1, r7
 800eff2:	220a      	movs	r2, #10
 800eff4:	4620      	mov	r0, r4
 800eff6:	f000 fdad 	bl	800fb54 <__multadd>
 800effa:	9b02      	ldr	r3, [sp, #8]
 800effc:	2b00      	cmp	r3, #0
 800effe:	4607      	mov	r7, r0
 800f000:	f300 808e 	bgt.w	800f120 <_dtoa_r+0x990>
 800f004:	9b06      	ldr	r3, [sp, #24]
 800f006:	2b02      	cmp	r3, #2
 800f008:	dc51      	bgt.n	800f0ae <_dtoa_r+0x91e>
 800f00a:	e089      	b.n	800f120 <_dtoa_r+0x990>
 800f00c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f00e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f012:	e74b      	b.n	800eeac <_dtoa_r+0x71c>
 800f014:	9b03      	ldr	r3, [sp, #12]
 800f016:	1e5e      	subs	r6, r3, #1
 800f018:	9b07      	ldr	r3, [sp, #28]
 800f01a:	42b3      	cmp	r3, r6
 800f01c:	bfbf      	itttt	lt
 800f01e:	9b07      	ldrlt	r3, [sp, #28]
 800f020:	9607      	strlt	r6, [sp, #28]
 800f022:	1af2      	sublt	r2, r6, r3
 800f024:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f026:	bfb6      	itet	lt
 800f028:	189b      	addlt	r3, r3, r2
 800f02a:	1b9e      	subge	r6, r3, r6
 800f02c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f02e:	9b03      	ldr	r3, [sp, #12]
 800f030:	bfb8      	it	lt
 800f032:	2600      	movlt	r6, #0
 800f034:	2b00      	cmp	r3, #0
 800f036:	bfb7      	itett	lt
 800f038:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f03c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f040:	1a9d      	sublt	r5, r3, r2
 800f042:	2300      	movlt	r3, #0
 800f044:	e734      	b.n	800eeb0 <_dtoa_r+0x720>
 800f046:	9e07      	ldr	r6, [sp, #28]
 800f048:	9d04      	ldr	r5, [sp, #16]
 800f04a:	9f08      	ldr	r7, [sp, #32]
 800f04c:	e73b      	b.n	800eec6 <_dtoa_r+0x736>
 800f04e:	9a07      	ldr	r2, [sp, #28]
 800f050:	e767      	b.n	800ef22 <_dtoa_r+0x792>
 800f052:	9b06      	ldr	r3, [sp, #24]
 800f054:	2b01      	cmp	r3, #1
 800f056:	dc18      	bgt.n	800f08a <_dtoa_r+0x8fa>
 800f058:	f1ba 0f00 	cmp.w	sl, #0
 800f05c:	d115      	bne.n	800f08a <_dtoa_r+0x8fa>
 800f05e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f062:	b993      	cbnz	r3, 800f08a <_dtoa_r+0x8fa>
 800f064:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f068:	0d1b      	lsrs	r3, r3, #20
 800f06a:	051b      	lsls	r3, r3, #20
 800f06c:	b183      	cbz	r3, 800f090 <_dtoa_r+0x900>
 800f06e:	9b04      	ldr	r3, [sp, #16]
 800f070:	3301      	adds	r3, #1
 800f072:	9304      	str	r3, [sp, #16]
 800f074:	9b05      	ldr	r3, [sp, #20]
 800f076:	3301      	adds	r3, #1
 800f078:	9305      	str	r3, [sp, #20]
 800f07a:	f04f 0801 	mov.w	r8, #1
 800f07e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f080:	2b00      	cmp	r3, #0
 800f082:	f47f af6a 	bne.w	800ef5a <_dtoa_r+0x7ca>
 800f086:	2001      	movs	r0, #1
 800f088:	e76f      	b.n	800ef6a <_dtoa_r+0x7da>
 800f08a:	f04f 0800 	mov.w	r8, #0
 800f08e:	e7f6      	b.n	800f07e <_dtoa_r+0x8ee>
 800f090:	4698      	mov	r8, r3
 800f092:	e7f4      	b.n	800f07e <_dtoa_r+0x8ee>
 800f094:	f43f af7d 	beq.w	800ef92 <_dtoa_r+0x802>
 800f098:	4618      	mov	r0, r3
 800f09a:	301c      	adds	r0, #28
 800f09c:	e772      	b.n	800ef84 <_dtoa_r+0x7f4>
 800f09e:	9b03      	ldr	r3, [sp, #12]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	dc37      	bgt.n	800f114 <_dtoa_r+0x984>
 800f0a4:	9b06      	ldr	r3, [sp, #24]
 800f0a6:	2b02      	cmp	r3, #2
 800f0a8:	dd34      	ble.n	800f114 <_dtoa_r+0x984>
 800f0aa:	9b03      	ldr	r3, [sp, #12]
 800f0ac:	9302      	str	r3, [sp, #8]
 800f0ae:	9b02      	ldr	r3, [sp, #8]
 800f0b0:	b96b      	cbnz	r3, 800f0ce <_dtoa_r+0x93e>
 800f0b2:	4631      	mov	r1, r6
 800f0b4:	2205      	movs	r2, #5
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	f000 fd4c 	bl	800fb54 <__multadd>
 800f0bc:	4601      	mov	r1, r0
 800f0be:	4606      	mov	r6, r0
 800f0c0:	ee18 0a10 	vmov	r0, s16
 800f0c4:	f000 ffb0 	bl	8010028 <__mcmp>
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	f73f adbb 	bgt.w	800ec44 <_dtoa_r+0x4b4>
 800f0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0d0:	9d01      	ldr	r5, [sp, #4]
 800f0d2:	43db      	mvns	r3, r3
 800f0d4:	9300      	str	r3, [sp, #0]
 800f0d6:	f04f 0800 	mov.w	r8, #0
 800f0da:	4631      	mov	r1, r6
 800f0dc:	4620      	mov	r0, r4
 800f0de:	f000 fd17 	bl	800fb10 <_Bfree>
 800f0e2:	2f00      	cmp	r7, #0
 800f0e4:	f43f aea4 	beq.w	800ee30 <_dtoa_r+0x6a0>
 800f0e8:	f1b8 0f00 	cmp.w	r8, #0
 800f0ec:	d005      	beq.n	800f0fa <_dtoa_r+0x96a>
 800f0ee:	45b8      	cmp	r8, r7
 800f0f0:	d003      	beq.n	800f0fa <_dtoa_r+0x96a>
 800f0f2:	4641      	mov	r1, r8
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	f000 fd0b 	bl	800fb10 <_Bfree>
 800f0fa:	4639      	mov	r1, r7
 800f0fc:	4620      	mov	r0, r4
 800f0fe:	f000 fd07 	bl	800fb10 <_Bfree>
 800f102:	e695      	b.n	800ee30 <_dtoa_r+0x6a0>
 800f104:	2600      	movs	r6, #0
 800f106:	4637      	mov	r7, r6
 800f108:	e7e1      	b.n	800f0ce <_dtoa_r+0x93e>
 800f10a:	9700      	str	r7, [sp, #0]
 800f10c:	4637      	mov	r7, r6
 800f10e:	e599      	b.n	800ec44 <_dtoa_r+0x4b4>
 800f110:	40240000 	.word	0x40240000
 800f114:	9b08      	ldr	r3, [sp, #32]
 800f116:	2b00      	cmp	r3, #0
 800f118:	f000 80ca 	beq.w	800f2b0 <_dtoa_r+0xb20>
 800f11c:	9b03      	ldr	r3, [sp, #12]
 800f11e:	9302      	str	r3, [sp, #8]
 800f120:	2d00      	cmp	r5, #0
 800f122:	dd05      	ble.n	800f130 <_dtoa_r+0x9a0>
 800f124:	4639      	mov	r1, r7
 800f126:	462a      	mov	r2, r5
 800f128:	4620      	mov	r0, r4
 800f12a:	f000 ff0d 	bl	800ff48 <__lshift>
 800f12e:	4607      	mov	r7, r0
 800f130:	f1b8 0f00 	cmp.w	r8, #0
 800f134:	d05b      	beq.n	800f1ee <_dtoa_r+0xa5e>
 800f136:	6879      	ldr	r1, [r7, #4]
 800f138:	4620      	mov	r0, r4
 800f13a:	f000 fca9 	bl	800fa90 <_Balloc>
 800f13e:	4605      	mov	r5, r0
 800f140:	b928      	cbnz	r0, 800f14e <_dtoa_r+0x9be>
 800f142:	4b87      	ldr	r3, [pc, #540]	; (800f360 <_dtoa_r+0xbd0>)
 800f144:	4602      	mov	r2, r0
 800f146:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f14a:	f7ff bb3b 	b.w	800e7c4 <_dtoa_r+0x34>
 800f14e:	693a      	ldr	r2, [r7, #16]
 800f150:	3202      	adds	r2, #2
 800f152:	0092      	lsls	r2, r2, #2
 800f154:	f107 010c 	add.w	r1, r7, #12
 800f158:	300c      	adds	r0, #12
 800f15a:	f7fd feb9 	bl	800ced0 <memcpy>
 800f15e:	2201      	movs	r2, #1
 800f160:	4629      	mov	r1, r5
 800f162:	4620      	mov	r0, r4
 800f164:	f000 fef0 	bl	800ff48 <__lshift>
 800f168:	9b01      	ldr	r3, [sp, #4]
 800f16a:	f103 0901 	add.w	r9, r3, #1
 800f16e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f172:	4413      	add	r3, r2
 800f174:	9305      	str	r3, [sp, #20]
 800f176:	f00a 0301 	and.w	r3, sl, #1
 800f17a:	46b8      	mov	r8, r7
 800f17c:	9304      	str	r3, [sp, #16]
 800f17e:	4607      	mov	r7, r0
 800f180:	4631      	mov	r1, r6
 800f182:	ee18 0a10 	vmov	r0, s16
 800f186:	f7ff fa75 	bl	800e674 <quorem>
 800f18a:	4641      	mov	r1, r8
 800f18c:	9002      	str	r0, [sp, #8]
 800f18e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f192:	ee18 0a10 	vmov	r0, s16
 800f196:	f000 ff47 	bl	8010028 <__mcmp>
 800f19a:	463a      	mov	r2, r7
 800f19c:	9003      	str	r0, [sp, #12]
 800f19e:	4631      	mov	r1, r6
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	f000 ff5d 	bl	8010060 <__mdiff>
 800f1a6:	68c2      	ldr	r2, [r0, #12]
 800f1a8:	f109 3bff 	add.w	fp, r9, #4294967295
 800f1ac:	4605      	mov	r5, r0
 800f1ae:	bb02      	cbnz	r2, 800f1f2 <_dtoa_r+0xa62>
 800f1b0:	4601      	mov	r1, r0
 800f1b2:	ee18 0a10 	vmov	r0, s16
 800f1b6:	f000 ff37 	bl	8010028 <__mcmp>
 800f1ba:	4602      	mov	r2, r0
 800f1bc:	4629      	mov	r1, r5
 800f1be:	4620      	mov	r0, r4
 800f1c0:	9207      	str	r2, [sp, #28]
 800f1c2:	f000 fca5 	bl	800fb10 <_Bfree>
 800f1c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f1ca:	ea43 0102 	orr.w	r1, r3, r2
 800f1ce:	9b04      	ldr	r3, [sp, #16]
 800f1d0:	430b      	orrs	r3, r1
 800f1d2:	464d      	mov	r5, r9
 800f1d4:	d10f      	bne.n	800f1f6 <_dtoa_r+0xa66>
 800f1d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f1da:	d02a      	beq.n	800f232 <_dtoa_r+0xaa2>
 800f1dc:	9b03      	ldr	r3, [sp, #12]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	dd02      	ble.n	800f1e8 <_dtoa_r+0xa58>
 800f1e2:	9b02      	ldr	r3, [sp, #8]
 800f1e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f1e8:	f88b a000 	strb.w	sl, [fp]
 800f1ec:	e775      	b.n	800f0da <_dtoa_r+0x94a>
 800f1ee:	4638      	mov	r0, r7
 800f1f0:	e7ba      	b.n	800f168 <_dtoa_r+0x9d8>
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	e7e2      	b.n	800f1bc <_dtoa_r+0xa2c>
 800f1f6:	9b03      	ldr	r3, [sp, #12]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	db04      	blt.n	800f206 <_dtoa_r+0xa76>
 800f1fc:	9906      	ldr	r1, [sp, #24]
 800f1fe:	430b      	orrs	r3, r1
 800f200:	9904      	ldr	r1, [sp, #16]
 800f202:	430b      	orrs	r3, r1
 800f204:	d122      	bne.n	800f24c <_dtoa_r+0xabc>
 800f206:	2a00      	cmp	r2, #0
 800f208:	ddee      	ble.n	800f1e8 <_dtoa_r+0xa58>
 800f20a:	ee18 1a10 	vmov	r1, s16
 800f20e:	2201      	movs	r2, #1
 800f210:	4620      	mov	r0, r4
 800f212:	f000 fe99 	bl	800ff48 <__lshift>
 800f216:	4631      	mov	r1, r6
 800f218:	ee08 0a10 	vmov	s16, r0
 800f21c:	f000 ff04 	bl	8010028 <__mcmp>
 800f220:	2800      	cmp	r0, #0
 800f222:	dc03      	bgt.n	800f22c <_dtoa_r+0xa9c>
 800f224:	d1e0      	bne.n	800f1e8 <_dtoa_r+0xa58>
 800f226:	f01a 0f01 	tst.w	sl, #1
 800f22a:	d0dd      	beq.n	800f1e8 <_dtoa_r+0xa58>
 800f22c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f230:	d1d7      	bne.n	800f1e2 <_dtoa_r+0xa52>
 800f232:	2339      	movs	r3, #57	; 0x39
 800f234:	f88b 3000 	strb.w	r3, [fp]
 800f238:	462b      	mov	r3, r5
 800f23a:	461d      	mov	r5, r3
 800f23c:	3b01      	subs	r3, #1
 800f23e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f242:	2a39      	cmp	r2, #57	; 0x39
 800f244:	d071      	beq.n	800f32a <_dtoa_r+0xb9a>
 800f246:	3201      	adds	r2, #1
 800f248:	701a      	strb	r2, [r3, #0]
 800f24a:	e746      	b.n	800f0da <_dtoa_r+0x94a>
 800f24c:	2a00      	cmp	r2, #0
 800f24e:	dd07      	ble.n	800f260 <_dtoa_r+0xad0>
 800f250:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f254:	d0ed      	beq.n	800f232 <_dtoa_r+0xaa2>
 800f256:	f10a 0301 	add.w	r3, sl, #1
 800f25a:	f88b 3000 	strb.w	r3, [fp]
 800f25e:	e73c      	b.n	800f0da <_dtoa_r+0x94a>
 800f260:	9b05      	ldr	r3, [sp, #20]
 800f262:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f266:	4599      	cmp	r9, r3
 800f268:	d047      	beq.n	800f2fa <_dtoa_r+0xb6a>
 800f26a:	ee18 1a10 	vmov	r1, s16
 800f26e:	2300      	movs	r3, #0
 800f270:	220a      	movs	r2, #10
 800f272:	4620      	mov	r0, r4
 800f274:	f000 fc6e 	bl	800fb54 <__multadd>
 800f278:	45b8      	cmp	r8, r7
 800f27a:	ee08 0a10 	vmov	s16, r0
 800f27e:	f04f 0300 	mov.w	r3, #0
 800f282:	f04f 020a 	mov.w	r2, #10
 800f286:	4641      	mov	r1, r8
 800f288:	4620      	mov	r0, r4
 800f28a:	d106      	bne.n	800f29a <_dtoa_r+0xb0a>
 800f28c:	f000 fc62 	bl	800fb54 <__multadd>
 800f290:	4680      	mov	r8, r0
 800f292:	4607      	mov	r7, r0
 800f294:	f109 0901 	add.w	r9, r9, #1
 800f298:	e772      	b.n	800f180 <_dtoa_r+0x9f0>
 800f29a:	f000 fc5b 	bl	800fb54 <__multadd>
 800f29e:	4639      	mov	r1, r7
 800f2a0:	4680      	mov	r8, r0
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	220a      	movs	r2, #10
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	f000 fc54 	bl	800fb54 <__multadd>
 800f2ac:	4607      	mov	r7, r0
 800f2ae:	e7f1      	b.n	800f294 <_dtoa_r+0xb04>
 800f2b0:	9b03      	ldr	r3, [sp, #12]
 800f2b2:	9302      	str	r3, [sp, #8]
 800f2b4:	9d01      	ldr	r5, [sp, #4]
 800f2b6:	ee18 0a10 	vmov	r0, s16
 800f2ba:	4631      	mov	r1, r6
 800f2bc:	f7ff f9da 	bl	800e674 <quorem>
 800f2c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f2c4:	9b01      	ldr	r3, [sp, #4]
 800f2c6:	f805 ab01 	strb.w	sl, [r5], #1
 800f2ca:	1aea      	subs	r2, r5, r3
 800f2cc:	9b02      	ldr	r3, [sp, #8]
 800f2ce:	4293      	cmp	r3, r2
 800f2d0:	dd09      	ble.n	800f2e6 <_dtoa_r+0xb56>
 800f2d2:	ee18 1a10 	vmov	r1, s16
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	220a      	movs	r2, #10
 800f2da:	4620      	mov	r0, r4
 800f2dc:	f000 fc3a 	bl	800fb54 <__multadd>
 800f2e0:	ee08 0a10 	vmov	s16, r0
 800f2e4:	e7e7      	b.n	800f2b6 <_dtoa_r+0xb26>
 800f2e6:	9b02      	ldr	r3, [sp, #8]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	bfc8      	it	gt
 800f2ec:	461d      	movgt	r5, r3
 800f2ee:	9b01      	ldr	r3, [sp, #4]
 800f2f0:	bfd8      	it	le
 800f2f2:	2501      	movle	r5, #1
 800f2f4:	441d      	add	r5, r3
 800f2f6:	f04f 0800 	mov.w	r8, #0
 800f2fa:	ee18 1a10 	vmov	r1, s16
 800f2fe:	2201      	movs	r2, #1
 800f300:	4620      	mov	r0, r4
 800f302:	f000 fe21 	bl	800ff48 <__lshift>
 800f306:	4631      	mov	r1, r6
 800f308:	ee08 0a10 	vmov	s16, r0
 800f30c:	f000 fe8c 	bl	8010028 <__mcmp>
 800f310:	2800      	cmp	r0, #0
 800f312:	dc91      	bgt.n	800f238 <_dtoa_r+0xaa8>
 800f314:	d102      	bne.n	800f31c <_dtoa_r+0xb8c>
 800f316:	f01a 0f01 	tst.w	sl, #1
 800f31a:	d18d      	bne.n	800f238 <_dtoa_r+0xaa8>
 800f31c:	462b      	mov	r3, r5
 800f31e:	461d      	mov	r5, r3
 800f320:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f324:	2a30      	cmp	r2, #48	; 0x30
 800f326:	d0fa      	beq.n	800f31e <_dtoa_r+0xb8e>
 800f328:	e6d7      	b.n	800f0da <_dtoa_r+0x94a>
 800f32a:	9a01      	ldr	r2, [sp, #4]
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d184      	bne.n	800f23a <_dtoa_r+0xaaa>
 800f330:	9b00      	ldr	r3, [sp, #0]
 800f332:	3301      	adds	r3, #1
 800f334:	9300      	str	r3, [sp, #0]
 800f336:	2331      	movs	r3, #49	; 0x31
 800f338:	7013      	strb	r3, [r2, #0]
 800f33a:	e6ce      	b.n	800f0da <_dtoa_r+0x94a>
 800f33c:	4b09      	ldr	r3, [pc, #36]	; (800f364 <_dtoa_r+0xbd4>)
 800f33e:	f7ff ba95 	b.w	800e86c <_dtoa_r+0xdc>
 800f342:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f344:	2b00      	cmp	r3, #0
 800f346:	f47f aa6e 	bne.w	800e826 <_dtoa_r+0x96>
 800f34a:	4b07      	ldr	r3, [pc, #28]	; (800f368 <_dtoa_r+0xbd8>)
 800f34c:	f7ff ba8e 	b.w	800e86c <_dtoa_r+0xdc>
 800f350:	9b02      	ldr	r3, [sp, #8]
 800f352:	2b00      	cmp	r3, #0
 800f354:	dcae      	bgt.n	800f2b4 <_dtoa_r+0xb24>
 800f356:	9b06      	ldr	r3, [sp, #24]
 800f358:	2b02      	cmp	r3, #2
 800f35a:	f73f aea8 	bgt.w	800f0ae <_dtoa_r+0x91e>
 800f35e:	e7a9      	b.n	800f2b4 <_dtoa_r+0xb24>
 800f360:	080118f7 	.word	0x080118f7
 800f364:	08011800 	.word	0x08011800
 800f368:	08011878 	.word	0x08011878

0800f36c <rshift>:
 800f36c:	6903      	ldr	r3, [r0, #16]
 800f36e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f372:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f376:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f37a:	f100 0414 	add.w	r4, r0, #20
 800f37e:	dd45      	ble.n	800f40c <rshift+0xa0>
 800f380:	f011 011f 	ands.w	r1, r1, #31
 800f384:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f388:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f38c:	d10c      	bne.n	800f3a8 <rshift+0x3c>
 800f38e:	f100 0710 	add.w	r7, r0, #16
 800f392:	4629      	mov	r1, r5
 800f394:	42b1      	cmp	r1, r6
 800f396:	d334      	bcc.n	800f402 <rshift+0x96>
 800f398:	1a9b      	subs	r3, r3, r2
 800f39a:	009b      	lsls	r3, r3, #2
 800f39c:	1eea      	subs	r2, r5, #3
 800f39e:	4296      	cmp	r6, r2
 800f3a0:	bf38      	it	cc
 800f3a2:	2300      	movcc	r3, #0
 800f3a4:	4423      	add	r3, r4
 800f3a6:	e015      	b.n	800f3d4 <rshift+0x68>
 800f3a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f3ac:	f1c1 0820 	rsb	r8, r1, #32
 800f3b0:	40cf      	lsrs	r7, r1
 800f3b2:	f105 0e04 	add.w	lr, r5, #4
 800f3b6:	46a1      	mov	r9, r4
 800f3b8:	4576      	cmp	r6, lr
 800f3ba:	46f4      	mov	ip, lr
 800f3bc:	d815      	bhi.n	800f3ea <rshift+0x7e>
 800f3be:	1a9a      	subs	r2, r3, r2
 800f3c0:	0092      	lsls	r2, r2, #2
 800f3c2:	3a04      	subs	r2, #4
 800f3c4:	3501      	adds	r5, #1
 800f3c6:	42ae      	cmp	r6, r5
 800f3c8:	bf38      	it	cc
 800f3ca:	2200      	movcc	r2, #0
 800f3cc:	18a3      	adds	r3, r4, r2
 800f3ce:	50a7      	str	r7, [r4, r2]
 800f3d0:	b107      	cbz	r7, 800f3d4 <rshift+0x68>
 800f3d2:	3304      	adds	r3, #4
 800f3d4:	1b1a      	subs	r2, r3, r4
 800f3d6:	42a3      	cmp	r3, r4
 800f3d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f3dc:	bf08      	it	eq
 800f3de:	2300      	moveq	r3, #0
 800f3e0:	6102      	str	r2, [r0, #16]
 800f3e2:	bf08      	it	eq
 800f3e4:	6143      	streq	r3, [r0, #20]
 800f3e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3ea:	f8dc c000 	ldr.w	ip, [ip]
 800f3ee:	fa0c fc08 	lsl.w	ip, ip, r8
 800f3f2:	ea4c 0707 	orr.w	r7, ip, r7
 800f3f6:	f849 7b04 	str.w	r7, [r9], #4
 800f3fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f3fe:	40cf      	lsrs	r7, r1
 800f400:	e7da      	b.n	800f3b8 <rshift+0x4c>
 800f402:	f851 cb04 	ldr.w	ip, [r1], #4
 800f406:	f847 cf04 	str.w	ip, [r7, #4]!
 800f40a:	e7c3      	b.n	800f394 <rshift+0x28>
 800f40c:	4623      	mov	r3, r4
 800f40e:	e7e1      	b.n	800f3d4 <rshift+0x68>

0800f410 <__hexdig_fun>:
 800f410:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f414:	2b09      	cmp	r3, #9
 800f416:	d802      	bhi.n	800f41e <__hexdig_fun+0xe>
 800f418:	3820      	subs	r0, #32
 800f41a:	b2c0      	uxtb	r0, r0
 800f41c:	4770      	bx	lr
 800f41e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f422:	2b05      	cmp	r3, #5
 800f424:	d801      	bhi.n	800f42a <__hexdig_fun+0x1a>
 800f426:	3847      	subs	r0, #71	; 0x47
 800f428:	e7f7      	b.n	800f41a <__hexdig_fun+0xa>
 800f42a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f42e:	2b05      	cmp	r3, #5
 800f430:	d801      	bhi.n	800f436 <__hexdig_fun+0x26>
 800f432:	3827      	subs	r0, #39	; 0x27
 800f434:	e7f1      	b.n	800f41a <__hexdig_fun+0xa>
 800f436:	2000      	movs	r0, #0
 800f438:	4770      	bx	lr
	...

0800f43c <__gethex>:
 800f43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f440:	ed2d 8b02 	vpush	{d8}
 800f444:	b089      	sub	sp, #36	; 0x24
 800f446:	ee08 0a10 	vmov	s16, r0
 800f44a:	9304      	str	r3, [sp, #16]
 800f44c:	4bb4      	ldr	r3, [pc, #720]	; (800f720 <__gethex+0x2e4>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	9301      	str	r3, [sp, #4]
 800f452:	4618      	mov	r0, r3
 800f454:	468b      	mov	fp, r1
 800f456:	4690      	mov	r8, r2
 800f458:	f7f0 fec2 	bl	80001e0 <strlen>
 800f45c:	9b01      	ldr	r3, [sp, #4]
 800f45e:	f8db 2000 	ldr.w	r2, [fp]
 800f462:	4403      	add	r3, r0
 800f464:	4682      	mov	sl, r0
 800f466:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f46a:	9305      	str	r3, [sp, #20]
 800f46c:	1c93      	adds	r3, r2, #2
 800f46e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f472:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f476:	32fe      	adds	r2, #254	; 0xfe
 800f478:	18d1      	adds	r1, r2, r3
 800f47a:	461f      	mov	r7, r3
 800f47c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f480:	9100      	str	r1, [sp, #0]
 800f482:	2830      	cmp	r0, #48	; 0x30
 800f484:	d0f8      	beq.n	800f478 <__gethex+0x3c>
 800f486:	f7ff ffc3 	bl	800f410 <__hexdig_fun>
 800f48a:	4604      	mov	r4, r0
 800f48c:	2800      	cmp	r0, #0
 800f48e:	d13a      	bne.n	800f506 <__gethex+0xca>
 800f490:	9901      	ldr	r1, [sp, #4]
 800f492:	4652      	mov	r2, sl
 800f494:	4638      	mov	r0, r7
 800f496:	f7fe faab 	bl	800d9f0 <strncmp>
 800f49a:	4605      	mov	r5, r0
 800f49c:	2800      	cmp	r0, #0
 800f49e:	d168      	bne.n	800f572 <__gethex+0x136>
 800f4a0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f4a4:	eb07 060a 	add.w	r6, r7, sl
 800f4a8:	f7ff ffb2 	bl	800f410 <__hexdig_fun>
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	d062      	beq.n	800f576 <__gethex+0x13a>
 800f4b0:	4633      	mov	r3, r6
 800f4b2:	7818      	ldrb	r0, [r3, #0]
 800f4b4:	2830      	cmp	r0, #48	; 0x30
 800f4b6:	461f      	mov	r7, r3
 800f4b8:	f103 0301 	add.w	r3, r3, #1
 800f4bc:	d0f9      	beq.n	800f4b2 <__gethex+0x76>
 800f4be:	f7ff ffa7 	bl	800f410 <__hexdig_fun>
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	fab0 f480 	clz	r4, r0
 800f4c8:	0964      	lsrs	r4, r4, #5
 800f4ca:	4635      	mov	r5, r6
 800f4cc:	9300      	str	r3, [sp, #0]
 800f4ce:	463a      	mov	r2, r7
 800f4d0:	4616      	mov	r6, r2
 800f4d2:	3201      	adds	r2, #1
 800f4d4:	7830      	ldrb	r0, [r6, #0]
 800f4d6:	f7ff ff9b 	bl	800f410 <__hexdig_fun>
 800f4da:	2800      	cmp	r0, #0
 800f4dc:	d1f8      	bne.n	800f4d0 <__gethex+0x94>
 800f4de:	9901      	ldr	r1, [sp, #4]
 800f4e0:	4652      	mov	r2, sl
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	f7fe fa84 	bl	800d9f0 <strncmp>
 800f4e8:	b980      	cbnz	r0, 800f50c <__gethex+0xd0>
 800f4ea:	b94d      	cbnz	r5, 800f500 <__gethex+0xc4>
 800f4ec:	eb06 050a 	add.w	r5, r6, sl
 800f4f0:	462a      	mov	r2, r5
 800f4f2:	4616      	mov	r6, r2
 800f4f4:	3201      	adds	r2, #1
 800f4f6:	7830      	ldrb	r0, [r6, #0]
 800f4f8:	f7ff ff8a 	bl	800f410 <__hexdig_fun>
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	d1f8      	bne.n	800f4f2 <__gethex+0xb6>
 800f500:	1bad      	subs	r5, r5, r6
 800f502:	00ad      	lsls	r5, r5, #2
 800f504:	e004      	b.n	800f510 <__gethex+0xd4>
 800f506:	2400      	movs	r4, #0
 800f508:	4625      	mov	r5, r4
 800f50a:	e7e0      	b.n	800f4ce <__gethex+0x92>
 800f50c:	2d00      	cmp	r5, #0
 800f50e:	d1f7      	bne.n	800f500 <__gethex+0xc4>
 800f510:	7833      	ldrb	r3, [r6, #0]
 800f512:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f516:	2b50      	cmp	r3, #80	; 0x50
 800f518:	d13b      	bne.n	800f592 <__gethex+0x156>
 800f51a:	7873      	ldrb	r3, [r6, #1]
 800f51c:	2b2b      	cmp	r3, #43	; 0x2b
 800f51e:	d02c      	beq.n	800f57a <__gethex+0x13e>
 800f520:	2b2d      	cmp	r3, #45	; 0x2d
 800f522:	d02e      	beq.n	800f582 <__gethex+0x146>
 800f524:	1c71      	adds	r1, r6, #1
 800f526:	f04f 0900 	mov.w	r9, #0
 800f52a:	7808      	ldrb	r0, [r1, #0]
 800f52c:	f7ff ff70 	bl	800f410 <__hexdig_fun>
 800f530:	1e43      	subs	r3, r0, #1
 800f532:	b2db      	uxtb	r3, r3
 800f534:	2b18      	cmp	r3, #24
 800f536:	d82c      	bhi.n	800f592 <__gethex+0x156>
 800f538:	f1a0 0210 	sub.w	r2, r0, #16
 800f53c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f540:	f7ff ff66 	bl	800f410 <__hexdig_fun>
 800f544:	1e43      	subs	r3, r0, #1
 800f546:	b2db      	uxtb	r3, r3
 800f548:	2b18      	cmp	r3, #24
 800f54a:	d91d      	bls.n	800f588 <__gethex+0x14c>
 800f54c:	f1b9 0f00 	cmp.w	r9, #0
 800f550:	d000      	beq.n	800f554 <__gethex+0x118>
 800f552:	4252      	negs	r2, r2
 800f554:	4415      	add	r5, r2
 800f556:	f8cb 1000 	str.w	r1, [fp]
 800f55a:	b1e4      	cbz	r4, 800f596 <__gethex+0x15a>
 800f55c:	9b00      	ldr	r3, [sp, #0]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	bf14      	ite	ne
 800f562:	2700      	movne	r7, #0
 800f564:	2706      	moveq	r7, #6
 800f566:	4638      	mov	r0, r7
 800f568:	b009      	add	sp, #36	; 0x24
 800f56a:	ecbd 8b02 	vpop	{d8}
 800f56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f572:	463e      	mov	r6, r7
 800f574:	4625      	mov	r5, r4
 800f576:	2401      	movs	r4, #1
 800f578:	e7ca      	b.n	800f510 <__gethex+0xd4>
 800f57a:	f04f 0900 	mov.w	r9, #0
 800f57e:	1cb1      	adds	r1, r6, #2
 800f580:	e7d3      	b.n	800f52a <__gethex+0xee>
 800f582:	f04f 0901 	mov.w	r9, #1
 800f586:	e7fa      	b.n	800f57e <__gethex+0x142>
 800f588:	230a      	movs	r3, #10
 800f58a:	fb03 0202 	mla	r2, r3, r2, r0
 800f58e:	3a10      	subs	r2, #16
 800f590:	e7d4      	b.n	800f53c <__gethex+0x100>
 800f592:	4631      	mov	r1, r6
 800f594:	e7df      	b.n	800f556 <__gethex+0x11a>
 800f596:	1bf3      	subs	r3, r6, r7
 800f598:	3b01      	subs	r3, #1
 800f59a:	4621      	mov	r1, r4
 800f59c:	2b07      	cmp	r3, #7
 800f59e:	dc0b      	bgt.n	800f5b8 <__gethex+0x17c>
 800f5a0:	ee18 0a10 	vmov	r0, s16
 800f5a4:	f000 fa74 	bl	800fa90 <_Balloc>
 800f5a8:	4604      	mov	r4, r0
 800f5aa:	b940      	cbnz	r0, 800f5be <__gethex+0x182>
 800f5ac:	4b5d      	ldr	r3, [pc, #372]	; (800f724 <__gethex+0x2e8>)
 800f5ae:	4602      	mov	r2, r0
 800f5b0:	21de      	movs	r1, #222	; 0xde
 800f5b2:	485d      	ldr	r0, [pc, #372]	; (800f728 <__gethex+0x2ec>)
 800f5b4:	f001 f8b6 	bl	8010724 <__assert_func>
 800f5b8:	3101      	adds	r1, #1
 800f5ba:	105b      	asrs	r3, r3, #1
 800f5bc:	e7ee      	b.n	800f59c <__gethex+0x160>
 800f5be:	f100 0914 	add.w	r9, r0, #20
 800f5c2:	f04f 0b00 	mov.w	fp, #0
 800f5c6:	f1ca 0301 	rsb	r3, sl, #1
 800f5ca:	f8cd 9008 	str.w	r9, [sp, #8]
 800f5ce:	f8cd b000 	str.w	fp, [sp]
 800f5d2:	9306      	str	r3, [sp, #24]
 800f5d4:	42b7      	cmp	r7, r6
 800f5d6:	d340      	bcc.n	800f65a <__gethex+0x21e>
 800f5d8:	9802      	ldr	r0, [sp, #8]
 800f5da:	9b00      	ldr	r3, [sp, #0]
 800f5dc:	f840 3b04 	str.w	r3, [r0], #4
 800f5e0:	eba0 0009 	sub.w	r0, r0, r9
 800f5e4:	1080      	asrs	r0, r0, #2
 800f5e6:	0146      	lsls	r6, r0, #5
 800f5e8:	6120      	str	r0, [r4, #16]
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f000 fb42 	bl	800fc74 <__hi0bits>
 800f5f0:	1a30      	subs	r0, r6, r0
 800f5f2:	f8d8 6000 	ldr.w	r6, [r8]
 800f5f6:	42b0      	cmp	r0, r6
 800f5f8:	dd63      	ble.n	800f6c2 <__gethex+0x286>
 800f5fa:	1b87      	subs	r7, r0, r6
 800f5fc:	4639      	mov	r1, r7
 800f5fe:	4620      	mov	r0, r4
 800f600:	f000 fee6 	bl	80103d0 <__any_on>
 800f604:	4682      	mov	sl, r0
 800f606:	b1a8      	cbz	r0, 800f634 <__gethex+0x1f8>
 800f608:	1e7b      	subs	r3, r7, #1
 800f60a:	1159      	asrs	r1, r3, #5
 800f60c:	f003 021f 	and.w	r2, r3, #31
 800f610:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f614:	f04f 0a01 	mov.w	sl, #1
 800f618:	fa0a f202 	lsl.w	r2, sl, r2
 800f61c:	420a      	tst	r2, r1
 800f61e:	d009      	beq.n	800f634 <__gethex+0x1f8>
 800f620:	4553      	cmp	r3, sl
 800f622:	dd05      	ble.n	800f630 <__gethex+0x1f4>
 800f624:	1eb9      	subs	r1, r7, #2
 800f626:	4620      	mov	r0, r4
 800f628:	f000 fed2 	bl	80103d0 <__any_on>
 800f62c:	2800      	cmp	r0, #0
 800f62e:	d145      	bne.n	800f6bc <__gethex+0x280>
 800f630:	f04f 0a02 	mov.w	sl, #2
 800f634:	4639      	mov	r1, r7
 800f636:	4620      	mov	r0, r4
 800f638:	f7ff fe98 	bl	800f36c <rshift>
 800f63c:	443d      	add	r5, r7
 800f63e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f642:	42ab      	cmp	r3, r5
 800f644:	da4c      	bge.n	800f6e0 <__gethex+0x2a4>
 800f646:	ee18 0a10 	vmov	r0, s16
 800f64a:	4621      	mov	r1, r4
 800f64c:	f000 fa60 	bl	800fb10 <_Bfree>
 800f650:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f652:	2300      	movs	r3, #0
 800f654:	6013      	str	r3, [r2, #0]
 800f656:	27a3      	movs	r7, #163	; 0xa3
 800f658:	e785      	b.n	800f566 <__gethex+0x12a>
 800f65a:	1e73      	subs	r3, r6, #1
 800f65c:	9a05      	ldr	r2, [sp, #20]
 800f65e:	9303      	str	r3, [sp, #12]
 800f660:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f664:	4293      	cmp	r3, r2
 800f666:	d019      	beq.n	800f69c <__gethex+0x260>
 800f668:	f1bb 0f20 	cmp.w	fp, #32
 800f66c:	d107      	bne.n	800f67e <__gethex+0x242>
 800f66e:	9b02      	ldr	r3, [sp, #8]
 800f670:	9a00      	ldr	r2, [sp, #0]
 800f672:	f843 2b04 	str.w	r2, [r3], #4
 800f676:	9302      	str	r3, [sp, #8]
 800f678:	2300      	movs	r3, #0
 800f67a:	9300      	str	r3, [sp, #0]
 800f67c:	469b      	mov	fp, r3
 800f67e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f682:	f7ff fec5 	bl	800f410 <__hexdig_fun>
 800f686:	9b00      	ldr	r3, [sp, #0]
 800f688:	f000 000f 	and.w	r0, r0, #15
 800f68c:	fa00 f00b 	lsl.w	r0, r0, fp
 800f690:	4303      	orrs	r3, r0
 800f692:	9300      	str	r3, [sp, #0]
 800f694:	f10b 0b04 	add.w	fp, fp, #4
 800f698:	9b03      	ldr	r3, [sp, #12]
 800f69a:	e00d      	b.n	800f6b8 <__gethex+0x27c>
 800f69c:	9b03      	ldr	r3, [sp, #12]
 800f69e:	9a06      	ldr	r2, [sp, #24]
 800f6a0:	4413      	add	r3, r2
 800f6a2:	42bb      	cmp	r3, r7
 800f6a4:	d3e0      	bcc.n	800f668 <__gethex+0x22c>
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	9901      	ldr	r1, [sp, #4]
 800f6aa:	9307      	str	r3, [sp, #28]
 800f6ac:	4652      	mov	r2, sl
 800f6ae:	f7fe f99f 	bl	800d9f0 <strncmp>
 800f6b2:	9b07      	ldr	r3, [sp, #28]
 800f6b4:	2800      	cmp	r0, #0
 800f6b6:	d1d7      	bne.n	800f668 <__gethex+0x22c>
 800f6b8:	461e      	mov	r6, r3
 800f6ba:	e78b      	b.n	800f5d4 <__gethex+0x198>
 800f6bc:	f04f 0a03 	mov.w	sl, #3
 800f6c0:	e7b8      	b.n	800f634 <__gethex+0x1f8>
 800f6c2:	da0a      	bge.n	800f6da <__gethex+0x29e>
 800f6c4:	1a37      	subs	r7, r6, r0
 800f6c6:	4621      	mov	r1, r4
 800f6c8:	ee18 0a10 	vmov	r0, s16
 800f6cc:	463a      	mov	r2, r7
 800f6ce:	f000 fc3b 	bl	800ff48 <__lshift>
 800f6d2:	1bed      	subs	r5, r5, r7
 800f6d4:	4604      	mov	r4, r0
 800f6d6:	f100 0914 	add.w	r9, r0, #20
 800f6da:	f04f 0a00 	mov.w	sl, #0
 800f6de:	e7ae      	b.n	800f63e <__gethex+0x202>
 800f6e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f6e4:	42a8      	cmp	r0, r5
 800f6e6:	dd72      	ble.n	800f7ce <__gethex+0x392>
 800f6e8:	1b45      	subs	r5, r0, r5
 800f6ea:	42ae      	cmp	r6, r5
 800f6ec:	dc36      	bgt.n	800f75c <__gethex+0x320>
 800f6ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f6f2:	2b02      	cmp	r3, #2
 800f6f4:	d02a      	beq.n	800f74c <__gethex+0x310>
 800f6f6:	2b03      	cmp	r3, #3
 800f6f8:	d02c      	beq.n	800f754 <__gethex+0x318>
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d11c      	bne.n	800f738 <__gethex+0x2fc>
 800f6fe:	42ae      	cmp	r6, r5
 800f700:	d11a      	bne.n	800f738 <__gethex+0x2fc>
 800f702:	2e01      	cmp	r6, #1
 800f704:	d112      	bne.n	800f72c <__gethex+0x2f0>
 800f706:	9a04      	ldr	r2, [sp, #16]
 800f708:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f70c:	6013      	str	r3, [r2, #0]
 800f70e:	2301      	movs	r3, #1
 800f710:	6123      	str	r3, [r4, #16]
 800f712:	f8c9 3000 	str.w	r3, [r9]
 800f716:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f718:	2762      	movs	r7, #98	; 0x62
 800f71a:	601c      	str	r4, [r3, #0]
 800f71c:	e723      	b.n	800f566 <__gethex+0x12a>
 800f71e:	bf00      	nop
 800f720:	08011970 	.word	0x08011970
 800f724:	080118f7 	.word	0x080118f7
 800f728:	08011908 	.word	0x08011908
 800f72c:	1e71      	subs	r1, r6, #1
 800f72e:	4620      	mov	r0, r4
 800f730:	f000 fe4e 	bl	80103d0 <__any_on>
 800f734:	2800      	cmp	r0, #0
 800f736:	d1e6      	bne.n	800f706 <__gethex+0x2ca>
 800f738:	ee18 0a10 	vmov	r0, s16
 800f73c:	4621      	mov	r1, r4
 800f73e:	f000 f9e7 	bl	800fb10 <_Bfree>
 800f742:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f744:	2300      	movs	r3, #0
 800f746:	6013      	str	r3, [r2, #0]
 800f748:	2750      	movs	r7, #80	; 0x50
 800f74a:	e70c      	b.n	800f566 <__gethex+0x12a>
 800f74c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d1f2      	bne.n	800f738 <__gethex+0x2fc>
 800f752:	e7d8      	b.n	800f706 <__gethex+0x2ca>
 800f754:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f756:	2b00      	cmp	r3, #0
 800f758:	d1d5      	bne.n	800f706 <__gethex+0x2ca>
 800f75a:	e7ed      	b.n	800f738 <__gethex+0x2fc>
 800f75c:	1e6f      	subs	r7, r5, #1
 800f75e:	f1ba 0f00 	cmp.w	sl, #0
 800f762:	d131      	bne.n	800f7c8 <__gethex+0x38c>
 800f764:	b127      	cbz	r7, 800f770 <__gethex+0x334>
 800f766:	4639      	mov	r1, r7
 800f768:	4620      	mov	r0, r4
 800f76a:	f000 fe31 	bl	80103d0 <__any_on>
 800f76e:	4682      	mov	sl, r0
 800f770:	117b      	asrs	r3, r7, #5
 800f772:	2101      	movs	r1, #1
 800f774:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f778:	f007 071f 	and.w	r7, r7, #31
 800f77c:	fa01 f707 	lsl.w	r7, r1, r7
 800f780:	421f      	tst	r7, r3
 800f782:	4629      	mov	r1, r5
 800f784:	4620      	mov	r0, r4
 800f786:	bf18      	it	ne
 800f788:	f04a 0a02 	orrne.w	sl, sl, #2
 800f78c:	1b76      	subs	r6, r6, r5
 800f78e:	f7ff fded 	bl	800f36c <rshift>
 800f792:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f796:	2702      	movs	r7, #2
 800f798:	f1ba 0f00 	cmp.w	sl, #0
 800f79c:	d048      	beq.n	800f830 <__gethex+0x3f4>
 800f79e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f7a2:	2b02      	cmp	r3, #2
 800f7a4:	d015      	beq.n	800f7d2 <__gethex+0x396>
 800f7a6:	2b03      	cmp	r3, #3
 800f7a8:	d017      	beq.n	800f7da <__gethex+0x39e>
 800f7aa:	2b01      	cmp	r3, #1
 800f7ac:	d109      	bne.n	800f7c2 <__gethex+0x386>
 800f7ae:	f01a 0f02 	tst.w	sl, #2
 800f7b2:	d006      	beq.n	800f7c2 <__gethex+0x386>
 800f7b4:	f8d9 0000 	ldr.w	r0, [r9]
 800f7b8:	ea4a 0a00 	orr.w	sl, sl, r0
 800f7bc:	f01a 0f01 	tst.w	sl, #1
 800f7c0:	d10e      	bne.n	800f7e0 <__gethex+0x3a4>
 800f7c2:	f047 0710 	orr.w	r7, r7, #16
 800f7c6:	e033      	b.n	800f830 <__gethex+0x3f4>
 800f7c8:	f04f 0a01 	mov.w	sl, #1
 800f7cc:	e7d0      	b.n	800f770 <__gethex+0x334>
 800f7ce:	2701      	movs	r7, #1
 800f7d0:	e7e2      	b.n	800f798 <__gethex+0x35c>
 800f7d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f7d4:	f1c3 0301 	rsb	r3, r3, #1
 800f7d8:	9315      	str	r3, [sp, #84]	; 0x54
 800f7da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d0f0      	beq.n	800f7c2 <__gethex+0x386>
 800f7e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f7e4:	f104 0314 	add.w	r3, r4, #20
 800f7e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f7ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f7f0:	f04f 0c00 	mov.w	ip, #0
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7fa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f7fe:	d01c      	beq.n	800f83a <__gethex+0x3fe>
 800f800:	3201      	adds	r2, #1
 800f802:	6002      	str	r2, [r0, #0]
 800f804:	2f02      	cmp	r7, #2
 800f806:	f104 0314 	add.w	r3, r4, #20
 800f80a:	d13f      	bne.n	800f88c <__gethex+0x450>
 800f80c:	f8d8 2000 	ldr.w	r2, [r8]
 800f810:	3a01      	subs	r2, #1
 800f812:	42b2      	cmp	r2, r6
 800f814:	d10a      	bne.n	800f82c <__gethex+0x3f0>
 800f816:	1171      	asrs	r1, r6, #5
 800f818:	2201      	movs	r2, #1
 800f81a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f81e:	f006 061f 	and.w	r6, r6, #31
 800f822:	fa02 f606 	lsl.w	r6, r2, r6
 800f826:	421e      	tst	r6, r3
 800f828:	bf18      	it	ne
 800f82a:	4617      	movne	r7, r2
 800f82c:	f047 0720 	orr.w	r7, r7, #32
 800f830:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f832:	601c      	str	r4, [r3, #0]
 800f834:	9b04      	ldr	r3, [sp, #16]
 800f836:	601d      	str	r5, [r3, #0]
 800f838:	e695      	b.n	800f566 <__gethex+0x12a>
 800f83a:	4299      	cmp	r1, r3
 800f83c:	f843 cc04 	str.w	ip, [r3, #-4]
 800f840:	d8d8      	bhi.n	800f7f4 <__gethex+0x3b8>
 800f842:	68a3      	ldr	r3, [r4, #8]
 800f844:	459b      	cmp	fp, r3
 800f846:	db19      	blt.n	800f87c <__gethex+0x440>
 800f848:	6861      	ldr	r1, [r4, #4]
 800f84a:	ee18 0a10 	vmov	r0, s16
 800f84e:	3101      	adds	r1, #1
 800f850:	f000 f91e 	bl	800fa90 <_Balloc>
 800f854:	4681      	mov	r9, r0
 800f856:	b918      	cbnz	r0, 800f860 <__gethex+0x424>
 800f858:	4b1a      	ldr	r3, [pc, #104]	; (800f8c4 <__gethex+0x488>)
 800f85a:	4602      	mov	r2, r0
 800f85c:	2184      	movs	r1, #132	; 0x84
 800f85e:	e6a8      	b.n	800f5b2 <__gethex+0x176>
 800f860:	6922      	ldr	r2, [r4, #16]
 800f862:	3202      	adds	r2, #2
 800f864:	f104 010c 	add.w	r1, r4, #12
 800f868:	0092      	lsls	r2, r2, #2
 800f86a:	300c      	adds	r0, #12
 800f86c:	f7fd fb30 	bl	800ced0 <memcpy>
 800f870:	4621      	mov	r1, r4
 800f872:	ee18 0a10 	vmov	r0, s16
 800f876:	f000 f94b 	bl	800fb10 <_Bfree>
 800f87a:	464c      	mov	r4, r9
 800f87c:	6923      	ldr	r3, [r4, #16]
 800f87e:	1c5a      	adds	r2, r3, #1
 800f880:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f884:	6122      	str	r2, [r4, #16]
 800f886:	2201      	movs	r2, #1
 800f888:	615a      	str	r2, [r3, #20]
 800f88a:	e7bb      	b.n	800f804 <__gethex+0x3c8>
 800f88c:	6922      	ldr	r2, [r4, #16]
 800f88e:	455a      	cmp	r2, fp
 800f890:	dd0b      	ble.n	800f8aa <__gethex+0x46e>
 800f892:	2101      	movs	r1, #1
 800f894:	4620      	mov	r0, r4
 800f896:	f7ff fd69 	bl	800f36c <rshift>
 800f89a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f89e:	3501      	adds	r5, #1
 800f8a0:	42ab      	cmp	r3, r5
 800f8a2:	f6ff aed0 	blt.w	800f646 <__gethex+0x20a>
 800f8a6:	2701      	movs	r7, #1
 800f8a8:	e7c0      	b.n	800f82c <__gethex+0x3f0>
 800f8aa:	f016 061f 	ands.w	r6, r6, #31
 800f8ae:	d0fa      	beq.n	800f8a6 <__gethex+0x46a>
 800f8b0:	4453      	add	r3, sl
 800f8b2:	f1c6 0620 	rsb	r6, r6, #32
 800f8b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f8ba:	f000 f9db 	bl	800fc74 <__hi0bits>
 800f8be:	42b0      	cmp	r0, r6
 800f8c0:	dbe7      	blt.n	800f892 <__gethex+0x456>
 800f8c2:	e7f0      	b.n	800f8a6 <__gethex+0x46a>
 800f8c4:	080118f7 	.word	0x080118f7

0800f8c8 <L_shift>:
 800f8c8:	f1c2 0208 	rsb	r2, r2, #8
 800f8cc:	0092      	lsls	r2, r2, #2
 800f8ce:	b570      	push	{r4, r5, r6, lr}
 800f8d0:	f1c2 0620 	rsb	r6, r2, #32
 800f8d4:	6843      	ldr	r3, [r0, #4]
 800f8d6:	6804      	ldr	r4, [r0, #0]
 800f8d8:	fa03 f506 	lsl.w	r5, r3, r6
 800f8dc:	432c      	orrs	r4, r5
 800f8de:	40d3      	lsrs	r3, r2
 800f8e0:	6004      	str	r4, [r0, #0]
 800f8e2:	f840 3f04 	str.w	r3, [r0, #4]!
 800f8e6:	4288      	cmp	r0, r1
 800f8e8:	d3f4      	bcc.n	800f8d4 <L_shift+0xc>
 800f8ea:	bd70      	pop	{r4, r5, r6, pc}

0800f8ec <__match>:
 800f8ec:	b530      	push	{r4, r5, lr}
 800f8ee:	6803      	ldr	r3, [r0, #0]
 800f8f0:	3301      	adds	r3, #1
 800f8f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8f6:	b914      	cbnz	r4, 800f8fe <__match+0x12>
 800f8f8:	6003      	str	r3, [r0, #0]
 800f8fa:	2001      	movs	r0, #1
 800f8fc:	bd30      	pop	{r4, r5, pc}
 800f8fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f902:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f906:	2d19      	cmp	r5, #25
 800f908:	bf98      	it	ls
 800f90a:	3220      	addls	r2, #32
 800f90c:	42a2      	cmp	r2, r4
 800f90e:	d0f0      	beq.n	800f8f2 <__match+0x6>
 800f910:	2000      	movs	r0, #0
 800f912:	e7f3      	b.n	800f8fc <__match+0x10>

0800f914 <__hexnan>:
 800f914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f918:	680b      	ldr	r3, [r1, #0]
 800f91a:	115e      	asrs	r6, r3, #5
 800f91c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f920:	f013 031f 	ands.w	r3, r3, #31
 800f924:	b087      	sub	sp, #28
 800f926:	bf18      	it	ne
 800f928:	3604      	addne	r6, #4
 800f92a:	2500      	movs	r5, #0
 800f92c:	1f37      	subs	r7, r6, #4
 800f92e:	4690      	mov	r8, r2
 800f930:	6802      	ldr	r2, [r0, #0]
 800f932:	9301      	str	r3, [sp, #4]
 800f934:	4682      	mov	sl, r0
 800f936:	f846 5c04 	str.w	r5, [r6, #-4]
 800f93a:	46b9      	mov	r9, r7
 800f93c:	463c      	mov	r4, r7
 800f93e:	9502      	str	r5, [sp, #8]
 800f940:	46ab      	mov	fp, r5
 800f942:	7851      	ldrb	r1, [r2, #1]
 800f944:	1c53      	adds	r3, r2, #1
 800f946:	9303      	str	r3, [sp, #12]
 800f948:	b341      	cbz	r1, 800f99c <__hexnan+0x88>
 800f94a:	4608      	mov	r0, r1
 800f94c:	9205      	str	r2, [sp, #20]
 800f94e:	9104      	str	r1, [sp, #16]
 800f950:	f7ff fd5e 	bl	800f410 <__hexdig_fun>
 800f954:	2800      	cmp	r0, #0
 800f956:	d14f      	bne.n	800f9f8 <__hexnan+0xe4>
 800f958:	9904      	ldr	r1, [sp, #16]
 800f95a:	9a05      	ldr	r2, [sp, #20]
 800f95c:	2920      	cmp	r1, #32
 800f95e:	d818      	bhi.n	800f992 <__hexnan+0x7e>
 800f960:	9b02      	ldr	r3, [sp, #8]
 800f962:	459b      	cmp	fp, r3
 800f964:	dd13      	ble.n	800f98e <__hexnan+0x7a>
 800f966:	454c      	cmp	r4, r9
 800f968:	d206      	bcs.n	800f978 <__hexnan+0x64>
 800f96a:	2d07      	cmp	r5, #7
 800f96c:	dc04      	bgt.n	800f978 <__hexnan+0x64>
 800f96e:	462a      	mov	r2, r5
 800f970:	4649      	mov	r1, r9
 800f972:	4620      	mov	r0, r4
 800f974:	f7ff ffa8 	bl	800f8c8 <L_shift>
 800f978:	4544      	cmp	r4, r8
 800f97a:	d950      	bls.n	800fa1e <__hexnan+0x10a>
 800f97c:	2300      	movs	r3, #0
 800f97e:	f1a4 0904 	sub.w	r9, r4, #4
 800f982:	f844 3c04 	str.w	r3, [r4, #-4]
 800f986:	f8cd b008 	str.w	fp, [sp, #8]
 800f98a:	464c      	mov	r4, r9
 800f98c:	461d      	mov	r5, r3
 800f98e:	9a03      	ldr	r2, [sp, #12]
 800f990:	e7d7      	b.n	800f942 <__hexnan+0x2e>
 800f992:	2929      	cmp	r1, #41	; 0x29
 800f994:	d156      	bne.n	800fa44 <__hexnan+0x130>
 800f996:	3202      	adds	r2, #2
 800f998:	f8ca 2000 	str.w	r2, [sl]
 800f99c:	f1bb 0f00 	cmp.w	fp, #0
 800f9a0:	d050      	beq.n	800fa44 <__hexnan+0x130>
 800f9a2:	454c      	cmp	r4, r9
 800f9a4:	d206      	bcs.n	800f9b4 <__hexnan+0xa0>
 800f9a6:	2d07      	cmp	r5, #7
 800f9a8:	dc04      	bgt.n	800f9b4 <__hexnan+0xa0>
 800f9aa:	462a      	mov	r2, r5
 800f9ac:	4649      	mov	r1, r9
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	f7ff ff8a 	bl	800f8c8 <L_shift>
 800f9b4:	4544      	cmp	r4, r8
 800f9b6:	d934      	bls.n	800fa22 <__hexnan+0x10e>
 800f9b8:	f1a8 0204 	sub.w	r2, r8, #4
 800f9bc:	4623      	mov	r3, r4
 800f9be:	f853 1b04 	ldr.w	r1, [r3], #4
 800f9c2:	f842 1f04 	str.w	r1, [r2, #4]!
 800f9c6:	429f      	cmp	r7, r3
 800f9c8:	d2f9      	bcs.n	800f9be <__hexnan+0xaa>
 800f9ca:	1b3b      	subs	r3, r7, r4
 800f9cc:	f023 0303 	bic.w	r3, r3, #3
 800f9d0:	3304      	adds	r3, #4
 800f9d2:	3401      	adds	r4, #1
 800f9d4:	3e03      	subs	r6, #3
 800f9d6:	42b4      	cmp	r4, r6
 800f9d8:	bf88      	it	hi
 800f9da:	2304      	movhi	r3, #4
 800f9dc:	4443      	add	r3, r8
 800f9de:	2200      	movs	r2, #0
 800f9e0:	f843 2b04 	str.w	r2, [r3], #4
 800f9e4:	429f      	cmp	r7, r3
 800f9e6:	d2fb      	bcs.n	800f9e0 <__hexnan+0xcc>
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	b91b      	cbnz	r3, 800f9f4 <__hexnan+0xe0>
 800f9ec:	4547      	cmp	r7, r8
 800f9ee:	d127      	bne.n	800fa40 <__hexnan+0x12c>
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	603b      	str	r3, [r7, #0]
 800f9f4:	2005      	movs	r0, #5
 800f9f6:	e026      	b.n	800fa46 <__hexnan+0x132>
 800f9f8:	3501      	adds	r5, #1
 800f9fa:	2d08      	cmp	r5, #8
 800f9fc:	f10b 0b01 	add.w	fp, fp, #1
 800fa00:	dd06      	ble.n	800fa10 <__hexnan+0xfc>
 800fa02:	4544      	cmp	r4, r8
 800fa04:	d9c3      	bls.n	800f98e <__hexnan+0x7a>
 800fa06:	2300      	movs	r3, #0
 800fa08:	f844 3c04 	str.w	r3, [r4, #-4]
 800fa0c:	2501      	movs	r5, #1
 800fa0e:	3c04      	subs	r4, #4
 800fa10:	6822      	ldr	r2, [r4, #0]
 800fa12:	f000 000f 	and.w	r0, r0, #15
 800fa16:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800fa1a:	6022      	str	r2, [r4, #0]
 800fa1c:	e7b7      	b.n	800f98e <__hexnan+0x7a>
 800fa1e:	2508      	movs	r5, #8
 800fa20:	e7b5      	b.n	800f98e <__hexnan+0x7a>
 800fa22:	9b01      	ldr	r3, [sp, #4]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d0df      	beq.n	800f9e8 <__hexnan+0xd4>
 800fa28:	f04f 32ff 	mov.w	r2, #4294967295
 800fa2c:	f1c3 0320 	rsb	r3, r3, #32
 800fa30:	fa22 f303 	lsr.w	r3, r2, r3
 800fa34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fa38:	401a      	ands	r2, r3
 800fa3a:	f846 2c04 	str.w	r2, [r6, #-4]
 800fa3e:	e7d3      	b.n	800f9e8 <__hexnan+0xd4>
 800fa40:	3f04      	subs	r7, #4
 800fa42:	e7d1      	b.n	800f9e8 <__hexnan+0xd4>
 800fa44:	2004      	movs	r0, #4
 800fa46:	b007      	add	sp, #28
 800fa48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fa4c <_localeconv_r>:
 800fa4c:	4800      	ldr	r0, [pc, #0]	; (800fa50 <_localeconv_r+0x4>)
 800fa4e:	4770      	bx	lr
 800fa50:	2000017c 	.word	0x2000017c

0800fa54 <__ascii_mbtowc>:
 800fa54:	b082      	sub	sp, #8
 800fa56:	b901      	cbnz	r1, 800fa5a <__ascii_mbtowc+0x6>
 800fa58:	a901      	add	r1, sp, #4
 800fa5a:	b142      	cbz	r2, 800fa6e <__ascii_mbtowc+0x1a>
 800fa5c:	b14b      	cbz	r3, 800fa72 <__ascii_mbtowc+0x1e>
 800fa5e:	7813      	ldrb	r3, [r2, #0]
 800fa60:	600b      	str	r3, [r1, #0]
 800fa62:	7812      	ldrb	r2, [r2, #0]
 800fa64:	1e10      	subs	r0, r2, #0
 800fa66:	bf18      	it	ne
 800fa68:	2001      	movne	r0, #1
 800fa6a:	b002      	add	sp, #8
 800fa6c:	4770      	bx	lr
 800fa6e:	4610      	mov	r0, r2
 800fa70:	e7fb      	b.n	800fa6a <__ascii_mbtowc+0x16>
 800fa72:	f06f 0001 	mvn.w	r0, #1
 800fa76:	e7f8      	b.n	800fa6a <__ascii_mbtowc+0x16>

0800fa78 <__malloc_lock>:
 800fa78:	4801      	ldr	r0, [pc, #4]	; (800fa80 <__malloc_lock+0x8>)
 800fa7a:	f000 be84 	b.w	8010786 <__retarget_lock_acquire_recursive>
 800fa7e:	bf00      	nop
 800fa80:	20002b28 	.word	0x20002b28

0800fa84 <__malloc_unlock>:
 800fa84:	4801      	ldr	r0, [pc, #4]	; (800fa8c <__malloc_unlock+0x8>)
 800fa86:	f000 be7f 	b.w	8010788 <__retarget_lock_release_recursive>
 800fa8a:	bf00      	nop
 800fa8c:	20002b28 	.word	0x20002b28

0800fa90 <_Balloc>:
 800fa90:	b570      	push	{r4, r5, r6, lr}
 800fa92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fa94:	4604      	mov	r4, r0
 800fa96:	460d      	mov	r5, r1
 800fa98:	b976      	cbnz	r6, 800fab8 <_Balloc+0x28>
 800fa9a:	2010      	movs	r0, #16
 800fa9c:	f7fd fa08 	bl	800ceb0 <malloc>
 800faa0:	4602      	mov	r2, r0
 800faa2:	6260      	str	r0, [r4, #36]	; 0x24
 800faa4:	b920      	cbnz	r0, 800fab0 <_Balloc+0x20>
 800faa6:	4b18      	ldr	r3, [pc, #96]	; (800fb08 <_Balloc+0x78>)
 800faa8:	4818      	ldr	r0, [pc, #96]	; (800fb0c <_Balloc+0x7c>)
 800faaa:	2166      	movs	r1, #102	; 0x66
 800faac:	f000 fe3a 	bl	8010724 <__assert_func>
 800fab0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fab4:	6006      	str	r6, [r0, #0]
 800fab6:	60c6      	str	r6, [r0, #12]
 800fab8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800faba:	68f3      	ldr	r3, [r6, #12]
 800fabc:	b183      	cbz	r3, 800fae0 <_Balloc+0x50>
 800fabe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fac0:	68db      	ldr	r3, [r3, #12]
 800fac2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fac6:	b9b8      	cbnz	r0, 800faf8 <_Balloc+0x68>
 800fac8:	2101      	movs	r1, #1
 800faca:	fa01 f605 	lsl.w	r6, r1, r5
 800face:	1d72      	adds	r2, r6, #5
 800fad0:	0092      	lsls	r2, r2, #2
 800fad2:	4620      	mov	r0, r4
 800fad4:	f000 fc9d 	bl	8010412 <_calloc_r>
 800fad8:	b160      	cbz	r0, 800faf4 <_Balloc+0x64>
 800fada:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fade:	e00e      	b.n	800fafe <_Balloc+0x6e>
 800fae0:	2221      	movs	r2, #33	; 0x21
 800fae2:	2104      	movs	r1, #4
 800fae4:	4620      	mov	r0, r4
 800fae6:	f000 fc94 	bl	8010412 <_calloc_r>
 800faea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800faec:	60f0      	str	r0, [r6, #12]
 800faee:	68db      	ldr	r3, [r3, #12]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d1e4      	bne.n	800fabe <_Balloc+0x2e>
 800faf4:	2000      	movs	r0, #0
 800faf6:	bd70      	pop	{r4, r5, r6, pc}
 800faf8:	6802      	ldr	r2, [r0, #0]
 800fafa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fafe:	2300      	movs	r3, #0
 800fb00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fb04:	e7f7      	b.n	800faf6 <_Balloc+0x66>
 800fb06:	bf00      	nop
 800fb08:	08011885 	.word	0x08011885
 800fb0c:	08011984 	.word	0x08011984

0800fb10 <_Bfree>:
 800fb10:	b570      	push	{r4, r5, r6, lr}
 800fb12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fb14:	4605      	mov	r5, r0
 800fb16:	460c      	mov	r4, r1
 800fb18:	b976      	cbnz	r6, 800fb38 <_Bfree+0x28>
 800fb1a:	2010      	movs	r0, #16
 800fb1c:	f7fd f9c8 	bl	800ceb0 <malloc>
 800fb20:	4602      	mov	r2, r0
 800fb22:	6268      	str	r0, [r5, #36]	; 0x24
 800fb24:	b920      	cbnz	r0, 800fb30 <_Bfree+0x20>
 800fb26:	4b09      	ldr	r3, [pc, #36]	; (800fb4c <_Bfree+0x3c>)
 800fb28:	4809      	ldr	r0, [pc, #36]	; (800fb50 <_Bfree+0x40>)
 800fb2a:	218a      	movs	r1, #138	; 0x8a
 800fb2c:	f000 fdfa 	bl	8010724 <__assert_func>
 800fb30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb34:	6006      	str	r6, [r0, #0]
 800fb36:	60c6      	str	r6, [r0, #12]
 800fb38:	b13c      	cbz	r4, 800fb4a <_Bfree+0x3a>
 800fb3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fb3c:	6862      	ldr	r2, [r4, #4]
 800fb3e:	68db      	ldr	r3, [r3, #12]
 800fb40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fb44:	6021      	str	r1, [r4, #0]
 800fb46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fb4a:	bd70      	pop	{r4, r5, r6, pc}
 800fb4c:	08011885 	.word	0x08011885
 800fb50:	08011984 	.word	0x08011984

0800fb54 <__multadd>:
 800fb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb58:	690d      	ldr	r5, [r1, #16]
 800fb5a:	4607      	mov	r7, r0
 800fb5c:	460c      	mov	r4, r1
 800fb5e:	461e      	mov	r6, r3
 800fb60:	f101 0c14 	add.w	ip, r1, #20
 800fb64:	2000      	movs	r0, #0
 800fb66:	f8dc 3000 	ldr.w	r3, [ip]
 800fb6a:	b299      	uxth	r1, r3
 800fb6c:	fb02 6101 	mla	r1, r2, r1, r6
 800fb70:	0c1e      	lsrs	r6, r3, #16
 800fb72:	0c0b      	lsrs	r3, r1, #16
 800fb74:	fb02 3306 	mla	r3, r2, r6, r3
 800fb78:	b289      	uxth	r1, r1
 800fb7a:	3001      	adds	r0, #1
 800fb7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fb80:	4285      	cmp	r5, r0
 800fb82:	f84c 1b04 	str.w	r1, [ip], #4
 800fb86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fb8a:	dcec      	bgt.n	800fb66 <__multadd+0x12>
 800fb8c:	b30e      	cbz	r6, 800fbd2 <__multadd+0x7e>
 800fb8e:	68a3      	ldr	r3, [r4, #8]
 800fb90:	42ab      	cmp	r3, r5
 800fb92:	dc19      	bgt.n	800fbc8 <__multadd+0x74>
 800fb94:	6861      	ldr	r1, [r4, #4]
 800fb96:	4638      	mov	r0, r7
 800fb98:	3101      	adds	r1, #1
 800fb9a:	f7ff ff79 	bl	800fa90 <_Balloc>
 800fb9e:	4680      	mov	r8, r0
 800fba0:	b928      	cbnz	r0, 800fbae <__multadd+0x5a>
 800fba2:	4602      	mov	r2, r0
 800fba4:	4b0c      	ldr	r3, [pc, #48]	; (800fbd8 <__multadd+0x84>)
 800fba6:	480d      	ldr	r0, [pc, #52]	; (800fbdc <__multadd+0x88>)
 800fba8:	21b5      	movs	r1, #181	; 0xb5
 800fbaa:	f000 fdbb 	bl	8010724 <__assert_func>
 800fbae:	6922      	ldr	r2, [r4, #16]
 800fbb0:	3202      	adds	r2, #2
 800fbb2:	f104 010c 	add.w	r1, r4, #12
 800fbb6:	0092      	lsls	r2, r2, #2
 800fbb8:	300c      	adds	r0, #12
 800fbba:	f7fd f989 	bl	800ced0 <memcpy>
 800fbbe:	4621      	mov	r1, r4
 800fbc0:	4638      	mov	r0, r7
 800fbc2:	f7ff ffa5 	bl	800fb10 <_Bfree>
 800fbc6:	4644      	mov	r4, r8
 800fbc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fbcc:	3501      	adds	r5, #1
 800fbce:	615e      	str	r6, [r3, #20]
 800fbd0:	6125      	str	r5, [r4, #16]
 800fbd2:	4620      	mov	r0, r4
 800fbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbd8:	080118f7 	.word	0x080118f7
 800fbdc:	08011984 	.word	0x08011984

0800fbe0 <__s2b>:
 800fbe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbe4:	460c      	mov	r4, r1
 800fbe6:	4615      	mov	r5, r2
 800fbe8:	461f      	mov	r7, r3
 800fbea:	2209      	movs	r2, #9
 800fbec:	3308      	adds	r3, #8
 800fbee:	4606      	mov	r6, r0
 800fbf0:	fb93 f3f2 	sdiv	r3, r3, r2
 800fbf4:	2100      	movs	r1, #0
 800fbf6:	2201      	movs	r2, #1
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	db09      	blt.n	800fc10 <__s2b+0x30>
 800fbfc:	4630      	mov	r0, r6
 800fbfe:	f7ff ff47 	bl	800fa90 <_Balloc>
 800fc02:	b940      	cbnz	r0, 800fc16 <__s2b+0x36>
 800fc04:	4602      	mov	r2, r0
 800fc06:	4b19      	ldr	r3, [pc, #100]	; (800fc6c <__s2b+0x8c>)
 800fc08:	4819      	ldr	r0, [pc, #100]	; (800fc70 <__s2b+0x90>)
 800fc0a:	21ce      	movs	r1, #206	; 0xce
 800fc0c:	f000 fd8a 	bl	8010724 <__assert_func>
 800fc10:	0052      	lsls	r2, r2, #1
 800fc12:	3101      	adds	r1, #1
 800fc14:	e7f0      	b.n	800fbf8 <__s2b+0x18>
 800fc16:	9b08      	ldr	r3, [sp, #32]
 800fc18:	6143      	str	r3, [r0, #20]
 800fc1a:	2d09      	cmp	r5, #9
 800fc1c:	f04f 0301 	mov.w	r3, #1
 800fc20:	6103      	str	r3, [r0, #16]
 800fc22:	dd16      	ble.n	800fc52 <__s2b+0x72>
 800fc24:	f104 0909 	add.w	r9, r4, #9
 800fc28:	46c8      	mov	r8, r9
 800fc2a:	442c      	add	r4, r5
 800fc2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fc30:	4601      	mov	r1, r0
 800fc32:	3b30      	subs	r3, #48	; 0x30
 800fc34:	220a      	movs	r2, #10
 800fc36:	4630      	mov	r0, r6
 800fc38:	f7ff ff8c 	bl	800fb54 <__multadd>
 800fc3c:	45a0      	cmp	r8, r4
 800fc3e:	d1f5      	bne.n	800fc2c <__s2b+0x4c>
 800fc40:	f1a5 0408 	sub.w	r4, r5, #8
 800fc44:	444c      	add	r4, r9
 800fc46:	1b2d      	subs	r5, r5, r4
 800fc48:	1963      	adds	r3, r4, r5
 800fc4a:	42bb      	cmp	r3, r7
 800fc4c:	db04      	blt.n	800fc58 <__s2b+0x78>
 800fc4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc52:	340a      	adds	r4, #10
 800fc54:	2509      	movs	r5, #9
 800fc56:	e7f6      	b.n	800fc46 <__s2b+0x66>
 800fc58:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fc5c:	4601      	mov	r1, r0
 800fc5e:	3b30      	subs	r3, #48	; 0x30
 800fc60:	220a      	movs	r2, #10
 800fc62:	4630      	mov	r0, r6
 800fc64:	f7ff ff76 	bl	800fb54 <__multadd>
 800fc68:	e7ee      	b.n	800fc48 <__s2b+0x68>
 800fc6a:	bf00      	nop
 800fc6c:	080118f7 	.word	0x080118f7
 800fc70:	08011984 	.word	0x08011984

0800fc74 <__hi0bits>:
 800fc74:	0c03      	lsrs	r3, r0, #16
 800fc76:	041b      	lsls	r3, r3, #16
 800fc78:	b9d3      	cbnz	r3, 800fcb0 <__hi0bits+0x3c>
 800fc7a:	0400      	lsls	r0, r0, #16
 800fc7c:	2310      	movs	r3, #16
 800fc7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fc82:	bf04      	itt	eq
 800fc84:	0200      	lsleq	r0, r0, #8
 800fc86:	3308      	addeq	r3, #8
 800fc88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fc8c:	bf04      	itt	eq
 800fc8e:	0100      	lsleq	r0, r0, #4
 800fc90:	3304      	addeq	r3, #4
 800fc92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fc96:	bf04      	itt	eq
 800fc98:	0080      	lsleq	r0, r0, #2
 800fc9a:	3302      	addeq	r3, #2
 800fc9c:	2800      	cmp	r0, #0
 800fc9e:	db05      	blt.n	800fcac <__hi0bits+0x38>
 800fca0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fca4:	f103 0301 	add.w	r3, r3, #1
 800fca8:	bf08      	it	eq
 800fcaa:	2320      	moveq	r3, #32
 800fcac:	4618      	mov	r0, r3
 800fcae:	4770      	bx	lr
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	e7e4      	b.n	800fc7e <__hi0bits+0xa>

0800fcb4 <__lo0bits>:
 800fcb4:	6803      	ldr	r3, [r0, #0]
 800fcb6:	f013 0207 	ands.w	r2, r3, #7
 800fcba:	4601      	mov	r1, r0
 800fcbc:	d00b      	beq.n	800fcd6 <__lo0bits+0x22>
 800fcbe:	07da      	lsls	r2, r3, #31
 800fcc0:	d423      	bmi.n	800fd0a <__lo0bits+0x56>
 800fcc2:	0798      	lsls	r0, r3, #30
 800fcc4:	bf49      	itett	mi
 800fcc6:	085b      	lsrmi	r3, r3, #1
 800fcc8:	089b      	lsrpl	r3, r3, #2
 800fcca:	2001      	movmi	r0, #1
 800fccc:	600b      	strmi	r3, [r1, #0]
 800fcce:	bf5c      	itt	pl
 800fcd0:	600b      	strpl	r3, [r1, #0]
 800fcd2:	2002      	movpl	r0, #2
 800fcd4:	4770      	bx	lr
 800fcd6:	b298      	uxth	r0, r3
 800fcd8:	b9a8      	cbnz	r0, 800fd06 <__lo0bits+0x52>
 800fcda:	0c1b      	lsrs	r3, r3, #16
 800fcdc:	2010      	movs	r0, #16
 800fcde:	b2da      	uxtb	r2, r3
 800fce0:	b90a      	cbnz	r2, 800fce6 <__lo0bits+0x32>
 800fce2:	3008      	adds	r0, #8
 800fce4:	0a1b      	lsrs	r3, r3, #8
 800fce6:	071a      	lsls	r2, r3, #28
 800fce8:	bf04      	itt	eq
 800fcea:	091b      	lsreq	r3, r3, #4
 800fcec:	3004      	addeq	r0, #4
 800fcee:	079a      	lsls	r2, r3, #30
 800fcf0:	bf04      	itt	eq
 800fcf2:	089b      	lsreq	r3, r3, #2
 800fcf4:	3002      	addeq	r0, #2
 800fcf6:	07da      	lsls	r2, r3, #31
 800fcf8:	d403      	bmi.n	800fd02 <__lo0bits+0x4e>
 800fcfa:	085b      	lsrs	r3, r3, #1
 800fcfc:	f100 0001 	add.w	r0, r0, #1
 800fd00:	d005      	beq.n	800fd0e <__lo0bits+0x5a>
 800fd02:	600b      	str	r3, [r1, #0]
 800fd04:	4770      	bx	lr
 800fd06:	4610      	mov	r0, r2
 800fd08:	e7e9      	b.n	800fcde <__lo0bits+0x2a>
 800fd0a:	2000      	movs	r0, #0
 800fd0c:	4770      	bx	lr
 800fd0e:	2020      	movs	r0, #32
 800fd10:	4770      	bx	lr
	...

0800fd14 <__i2b>:
 800fd14:	b510      	push	{r4, lr}
 800fd16:	460c      	mov	r4, r1
 800fd18:	2101      	movs	r1, #1
 800fd1a:	f7ff feb9 	bl	800fa90 <_Balloc>
 800fd1e:	4602      	mov	r2, r0
 800fd20:	b928      	cbnz	r0, 800fd2e <__i2b+0x1a>
 800fd22:	4b05      	ldr	r3, [pc, #20]	; (800fd38 <__i2b+0x24>)
 800fd24:	4805      	ldr	r0, [pc, #20]	; (800fd3c <__i2b+0x28>)
 800fd26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fd2a:	f000 fcfb 	bl	8010724 <__assert_func>
 800fd2e:	2301      	movs	r3, #1
 800fd30:	6144      	str	r4, [r0, #20]
 800fd32:	6103      	str	r3, [r0, #16]
 800fd34:	bd10      	pop	{r4, pc}
 800fd36:	bf00      	nop
 800fd38:	080118f7 	.word	0x080118f7
 800fd3c:	08011984 	.word	0x08011984

0800fd40 <__multiply>:
 800fd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd44:	4691      	mov	r9, r2
 800fd46:	690a      	ldr	r2, [r1, #16]
 800fd48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	bfb8      	it	lt
 800fd50:	460b      	movlt	r3, r1
 800fd52:	460c      	mov	r4, r1
 800fd54:	bfbc      	itt	lt
 800fd56:	464c      	movlt	r4, r9
 800fd58:	4699      	movlt	r9, r3
 800fd5a:	6927      	ldr	r7, [r4, #16]
 800fd5c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fd60:	68a3      	ldr	r3, [r4, #8]
 800fd62:	6861      	ldr	r1, [r4, #4]
 800fd64:	eb07 060a 	add.w	r6, r7, sl
 800fd68:	42b3      	cmp	r3, r6
 800fd6a:	b085      	sub	sp, #20
 800fd6c:	bfb8      	it	lt
 800fd6e:	3101      	addlt	r1, #1
 800fd70:	f7ff fe8e 	bl	800fa90 <_Balloc>
 800fd74:	b930      	cbnz	r0, 800fd84 <__multiply+0x44>
 800fd76:	4602      	mov	r2, r0
 800fd78:	4b44      	ldr	r3, [pc, #272]	; (800fe8c <__multiply+0x14c>)
 800fd7a:	4845      	ldr	r0, [pc, #276]	; (800fe90 <__multiply+0x150>)
 800fd7c:	f240 115d 	movw	r1, #349	; 0x15d
 800fd80:	f000 fcd0 	bl	8010724 <__assert_func>
 800fd84:	f100 0514 	add.w	r5, r0, #20
 800fd88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fd8c:	462b      	mov	r3, r5
 800fd8e:	2200      	movs	r2, #0
 800fd90:	4543      	cmp	r3, r8
 800fd92:	d321      	bcc.n	800fdd8 <__multiply+0x98>
 800fd94:	f104 0314 	add.w	r3, r4, #20
 800fd98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fd9c:	f109 0314 	add.w	r3, r9, #20
 800fda0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fda4:	9202      	str	r2, [sp, #8]
 800fda6:	1b3a      	subs	r2, r7, r4
 800fda8:	3a15      	subs	r2, #21
 800fdaa:	f022 0203 	bic.w	r2, r2, #3
 800fdae:	3204      	adds	r2, #4
 800fdb0:	f104 0115 	add.w	r1, r4, #21
 800fdb4:	428f      	cmp	r7, r1
 800fdb6:	bf38      	it	cc
 800fdb8:	2204      	movcc	r2, #4
 800fdba:	9201      	str	r2, [sp, #4]
 800fdbc:	9a02      	ldr	r2, [sp, #8]
 800fdbe:	9303      	str	r3, [sp, #12]
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	d80c      	bhi.n	800fdde <__multiply+0x9e>
 800fdc4:	2e00      	cmp	r6, #0
 800fdc6:	dd03      	ble.n	800fdd0 <__multiply+0x90>
 800fdc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d05a      	beq.n	800fe86 <__multiply+0x146>
 800fdd0:	6106      	str	r6, [r0, #16]
 800fdd2:	b005      	add	sp, #20
 800fdd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdd8:	f843 2b04 	str.w	r2, [r3], #4
 800fddc:	e7d8      	b.n	800fd90 <__multiply+0x50>
 800fdde:	f8b3 a000 	ldrh.w	sl, [r3]
 800fde2:	f1ba 0f00 	cmp.w	sl, #0
 800fde6:	d024      	beq.n	800fe32 <__multiply+0xf2>
 800fde8:	f104 0e14 	add.w	lr, r4, #20
 800fdec:	46a9      	mov	r9, r5
 800fdee:	f04f 0c00 	mov.w	ip, #0
 800fdf2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fdf6:	f8d9 1000 	ldr.w	r1, [r9]
 800fdfa:	fa1f fb82 	uxth.w	fp, r2
 800fdfe:	b289      	uxth	r1, r1
 800fe00:	fb0a 110b 	mla	r1, sl, fp, r1
 800fe04:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fe08:	f8d9 2000 	ldr.w	r2, [r9]
 800fe0c:	4461      	add	r1, ip
 800fe0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fe12:	fb0a c20b 	mla	r2, sl, fp, ip
 800fe16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fe1a:	b289      	uxth	r1, r1
 800fe1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fe20:	4577      	cmp	r7, lr
 800fe22:	f849 1b04 	str.w	r1, [r9], #4
 800fe26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fe2a:	d8e2      	bhi.n	800fdf2 <__multiply+0xb2>
 800fe2c:	9a01      	ldr	r2, [sp, #4]
 800fe2e:	f845 c002 	str.w	ip, [r5, r2]
 800fe32:	9a03      	ldr	r2, [sp, #12]
 800fe34:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fe38:	3304      	adds	r3, #4
 800fe3a:	f1b9 0f00 	cmp.w	r9, #0
 800fe3e:	d020      	beq.n	800fe82 <__multiply+0x142>
 800fe40:	6829      	ldr	r1, [r5, #0]
 800fe42:	f104 0c14 	add.w	ip, r4, #20
 800fe46:	46ae      	mov	lr, r5
 800fe48:	f04f 0a00 	mov.w	sl, #0
 800fe4c:	f8bc b000 	ldrh.w	fp, [ip]
 800fe50:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fe54:	fb09 220b 	mla	r2, r9, fp, r2
 800fe58:	4492      	add	sl, r2
 800fe5a:	b289      	uxth	r1, r1
 800fe5c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fe60:	f84e 1b04 	str.w	r1, [lr], #4
 800fe64:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fe68:	f8be 1000 	ldrh.w	r1, [lr]
 800fe6c:	0c12      	lsrs	r2, r2, #16
 800fe6e:	fb09 1102 	mla	r1, r9, r2, r1
 800fe72:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fe76:	4567      	cmp	r7, ip
 800fe78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fe7c:	d8e6      	bhi.n	800fe4c <__multiply+0x10c>
 800fe7e:	9a01      	ldr	r2, [sp, #4]
 800fe80:	50a9      	str	r1, [r5, r2]
 800fe82:	3504      	adds	r5, #4
 800fe84:	e79a      	b.n	800fdbc <__multiply+0x7c>
 800fe86:	3e01      	subs	r6, #1
 800fe88:	e79c      	b.n	800fdc4 <__multiply+0x84>
 800fe8a:	bf00      	nop
 800fe8c:	080118f7 	.word	0x080118f7
 800fe90:	08011984 	.word	0x08011984

0800fe94 <__pow5mult>:
 800fe94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe98:	4615      	mov	r5, r2
 800fe9a:	f012 0203 	ands.w	r2, r2, #3
 800fe9e:	4606      	mov	r6, r0
 800fea0:	460f      	mov	r7, r1
 800fea2:	d007      	beq.n	800feb4 <__pow5mult+0x20>
 800fea4:	4c25      	ldr	r4, [pc, #148]	; (800ff3c <__pow5mult+0xa8>)
 800fea6:	3a01      	subs	r2, #1
 800fea8:	2300      	movs	r3, #0
 800feaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800feae:	f7ff fe51 	bl	800fb54 <__multadd>
 800feb2:	4607      	mov	r7, r0
 800feb4:	10ad      	asrs	r5, r5, #2
 800feb6:	d03d      	beq.n	800ff34 <__pow5mult+0xa0>
 800feb8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800feba:	b97c      	cbnz	r4, 800fedc <__pow5mult+0x48>
 800febc:	2010      	movs	r0, #16
 800febe:	f7fc fff7 	bl	800ceb0 <malloc>
 800fec2:	4602      	mov	r2, r0
 800fec4:	6270      	str	r0, [r6, #36]	; 0x24
 800fec6:	b928      	cbnz	r0, 800fed4 <__pow5mult+0x40>
 800fec8:	4b1d      	ldr	r3, [pc, #116]	; (800ff40 <__pow5mult+0xac>)
 800feca:	481e      	ldr	r0, [pc, #120]	; (800ff44 <__pow5mult+0xb0>)
 800fecc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fed0:	f000 fc28 	bl	8010724 <__assert_func>
 800fed4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fed8:	6004      	str	r4, [r0, #0]
 800feda:	60c4      	str	r4, [r0, #12]
 800fedc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fee0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fee4:	b94c      	cbnz	r4, 800fefa <__pow5mult+0x66>
 800fee6:	f240 2171 	movw	r1, #625	; 0x271
 800feea:	4630      	mov	r0, r6
 800feec:	f7ff ff12 	bl	800fd14 <__i2b>
 800fef0:	2300      	movs	r3, #0
 800fef2:	f8c8 0008 	str.w	r0, [r8, #8]
 800fef6:	4604      	mov	r4, r0
 800fef8:	6003      	str	r3, [r0, #0]
 800fefa:	f04f 0900 	mov.w	r9, #0
 800fefe:	07eb      	lsls	r3, r5, #31
 800ff00:	d50a      	bpl.n	800ff18 <__pow5mult+0x84>
 800ff02:	4639      	mov	r1, r7
 800ff04:	4622      	mov	r2, r4
 800ff06:	4630      	mov	r0, r6
 800ff08:	f7ff ff1a 	bl	800fd40 <__multiply>
 800ff0c:	4639      	mov	r1, r7
 800ff0e:	4680      	mov	r8, r0
 800ff10:	4630      	mov	r0, r6
 800ff12:	f7ff fdfd 	bl	800fb10 <_Bfree>
 800ff16:	4647      	mov	r7, r8
 800ff18:	106d      	asrs	r5, r5, #1
 800ff1a:	d00b      	beq.n	800ff34 <__pow5mult+0xa0>
 800ff1c:	6820      	ldr	r0, [r4, #0]
 800ff1e:	b938      	cbnz	r0, 800ff30 <__pow5mult+0x9c>
 800ff20:	4622      	mov	r2, r4
 800ff22:	4621      	mov	r1, r4
 800ff24:	4630      	mov	r0, r6
 800ff26:	f7ff ff0b 	bl	800fd40 <__multiply>
 800ff2a:	6020      	str	r0, [r4, #0]
 800ff2c:	f8c0 9000 	str.w	r9, [r0]
 800ff30:	4604      	mov	r4, r0
 800ff32:	e7e4      	b.n	800fefe <__pow5mult+0x6a>
 800ff34:	4638      	mov	r0, r7
 800ff36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff3a:	bf00      	nop
 800ff3c:	08011ad0 	.word	0x08011ad0
 800ff40:	08011885 	.word	0x08011885
 800ff44:	08011984 	.word	0x08011984

0800ff48 <__lshift>:
 800ff48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff4c:	460c      	mov	r4, r1
 800ff4e:	6849      	ldr	r1, [r1, #4]
 800ff50:	6923      	ldr	r3, [r4, #16]
 800ff52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ff56:	68a3      	ldr	r3, [r4, #8]
 800ff58:	4607      	mov	r7, r0
 800ff5a:	4691      	mov	r9, r2
 800ff5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ff60:	f108 0601 	add.w	r6, r8, #1
 800ff64:	42b3      	cmp	r3, r6
 800ff66:	db0b      	blt.n	800ff80 <__lshift+0x38>
 800ff68:	4638      	mov	r0, r7
 800ff6a:	f7ff fd91 	bl	800fa90 <_Balloc>
 800ff6e:	4605      	mov	r5, r0
 800ff70:	b948      	cbnz	r0, 800ff86 <__lshift+0x3e>
 800ff72:	4602      	mov	r2, r0
 800ff74:	4b2a      	ldr	r3, [pc, #168]	; (8010020 <__lshift+0xd8>)
 800ff76:	482b      	ldr	r0, [pc, #172]	; (8010024 <__lshift+0xdc>)
 800ff78:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ff7c:	f000 fbd2 	bl	8010724 <__assert_func>
 800ff80:	3101      	adds	r1, #1
 800ff82:	005b      	lsls	r3, r3, #1
 800ff84:	e7ee      	b.n	800ff64 <__lshift+0x1c>
 800ff86:	2300      	movs	r3, #0
 800ff88:	f100 0114 	add.w	r1, r0, #20
 800ff8c:	f100 0210 	add.w	r2, r0, #16
 800ff90:	4618      	mov	r0, r3
 800ff92:	4553      	cmp	r3, sl
 800ff94:	db37      	blt.n	8010006 <__lshift+0xbe>
 800ff96:	6920      	ldr	r0, [r4, #16]
 800ff98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ff9c:	f104 0314 	add.w	r3, r4, #20
 800ffa0:	f019 091f 	ands.w	r9, r9, #31
 800ffa4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ffa8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ffac:	d02f      	beq.n	801000e <__lshift+0xc6>
 800ffae:	f1c9 0e20 	rsb	lr, r9, #32
 800ffb2:	468a      	mov	sl, r1
 800ffb4:	f04f 0c00 	mov.w	ip, #0
 800ffb8:	681a      	ldr	r2, [r3, #0]
 800ffba:	fa02 f209 	lsl.w	r2, r2, r9
 800ffbe:	ea42 020c 	orr.w	r2, r2, ip
 800ffc2:	f84a 2b04 	str.w	r2, [sl], #4
 800ffc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffca:	4298      	cmp	r0, r3
 800ffcc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ffd0:	d8f2      	bhi.n	800ffb8 <__lshift+0x70>
 800ffd2:	1b03      	subs	r3, r0, r4
 800ffd4:	3b15      	subs	r3, #21
 800ffd6:	f023 0303 	bic.w	r3, r3, #3
 800ffda:	3304      	adds	r3, #4
 800ffdc:	f104 0215 	add.w	r2, r4, #21
 800ffe0:	4290      	cmp	r0, r2
 800ffe2:	bf38      	it	cc
 800ffe4:	2304      	movcc	r3, #4
 800ffe6:	f841 c003 	str.w	ip, [r1, r3]
 800ffea:	f1bc 0f00 	cmp.w	ip, #0
 800ffee:	d001      	beq.n	800fff4 <__lshift+0xac>
 800fff0:	f108 0602 	add.w	r6, r8, #2
 800fff4:	3e01      	subs	r6, #1
 800fff6:	4638      	mov	r0, r7
 800fff8:	612e      	str	r6, [r5, #16]
 800fffa:	4621      	mov	r1, r4
 800fffc:	f7ff fd88 	bl	800fb10 <_Bfree>
 8010000:	4628      	mov	r0, r5
 8010002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010006:	f842 0f04 	str.w	r0, [r2, #4]!
 801000a:	3301      	adds	r3, #1
 801000c:	e7c1      	b.n	800ff92 <__lshift+0x4a>
 801000e:	3904      	subs	r1, #4
 8010010:	f853 2b04 	ldr.w	r2, [r3], #4
 8010014:	f841 2f04 	str.w	r2, [r1, #4]!
 8010018:	4298      	cmp	r0, r3
 801001a:	d8f9      	bhi.n	8010010 <__lshift+0xc8>
 801001c:	e7ea      	b.n	800fff4 <__lshift+0xac>
 801001e:	bf00      	nop
 8010020:	080118f7 	.word	0x080118f7
 8010024:	08011984 	.word	0x08011984

08010028 <__mcmp>:
 8010028:	b530      	push	{r4, r5, lr}
 801002a:	6902      	ldr	r2, [r0, #16]
 801002c:	690c      	ldr	r4, [r1, #16]
 801002e:	1b12      	subs	r2, r2, r4
 8010030:	d10e      	bne.n	8010050 <__mcmp+0x28>
 8010032:	f100 0314 	add.w	r3, r0, #20
 8010036:	3114      	adds	r1, #20
 8010038:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801003c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010040:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010044:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010048:	42a5      	cmp	r5, r4
 801004a:	d003      	beq.n	8010054 <__mcmp+0x2c>
 801004c:	d305      	bcc.n	801005a <__mcmp+0x32>
 801004e:	2201      	movs	r2, #1
 8010050:	4610      	mov	r0, r2
 8010052:	bd30      	pop	{r4, r5, pc}
 8010054:	4283      	cmp	r3, r0
 8010056:	d3f3      	bcc.n	8010040 <__mcmp+0x18>
 8010058:	e7fa      	b.n	8010050 <__mcmp+0x28>
 801005a:	f04f 32ff 	mov.w	r2, #4294967295
 801005e:	e7f7      	b.n	8010050 <__mcmp+0x28>

08010060 <__mdiff>:
 8010060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010064:	460c      	mov	r4, r1
 8010066:	4606      	mov	r6, r0
 8010068:	4611      	mov	r1, r2
 801006a:	4620      	mov	r0, r4
 801006c:	4690      	mov	r8, r2
 801006e:	f7ff ffdb 	bl	8010028 <__mcmp>
 8010072:	1e05      	subs	r5, r0, #0
 8010074:	d110      	bne.n	8010098 <__mdiff+0x38>
 8010076:	4629      	mov	r1, r5
 8010078:	4630      	mov	r0, r6
 801007a:	f7ff fd09 	bl	800fa90 <_Balloc>
 801007e:	b930      	cbnz	r0, 801008e <__mdiff+0x2e>
 8010080:	4b3a      	ldr	r3, [pc, #232]	; (801016c <__mdiff+0x10c>)
 8010082:	4602      	mov	r2, r0
 8010084:	f240 2132 	movw	r1, #562	; 0x232
 8010088:	4839      	ldr	r0, [pc, #228]	; (8010170 <__mdiff+0x110>)
 801008a:	f000 fb4b 	bl	8010724 <__assert_func>
 801008e:	2301      	movs	r3, #1
 8010090:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010094:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010098:	bfa4      	itt	ge
 801009a:	4643      	movge	r3, r8
 801009c:	46a0      	movge	r8, r4
 801009e:	4630      	mov	r0, r6
 80100a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80100a4:	bfa6      	itte	ge
 80100a6:	461c      	movge	r4, r3
 80100a8:	2500      	movge	r5, #0
 80100aa:	2501      	movlt	r5, #1
 80100ac:	f7ff fcf0 	bl	800fa90 <_Balloc>
 80100b0:	b920      	cbnz	r0, 80100bc <__mdiff+0x5c>
 80100b2:	4b2e      	ldr	r3, [pc, #184]	; (801016c <__mdiff+0x10c>)
 80100b4:	4602      	mov	r2, r0
 80100b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80100ba:	e7e5      	b.n	8010088 <__mdiff+0x28>
 80100bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80100c0:	6926      	ldr	r6, [r4, #16]
 80100c2:	60c5      	str	r5, [r0, #12]
 80100c4:	f104 0914 	add.w	r9, r4, #20
 80100c8:	f108 0514 	add.w	r5, r8, #20
 80100cc:	f100 0e14 	add.w	lr, r0, #20
 80100d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80100d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80100d8:	f108 0210 	add.w	r2, r8, #16
 80100dc:	46f2      	mov	sl, lr
 80100de:	2100      	movs	r1, #0
 80100e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80100e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80100e8:	fa1f f883 	uxth.w	r8, r3
 80100ec:	fa11 f18b 	uxtah	r1, r1, fp
 80100f0:	0c1b      	lsrs	r3, r3, #16
 80100f2:	eba1 0808 	sub.w	r8, r1, r8
 80100f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80100fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80100fe:	fa1f f888 	uxth.w	r8, r8
 8010102:	1419      	asrs	r1, r3, #16
 8010104:	454e      	cmp	r6, r9
 8010106:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801010a:	f84a 3b04 	str.w	r3, [sl], #4
 801010e:	d8e7      	bhi.n	80100e0 <__mdiff+0x80>
 8010110:	1b33      	subs	r3, r6, r4
 8010112:	3b15      	subs	r3, #21
 8010114:	f023 0303 	bic.w	r3, r3, #3
 8010118:	3304      	adds	r3, #4
 801011a:	3415      	adds	r4, #21
 801011c:	42a6      	cmp	r6, r4
 801011e:	bf38      	it	cc
 8010120:	2304      	movcc	r3, #4
 8010122:	441d      	add	r5, r3
 8010124:	4473      	add	r3, lr
 8010126:	469e      	mov	lr, r3
 8010128:	462e      	mov	r6, r5
 801012a:	4566      	cmp	r6, ip
 801012c:	d30e      	bcc.n	801014c <__mdiff+0xec>
 801012e:	f10c 0203 	add.w	r2, ip, #3
 8010132:	1b52      	subs	r2, r2, r5
 8010134:	f022 0203 	bic.w	r2, r2, #3
 8010138:	3d03      	subs	r5, #3
 801013a:	45ac      	cmp	ip, r5
 801013c:	bf38      	it	cc
 801013e:	2200      	movcc	r2, #0
 8010140:	441a      	add	r2, r3
 8010142:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010146:	b17b      	cbz	r3, 8010168 <__mdiff+0x108>
 8010148:	6107      	str	r7, [r0, #16]
 801014a:	e7a3      	b.n	8010094 <__mdiff+0x34>
 801014c:	f856 8b04 	ldr.w	r8, [r6], #4
 8010150:	fa11 f288 	uxtah	r2, r1, r8
 8010154:	1414      	asrs	r4, r2, #16
 8010156:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801015a:	b292      	uxth	r2, r2
 801015c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010160:	f84e 2b04 	str.w	r2, [lr], #4
 8010164:	1421      	asrs	r1, r4, #16
 8010166:	e7e0      	b.n	801012a <__mdiff+0xca>
 8010168:	3f01      	subs	r7, #1
 801016a:	e7ea      	b.n	8010142 <__mdiff+0xe2>
 801016c:	080118f7 	.word	0x080118f7
 8010170:	08011984 	.word	0x08011984

08010174 <__ulp>:
 8010174:	b082      	sub	sp, #8
 8010176:	ed8d 0b00 	vstr	d0, [sp]
 801017a:	9b01      	ldr	r3, [sp, #4]
 801017c:	4912      	ldr	r1, [pc, #72]	; (80101c8 <__ulp+0x54>)
 801017e:	4019      	ands	r1, r3
 8010180:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010184:	2900      	cmp	r1, #0
 8010186:	dd05      	ble.n	8010194 <__ulp+0x20>
 8010188:	2200      	movs	r2, #0
 801018a:	460b      	mov	r3, r1
 801018c:	ec43 2b10 	vmov	d0, r2, r3
 8010190:	b002      	add	sp, #8
 8010192:	4770      	bx	lr
 8010194:	4249      	negs	r1, r1
 8010196:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801019a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801019e:	f04f 0200 	mov.w	r2, #0
 80101a2:	f04f 0300 	mov.w	r3, #0
 80101a6:	da04      	bge.n	80101b2 <__ulp+0x3e>
 80101a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80101ac:	fa41 f300 	asr.w	r3, r1, r0
 80101b0:	e7ec      	b.n	801018c <__ulp+0x18>
 80101b2:	f1a0 0114 	sub.w	r1, r0, #20
 80101b6:	291e      	cmp	r1, #30
 80101b8:	bfda      	itte	le
 80101ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80101be:	fa20 f101 	lsrle.w	r1, r0, r1
 80101c2:	2101      	movgt	r1, #1
 80101c4:	460a      	mov	r2, r1
 80101c6:	e7e1      	b.n	801018c <__ulp+0x18>
 80101c8:	7ff00000 	.word	0x7ff00000

080101cc <__b2d>:
 80101cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ce:	6905      	ldr	r5, [r0, #16]
 80101d0:	f100 0714 	add.w	r7, r0, #20
 80101d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80101d8:	1f2e      	subs	r6, r5, #4
 80101da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80101de:	4620      	mov	r0, r4
 80101e0:	f7ff fd48 	bl	800fc74 <__hi0bits>
 80101e4:	f1c0 0320 	rsb	r3, r0, #32
 80101e8:	280a      	cmp	r0, #10
 80101ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010268 <__b2d+0x9c>
 80101ee:	600b      	str	r3, [r1, #0]
 80101f0:	dc14      	bgt.n	801021c <__b2d+0x50>
 80101f2:	f1c0 0e0b 	rsb	lr, r0, #11
 80101f6:	fa24 f10e 	lsr.w	r1, r4, lr
 80101fa:	42b7      	cmp	r7, r6
 80101fc:	ea41 030c 	orr.w	r3, r1, ip
 8010200:	bf34      	ite	cc
 8010202:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010206:	2100      	movcs	r1, #0
 8010208:	3015      	adds	r0, #21
 801020a:	fa04 f000 	lsl.w	r0, r4, r0
 801020e:	fa21 f10e 	lsr.w	r1, r1, lr
 8010212:	ea40 0201 	orr.w	r2, r0, r1
 8010216:	ec43 2b10 	vmov	d0, r2, r3
 801021a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801021c:	42b7      	cmp	r7, r6
 801021e:	bf3a      	itte	cc
 8010220:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010224:	f1a5 0608 	subcc.w	r6, r5, #8
 8010228:	2100      	movcs	r1, #0
 801022a:	380b      	subs	r0, #11
 801022c:	d017      	beq.n	801025e <__b2d+0x92>
 801022e:	f1c0 0c20 	rsb	ip, r0, #32
 8010232:	fa04 f500 	lsl.w	r5, r4, r0
 8010236:	42be      	cmp	r6, r7
 8010238:	fa21 f40c 	lsr.w	r4, r1, ip
 801023c:	ea45 0504 	orr.w	r5, r5, r4
 8010240:	bf8c      	ite	hi
 8010242:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010246:	2400      	movls	r4, #0
 8010248:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801024c:	fa01 f000 	lsl.w	r0, r1, r0
 8010250:	fa24 f40c 	lsr.w	r4, r4, ip
 8010254:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010258:	ea40 0204 	orr.w	r2, r0, r4
 801025c:	e7db      	b.n	8010216 <__b2d+0x4a>
 801025e:	ea44 030c 	orr.w	r3, r4, ip
 8010262:	460a      	mov	r2, r1
 8010264:	e7d7      	b.n	8010216 <__b2d+0x4a>
 8010266:	bf00      	nop
 8010268:	3ff00000 	.word	0x3ff00000

0801026c <__d2b>:
 801026c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010270:	4689      	mov	r9, r1
 8010272:	2101      	movs	r1, #1
 8010274:	ec57 6b10 	vmov	r6, r7, d0
 8010278:	4690      	mov	r8, r2
 801027a:	f7ff fc09 	bl	800fa90 <_Balloc>
 801027e:	4604      	mov	r4, r0
 8010280:	b930      	cbnz	r0, 8010290 <__d2b+0x24>
 8010282:	4602      	mov	r2, r0
 8010284:	4b25      	ldr	r3, [pc, #148]	; (801031c <__d2b+0xb0>)
 8010286:	4826      	ldr	r0, [pc, #152]	; (8010320 <__d2b+0xb4>)
 8010288:	f240 310a 	movw	r1, #778	; 0x30a
 801028c:	f000 fa4a 	bl	8010724 <__assert_func>
 8010290:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010294:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010298:	bb35      	cbnz	r5, 80102e8 <__d2b+0x7c>
 801029a:	2e00      	cmp	r6, #0
 801029c:	9301      	str	r3, [sp, #4]
 801029e:	d028      	beq.n	80102f2 <__d2b+0x86>
 80102a0:	4668      	mov	r0, sp
 80102a2:	9600      	str	r6, [sp, #0]
 80102a4:	f7ff fd06 	bl	800fcb4 <__lo0bits>
 80102a8:	9900      	ldr	r1, [sp, #0]
 80102aa:	b300      	cbz	r0, 80102ee <__d2b+0x82>
 80102ac:	9a01      	ldr	r2, [sp, #4]
 80102ae:	f1c0 0320 	rsb	r3, r0, #32
 80102b2:	fa02 f303 	lsl.w	r3, r2, r3
 80102b6:	430b      	orrs	r3, r1
 80102b8:	40c2      	lsrs	r2, r0
 80102ba:	6163      	str	r3, [r4, #20]
 80102bc:	9201      	str	r2, [sp, #4]
 80102be:	9b01      	ldr	r3, [sp, #4]
 80102c0:	61a3      	str	r3, [r4, #24]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	bf14      	ite	ne
 80102c6:	2202      	movne	r2, #2
 80102c8:	2201      	moveq	r2, #1
 80102ca:	6122      	str	r2, [r4, #16]
 80102cc:	b1d5      	cbz	r5, 8010304 <__d2b+0x98>
 80102ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80102d2:	4405      	add	r5, r0
 80102d4:	f8c9 5000 	str.w	r5, [r9]
 80102d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80102dc:	f8c8 0000 	str.w	r0, [r8]
 80102e0:	4620      	mov	r0, r4
 80102e2:	b003      	add	sp, #12
 80102e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80102ec:	e7d5      	b.n	801029a <__d2b+0x2e>
 80102ee:	6161      	str	r1, [r4, #20]
 80102f0:	e7e5      	b.n	80102be <__d2b+0x52>
 80102f2:	a801      	add	r0, sp, #4
 80102f4:	f7ff fcde 	bl	800fcb4 <__lo0bits>
 80102f8:	9b01      	ldr	r3, [sp, #4]
 80102fa:	6163      	str	r3, [r4, #20]
 80102fc:	2201      	movs	r2, #1
 80102fe:	6122      	str	r2, [r4, #16]
 8010300:	3020      	adds	r0, #32
 8010302:	e7e3      	b.n	80102cc <__d2b+0x60>
 8010304:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010308:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801030c:	f8c9 0000 	str.w	r0, [r9]
 8010310:	6918      	ldr	r0, [r3, #16]
 8010312:	f7ff fcaf 	bl	800fc74 <__hi0bits>
 8010316:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801031a:	e7df      	b.n	80102dc <__d2b+0x70>
 801031c:	080118f7 	.word	0x080118f7
 8010320:	08011984 	.word	0x08011984

08010324 <__ratio>:
 8010324:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010328:	4688      	mov	r8, r1
 801032a:	4669      	mov	r1, sp
 801032c:	4681      	mov	r9, r0
 801032e:	f7ff ff4d 	bl	80101cc <__b2d>
 8010332:	a901      	add	r1, sp, #4
 8010334:	4640      	mov	r0, r8
 8010336:	ec55 4b10 	vmov	r4, r5, d0
 801033a:	f7ff ff47 	bl	80101cc <__b2d>
 801033e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010342:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010346:	eba3 0c02 	sub.w	ip, r3, r2
 801034a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801034e:	1a9b      	subs	r3, r3, r2
 8010350:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010354:	ec51 0b10 	vmov	r0, r1, d0
 8010358:	2b00      	cmp	r3, #0
 801035a:	bfd6      	itet	le
 801035c:	460a      	movle	r2, r1
 801035e:	462a      	movgt	r2, r5
 8010360:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010364:	468b      	mov	fp, r1
 8010366:	462f      	mov	r7, r5
 8010368:	bfd4      	ite	le
 801036a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801036e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010372:	4620      	mov	r0, r4
 8010374:	ee10 2a10 	vmov	r2, s0
 8010378:	465b      	mov	r3, fp
 801037a:	4639      	mov	r1, r7
 801037c:	f7f0 fa6e 	bl	800085c <__aeabi_ddiv>
 8010380:	ec41 0b10 	vmov	d0, r0, r1
 8010384:	b003      	add	sp, #12
 8010386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801038a <__copybits>:
 801038a:	3901      	subs	r1, #1
 801038c:	b570      	push	{r4, r5, r6, lr}
 801038e:	1149      	asrs	r1, r1, #5
 8010390:	6914      	ldr	r4, [r2, #16]
 8010392:	3101      	adds	r1, #1
 8010394:	f102 0314 	add.w	r3, r2, #20
 8010398:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801039c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80103a0:	1f05      	subs	r5, r0, #4
 80103a2:	42a3      	cmp	r3, r4
 80103a4:	d30c      	bcc.n	80103c0 <__copybits+0x36>
 80103a6:	1aa3      	subs	r3, r4, r2
 80103a8:	3b11      	subs	r3, #17
 80103aa:	f023 0303 	bic.w	r3, r3, #3
 80103ae:	3211      	adds	r2, #17
 80103b0:	42a2      	cmp	r2, r4
 80103b2:	bf88      	it	hi
 80103b4:	2300      	movhi	r3, #0
 80103b6:	4418      	add	r0, r3
 80103b8:	2300      	movs	r3, #0
 80103ba:	4288      	cmp	r0, r1
 80103bc:	d305      	bcc.n	80103ca <__copybits+0x40>
 80103be:	bd70      	pop	{r4, r5, r6, pc}
 80103c0:	f853 6b04 	ldr.w	r6, [r3], #4
 80103c4:	f845 6f04 	str.w	r6, [r5, #4]!
 80103c8:	e7eb      	b.n	80103a2 <__copybits+0x18>
 80103ca:	f840 3b04 	str.w	r3, [r0], #4
 80103ce:	e7f4      	b.n	80103ba <__copybits+0x30>

080103d0 <__any_on>:
 80103d0:	f100 0214 	add.w	r2, r0, #20
 80103d4:	6900      	ldr	r0, [r0, #16]
 80103d6:	114b      	asrs	r3, r1, #5
 80103d8:	4298      	cmp	r0, r3
 80103da:	b510      	push	{r4, lr}
 80103dc:	db11      	blt.n	8010402 <__any_on+0x32>
 80103de:	dd0a      	ble.n	80103f6 <__any_on+0x26>
 80103e0:	f011 011f 	ands.w	r1, r1, #31
 80103e4:	d007      	beq.n	80103f6 <__any_on+0x26>
 80103e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80103ea:	fa24 f001 	lsr.w	r0, r4, r1
 80103ee:	fa00 f101 	lsl.w	r1, r0, r1
 80103f2:	428c      	cmp	r4, r1
 80103f4:	d10b      	bne.n	801040e <__any_on+0x3e>
 80103f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80103fa:	4293      	cmp	r3, r2
 80103fc:	d803      	bhi.n	8010406 <__any_on+0x36>
 80103fe:	2000      	movs	r0, #0
 8010400:	bd10      	pop	{r4, pc}
 8010402:	4603      	mov	r3, r0
 8010404:	e7f7      	b.n	80103f6 <__any_on+0x26>
 8010406:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801040a:	2900      	cmp	r1, #0
 801040c:	d0f5      	beq.n	80103fa <__any_on+0x2a>
 801040e:	2001      	movs	r0, #1
 8010410:	e7f6      	b.n	8010400 <__any_on+0x30>

08010412 <_calloc_r>:
 8010412:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010414:	fba1 2402 	umull	r2, r4, r1, r2
 8010418:	b94c      	cbnz	r4, 801042e <_calloc_r+0x1c>
 801041a:	4611      	mov	r1, r2
 801041c:	9201      	str	r2, [sp, #4]
 801041e:	f7fc fdd9 	bl	800cfd4 <_malloc_r>
 8010422:	9a01      	ldr	r2, [sp, #4]
 8010424:	4605      	mov	r5, r0
 8010426:	b930      	cbnz	r0, 8010436 <_calloc_r+0x24>
 8010428:	4628      	mov	r0, r5
 801042a:	b003      	add	sp, #12
 801042c:	bd30      	pop	{r4, r5, pc}
 801042e:	220c      	movs	r2, #12
 8010430:	6002      	str	r2, [r0, #0]
 8010432:	2500      	movs	r5, #0
 8010434:	e7f8      	b.n	8010428 <_calloc_r+0x16>
 8010436:	4621      	mov	r1, r4
 8010438:	f7fc fd58 	bl	800ceec <memset>
 801043c:	e7f4      	b.n	8010428 <_calloc_r+0x16>

0801043e <__ssputs_r>:
 801043e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010442:	688e      	ldr	r6, [r1, #8]
 8010444:	429e      	cmp	r6, r3
 8010446:	4682      	mov	sl, r0
 8010448:	460c      	mov	r4, r1
 801044a:	4690      	mov	r8, r2
 801044c:	461f      	mov	r7, r3
 801044e:	d838      	bhi.n	80104c2 <__ssputs_r+0x84>
 8010450:	898a      	ldrh	r2, [r1, #12]
 8010452:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010456:	d032      	beq.n	80104be <__ssputs_r+0x80>
 8010458:	6825      	ldr	r5, [r4, #0]
 801045a:	6909      	ldr	r1, [r1, #16]
 801045c:	eba5 0901 	sub.w	r9, r5, r1
 8010460:	6965      	ldr	r5, [r4, #20]
 8010462:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010466:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801046a:	3301      	adds	r3, #1
 801046c:	444b      	add	r3, r9
 801046e:	106d      	asrs	r5, r5, #1
 8010470:	429d      	cmp	r5, r3
 8010472:	bf38      	it	cc
 8010474:	461d      	movcc	r5, r3
 8010476:	0553      	lsls	r3, r2, #21
 8010478:	d531      	bpl.n	80104de <__ssputs_r+0xa0>
 801047a:	4629      	mov	r1, r5
 801047c:	f7fc fdaa 	bl	800cfd4 <_malloc_r>
 8010480:	4606      	mov	r6, r0
 8010482:	b950      	cbnz	r0, 801049a <__ssputs_r+0x5c>
 8010484:	230c      	movs	r3, #12
 8010486:	f8ca 3000 	str.w	r3, [sl]
 801048a:	89a3      	ldrh	r3, [r4, #12]
 801048c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010490:	81a3      	strh	r3, [r4, #12]
 8010492:	f04f 30ff 	mov.w	r0, #4294967295
 8010496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801049a:	6921      	ldr	r1, [r4, #16]
 801049c:	464a      	mov	r2, r9
 801049e:	f7fc fd17 	bl	800ced0 <memcpy>
 80104a2:	89a3      	ldrh	r3, [r4, #12]
 80104a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80104a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104ac:	81a3      	strh	r3, [r4, #12]
 80104ae:	6126      	str	r6, [r4, #16]
 80104b0:	6165      	str	r5, [r4, #20]
 80104b2:	444e      	add	r6, r9
 80104b4:	eba5 0509 	sub.w	r5, r5, r9
 80104b8:	6026      	str	r6, [r4, #0]
 80104ba:	60a5      	str	r5, [r4, #8]
 80104bc:	463e      	mov	r6, r7
 80104be:	42be      	cmp	r6, r7
 80104c0:	d900      	bls.n	80104c4 <__ssputs_r+0x86>
 80104c2:	463e      	mov	r6, r7
 80104c4:	6820      	ldr	r0, [r4, #0]
 80104c6:	4632      	mov	r2, r6
 80104c8:	4641      	mov	r1, r8
 80104ca:	f000 f95e 	bl	801078a <memmove>
 80104ce:	68a3      	ldr	r3, [r4, #8]
 80104d0:	1b9b      	subs	r3, r3, r6
 80104d2:	60a3      	str	r3, [r4, #8]
 80104d4:	6823      	ldr	r3, [r4, #0]
 80104d6:	4433      	add	r3, r6
 80104d8:	6023      	str	r3, [r4, #0]
 80104da:	2000      	movs	r0, #0
 80104dc:	e7db      	b.n	8010496 <__ssputs_r+0x58>
 80104de:	462a      	mov	r2, r5
 80104e0:	f000 f96d 	bl	80107be <_realloc_r>
 80104e4:	4606      	mov	r6, r0
 80104e6:	2800      	cmp	r0, #0
 80104e8:	d1e1      	bne.n	80104ae <__ssputs_r+0x70>
 80104ea:	6921      	ldr	r1, [r4, #16]
 80104ec:	4650      	mov	r0, sl
 80104ee:	f7fc fd05 	bl	800cefc <_free_r>
 80104f2:	e7c7      	b.n	8010484 <__ssputs_r+0x46>

080104f4 <_svfiprintf_r>:
 80104f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104f8:	4698      	mov	r8, r3
 80104fa:	898b      	ldrh	r3, [r1, #12]
 80104fc:	061b      	lsls	r3, r3, #24
 80104fe:	b09d      	sub	sp, #116	; 0x74
 8010500:	4607      	mov	r7, r0
 8010502:	460d      	mov	r5, r1
 8010504:	4614      	mov	r4, r2
 8010506:	d50e      	bpl.n	8010526 <_svfiprintf_r+0x32>
 8010508:	690b      	ldr	r3, [r1, #16]
 801050a:	b963      	cbnz	r3, 8010526 <_svfiprintf_r+0x32>
 801050c:	2140      	movs	r1, #64	; 0x40
 801050e:	f7fc fd61 	bl	800cfd4 <_malloc_r>
 8010512:	6028      	str	r0, [r5, #0]
 8010514:	6128      	str	r0, [r5, #16]
 8010516:	b920      	cbnz	r0, 8010522 <_svfiprintf_r+0x2e>
 8010518:	230c      	movs	r3, #12
 801051a:	603b      	str	r3, [r7, #0]
 801051c:	f04f 30ff 	mov.w	r0, #4294967295
 8010520:	e0d1      	b.n	80106c6 <_svfiprintf_r+0x1d2>
 8010522:	2340      	movs	r3, #64	; 0x40
 8010524:	616b      	str	r3, [r5, #20]
 8010526:	2300      	movs	r3, #0
 8010528:	9309      	str	r3, [sp, #36]	; 0x24
 801052a:	2320      	movs	r3, #32
 801052c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010530:	f8cd 800c 	str.w	r8, [sp, #12]
 8010534:	2330      	movs	r3, #48	; 0x30
 8010536:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80106e0 <_svfiprintf_r+0x1ec>
 801053a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801053e:	f04f 0901 	mov.w	r9, #1
 8010542:	4623      	mov	r3, r4
 8010544:	469a      	mov	sl, r3
 8010546:	f813 2b01 	ldrb.w	r2, [r3], #1
 801054a:	b10a      	cbz	r2, 8010550 <_svfiprintf_r+0x5c>
 801054c:	2a25      	cmp	r2, #37	; 0x25
 801054e:	d1f9      	bne.n	8010544 <_svfiprintf_r+0x50>
 8010550:	ebba 0b04 	subs.w	fp, sl, r4
 8010554:	d00b      	beq.n	801056e <_svfiprintf_r+0x7a>
 8010556:	465b      	mov	r3, fp
 8010558:	4622      	mov	r2, r4
 801055a:	4629      	mov	r1, r5
 801055c:	4638      	mov	r0, r7
 801055e:	f7ff ff6e 	bl	801043e <__ssputs_r>
 8010562:	3001      	adds	r0, #1
 8010564:	f000 80aa 	beq.w	80106bc <_svfiprintf_r+0x1c8>
 8010568:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801056a:	445a      	add	r2, fp
 801056c:	9209      	str	r2, [sp, #36]	; 0x24
 801056e:	f89a 3000 	ldrb.w	r3, [sl]
 8010572:	2b00      	cmp	r3, #0
 8010574:	f000 80a2 	beq.w	80106bc <_svfiprintf_r+0x1c8>
 8010578:	2300      	movs	r3, #0
 801057a:	f04f 32ff 	mov.w	r2, #4294967295
 801057e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010582:	f10a 0a01 	add.w	sl, sl, #1
 8010586:	9304      	str	r3, [sp, #16]
 8010588:	9307      	str	r3, [sp, #28]
 801058a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801058e:	931a      	str	r3, [sp, #104]	; 0x68
 8010590:	4654      	mov	r4, sl
 8010592:	2205      	movs	r2, #5
 8010594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010598:	4851      	ldr	r0, [pc, #324]	; (80106e0 <_svfiprintf_r+0x1ec>)
 801059a:	f7ef fe29 	bl	80001f0 <memchr>
 801059e:	9a04      	ldr	r2, [sp, #16]
 80105a0:	b9d8      	cbnz	r0, 80105da <_svfiprintf_r+0xe6>
 80105a2:	06d0      	lsls	r0, r2, #27
 80105a4:	bf44      	itt	mi
 80105a6:	2320      	movmi	r3, #32
 80105a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80105ac:	0711      	lsls	r1, r2, #28
 80105ae:	bf44      	itt	mi
 80105b0:	232b      	movmi	r3, #43	; 0x2b
 80105b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80105b6:	f89a 3000 	ldrb.w	r3, [sl]
 80105ba:	2b2a      	cmp	r3, #42	; 0x2a
 80105bc:	d015      	beq.n	80105ea <_svfiprintf_r+0xf6>
 80105be:	9a07      	ldr	r2, [sp, #28]
 80105c0:	4654      	mov	r4, sl
 80105c2:	2000      	movs	r0, #0
 80105c4:	f04f 0c0a 	mov.w	ip, #10
 80105c8:	4621      	mov	r1, r4
 80105ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105ce:	3b30      	subs	r3, #48	; 0x30
 80105d0:	2b09      	cmp	r3, #9
 80105d2:	d94e      	bls.n	8010672 <_svfiprintf_r+0x17e>
 80105d4:	b1b0      	cbz	r0, 8010604 <_svfiprintf_r+0x110>
 80105d6:	9207      	str	r2, [sp, #28]
 80105d8:	e014      	b.n	8010604 <_svfiprintf_r+0x110>
 80105da:	eba0 0308 	sub.w	r3, r0, r8
 80105de:	fa09 f303 	lsl.w	r3, r9, r3
 80105e2:	4313      	orrs	r3, r2
 80105e4:	9304      	str	r3, [sp, #16]
 80105e6:	46a2      	mov	sl, r4
 80105e8:	e7d2      	b.n	8010590 <_svfiprintf_r+0x9c>
 80105ea:	9b03      	ldr	r3, [sp, #12]
 80105ec:	1d19      	adds	r1, r3, #4
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	9103      	str	r1, [sp, #12]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	bfbb      	ittet	lt
 80105f6:	425b      	neglt	r3, r3
 80105f8:	f042 0202 	orrlt.w	r2, r2, #2
 80105fc:	9307      	strge	r3, [sp, #28]
 80105fe:	9307      	strlt	r3, [sp, #28]
 8010600:	bfb8      	it	lt
 8010602:	9204      	strlt	r2, [sp, #16]
 8010604:	7823      	ldrb	r3, [r4, #0]
 8010606:	2b2e      	cmp	r3, #46	; 0x2e
 8010608:	d10c      	bne.n	8010624 <_svfiprintf_r+0x130>
 801060a:	7863      	ldrb	r3, [r4, #1]
 801060c:	2b2a      	cmp	r3, #42	; 0x2a
 801060e:	d135      	bne.n	801067c <_svfiprintf_r+0x188>
 8010610:	9b03      	ldr	r3, [sp, #12]
 8010612:	1d1a      	adds	r2, r3, #4
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	9203      	str	r2, [sp, #12]
 8010618:	2b00      	cmp	r3, #0
 801061a:	bfb8      	it	lt
 801061c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010620:	3402      	adds	r4, #2
 8010622:	9305      	str	r3, [sp, #20]
 8010624:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80106f0 <_svfiprintf_r+0x1fc>
 8010628:	7821      	ldrb	r1, [r4, #0]
 801062a:	2203      	movs	r2, #3
 801062c:	4650      	mov	r0, sl
 801062e:	f7ef fddf 	bl	80001f0 <memchr>
 8010632:	b140      	cbz	r0, 8010646 <_svfiprintf_r+0x152>
 8010634:	2340      	movs	r3, #64	; 0x40
 8010636:	eba0 000a 	sub.w	r0, r0, sl
 801063a:	fa03 f000 	lsl.w	r0, r3, r0
 801063e:	9b04      	ldr	r3, [sp, #16]
 8010640:	4303      	orrs	r3, r0
 8010642:	3401      	adds	r4, #1
 8010644:	9304      	str	r3, [sp, #16]
 8010646:	f814 1b01 	ldrb.w	r1, [r4], #1
 801064a:	4826      	ldr	r0, [pc, #152]	; (80106e4 <_svfiprintf_r+0x1f0>)
 801064c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010650:	2206      	movs	r2, #6
 8010652:	f7ef fdcd 	bl	80001f0 <memchr>
 8010656:	2800      	cmp	r0, #0
 8010658:	d038      	beq.n	80106cc <_svfiprintf_r+0x1d8>
 801065a:	4b23      	ldr	r3, [pc, #140]	; (80106e8 <_svfiprintf_r+0x1f4>)
 801065c:	bb1b      	cbnz	r3, 80106a6 <_svfiprintf_r+0x1b2>
 801065e:	9b03      	ldr	r3, [sp, #12]
 8010660:	3307      	adds	r3, #7
 8010662:	f023 0307 	bic.w	r3, r3, #7
 8010666:	3308      	adds	r3, #8
 8010668:	9303      	str	r3, [sp, #12]
 801066a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801066c:	4433      	add	r3, r6
 801066e:	9309      	str	r3, [sp, #36]	; 0x24
 8010670:	e767      	b.n	8010542 <_svfiprintf_r+0x4e>
 8010672:	fb0c 3202 	mla	r2, ip, r2, r3
 8010676:	460c      	mov	r4, r1
 8010678:	2001      	movs	r0, #1
 801067a:	e7a5      	b.n	80105c8 <_svfiprintf_r+0xd4>
 801067c:	2300      	movs	r3, #0
 801067e:	3401      	adds	r4, #1
 8010680:	9305      	str	r3, [sp, #20]
 8010682:	4619      	mov	r1, r3
 8010684:	f04f 0c0a 	mov.w	ip, #10
 8010688:	4620      	mov	r0, r4
 801068a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801068e:	3a30      	subs	r2, #48	; 0x30
 8010690:	2a09      	cmp	r2, #9
 8010692:	d903      	bls.n	801069c <_svfiprintf_r+0x1a8>
 8010694:	2b00      	cmp	r3, #0
 8010696:	d0c5      	beq.n	8010624 <_svfiprintf_r+0x130>
 8010698:	9105      	str	r1, [sp, #20]
 801069a:	e7c3      	b.n	8010624 <_svfiprintf_r+0x130>
 801069c:	fb0c 2101 	mla	r1, ip, r1, r2
 80106a0:	4604      	mov	r4, r0
 80106a2:	2301      	movs	r3, #1
 80106a4:	e7f0      	b.n	8010688 <_svfiprintf_r+0x194>
 80106a6:	ab03      	add	r3, sp, #12
 80106a8:	9300      	str	r3, [sp, #0]
 80106aa:	462a      	mov	r2, r5
 80106ac:	4b0f      	ldr	r3, [pc, #60]	; (80106ec <_svfiprintf_r+0x1f8>)
 80106ae:	a904      	add	r1, sp, #16
 80106b0:	4638      	mov	r0, r7
 80106b2:	f7fc fda3 	bl	800d1fc <_printf_float>
 80106b6:	1c42      	adds	r2, r0, #1
 80106b8:	4606      	mov	r6, r0
 80106ba:	d1d6      	bne.n	801066a <_svfiprintf_r+0x176>
 80106bc:	89ab      	ldrh	r3, [r5, #12]
 80106be:	065b      	lsls	r3, r3, #25
 80106c0:	f53f af2c 	bmi.w	801051c <_svfiprintf_r+0x28>
 80106c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80106c6:	b01d      	add	sp, #116	; 0x74
 80106c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106cc:	ab03      	add	r3, sp, #12
 80106ce:	9300      	str	r3, [sp, #0]
 80106d0:	462a      	mov	r2, r5
 80106d2:	4b06      	ldr	r3, [pc, #24]	; (80106ec <_svfiprintf_r+0x1f8>)
 80106d4:	a904      	add	r1, sp, #16
 80106d6:	4638      	mov	r0, r7
 80106d8:	f7fd f834 	bl	800d744 <_printf_i>
 80106dc:	e7eb      	b.n	80106b6 <_svfiprintf_r+0x1c2>
 80106de:	bf00      	nop
 80106e0:	08011adc 	.word	0x08011adc
 80106e4:	08011ae6 	.word	0x08011ae6
 80106e8:	0800d1fd 	.word	0x0800d1fd
 80106ec:	0801043f 	.word	0x0801043f
 80106f0:	08011ae2 	.word	0x08011ae2
 80106f4:	00000000 	.word	0x00000000

080106f8 <nan>:
 80106f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010700 <nan+0x8>
 80106fc:	4770      	bx	lr
 80106fe:	bf00      	nop
 8010700:	00000000 	.word	0x00000000
 8010704:	7ff80000 	.word	0x7ff80000

08010708 <__ascii_wctomb>:
 8010708:	b149      	cbz	r1, 801071e <__ascii_wctomb+0x16>
 801070a:	2aff      	cmp	r2, #255	; 0xff
 801070c:	bf85      	ittet	hi
 801070e:	238a      	movhi	r3, #138	; 0x8a
 8010710:	6003      	strhi	r3, [r0, #0]
 8010712:	700a      	strbls	r2, [r1, #0]
 8010714:	f04f 30ff 	movhi.w	r0, #4294967295
 8010718:	bf98      	it	ls
 801071a:	2001      	movls	r0, #1
 801071c:	4770      	bx	lr
 801071e:	4608      	mov	r0, r1
 8010720:	4770      	bx	lr
	...

08010724 <__assert_func>:
 8010724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010726:	4614      	mov	r4, r2
 8010728:	461a      	mov	r2, r3
 801072a:	4b09      	ldr	r3, [pc, #36]	; (8010750 <__assert_func+0x2c>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	4605      	mov	r5, r0
 8010730:	68d8      	ldr	r0, [r3, #12]
 8010732:	b14c      	cbz	r4, 8010748 <__assert_func+0x24>
 8010734:	4b07      	ldr	r3, [pc, #28]	; (8010754 <__assert_func+0x30>)
 8010736:	9100      	str	r1, [sp, #0]
 8010738:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801073c:	4906      	ldr	r1, [pc, #24]	; (8010758 <__assert_func+0x34>)
 801073e:	462b      	mov	r3, r5
 8010740:	f000 f80e 	bl	8010760 <fiprintf>
 8010744:	f000 fa84 	bl	8010c50 <abort>
 8010748:	4b04      	ldr	r3, [pc, #16]	; (801075c <__assert_func+0x38>)
 801074a:	461c      	mov	r4, r3
 801074c:	e7f3      	b.n	8010736 <__assert_func+0x12>
 801074e:	bf00      	nop
 8010750:	20000024 	.word	0x20000024
 8010754:	08011aed 	.word	0x08011aed
 8010758:	08011afa 	.word	0x08011afa
 801075c:	08011b28 	.word	0x08011b28

08010760 <fiprintf>:
 8010760:	b40e      	push	{r1, r2, r3}
 8010762:	b503      	push	{r0, r1, lr}
 8010764:	4601      	mov	r1, r0
 8010766:	ab03      	add	r3, sp, #12
 8010768:	4805      	ldr	r0, [pc, #20]	; (8010780 <fiprintf+0x20>)
 801076a:	f853 2b04 	ldr.w	r2, [r3], #4
 801076e:	6800      	ldr	r0, [r0, #0]
 8010770:	9301      	str	r3, [sp, #4]
 8010772:	f000 f87d 	bl	8010870 <_vfiprintf_r>
 8010776:	b002      	add	sp, #8
 8010778:	f85d eb04 	ldr.w	lr, [sp], #4
 801077c:	b003      	add	sp, #12
 801077e:	4770      	bx	lr
 8010780:	20000024 	.word	0x20000024

08010784 <__retarget_lock_init_recursive>:
 8010784:	4770      	bx	lr

08010786 <__retarget_lock_acquire_recursive>:
 8010786:	4770      	bx	lr

08010788 <__retarget_lock_release_recursive>:
 8010788:	4770      	bx	lr

0801078a <memmove>:
 801078a:	4288      	cmp	r0, r1
 801078c:	b510      	push	{r4, lr}
 801078e:	eb01 0402 	add.w	r4, r1, r2
 8010792:	d902      	bls.n	801079a <memmove+0x10>
 8010794:	4284      	cmp	r4, r0
 8010796:	4623      	mov	r3, r4
 8010798:	d807      	bhi.n	80107aa <memmove+0x20>
 801079a:	1e43      	subs	r3, r0, #1
 801079c:	42a1      	cmp	r1, r4
 801079e:	d008      	beq.n	80107b2 <memmove+0x28>
 80107a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80107a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80107a8:	e7f8      	b.n	801079c <memmove+0x12>
 80107aa:	4402      	add	r2, r0
 80107ac:	4601      	mov	r1, r0
 80107ae:	428a      	cmp	r2, r1
 80107b0:	d100      	bne.n	80107b4 <memmove+0x2a>
 80107b2:	bd10      	pop	{r4, pc}
 80107b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80107b8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80107bc:	e7f7      	b.n	80107ae <memmove+0x24>

080107be <_realloc_r>:
 80107be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107c2:	4680      	mov	r8, r0
 80107c4:	4614      	mov	r4, r2
 80107c6:	460e      	mov	r6, r1
 80107c8:	b921      	cbnz	r1, 80107d4 <_realloc_r+0x16>
 80107ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107ce:	4611      	mov	r1, r2
 80107d0:	f7fc bc00 	b.w	800cfd4 <_malloc_r>
 80107d4:	b92a      	cbnz	r2, 80107e2 <_realloc_r+0x24>
 80107d6:	f7fc fb91 	bl	800cefc <_free_r>
 80107da:	4625      	mov	r5, r4
 80107dc:	4628      	mov	r0, r5
 80107de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107e2:	f000 fc59 	bl	8011098 <_malloc_usable_size_r>
 80107e6:	4284      	cmp	r4, r0
 80107e8:	4607      	mov	r7, r0
 80107ea:	d802      	bhi.n	80107f2 <_realloc_r+0x34>
 80107ec:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80107f0:	d812      	bhi.n	8010818 <_realloc_r+0x5a>
 80107f2:	4621      	mov	r1, r4
 80107f4:	4640      	mov	r0, r8
 80107f6:	f7fc fbed 	bl	800cfd4 <_malloc_r>
 80107fa:	4605      	mov	r5, r0
 80107fc:	2800      	cmp	r0, #0
 80107fe:	d0ed      	beq.n	80107dc <_realloc_r+0x1e>
 8010800:	42bc      	cmp	r4, r7
 8010802:	4622      	mov	r2, r4
 8010804:	4631      	mov	r1, r6
 8010806:	bf28      	it	cs
 8010808:	463a      	movcs	r2, r7
 801080a:	f7fc fb61 	bl	800ced0 <memcpy>
 801080e:	4631      	mov	r1, r6
 8010810:	4640      	mov	r0, r8
 8010812:	f7fc fb73 	bl	800cefc <_free_r>
 8010816:	e7e1      	b.n	80107dc <_realloc_r+0x1e>
 8010818:	4635      	mov	r5, r6
 801081a:	e7df      	b.n	80107dc <_realloc_r+0x1e>

0801081c <__sfputc_r>:
 801081c:	6893      	ldr	r3, [r2, #8]
 801081e:	3b01      	subs	r3, #1
 8010820:	2b00      	cmp	r3, #0
 8010822:	b410      	push	{r4}
 8010824:	6093      	str	r3, [r2, #8]
 8010826:	da08      	bge.n	801083a <__sfputc_r+0x1e>
 8010828:	6994      	ldr	r4, [r2, #24]
 801082a:	42a3      	cmp	r3, r4
 801082c:	db01      	blt.n	8010832 <__sfputc_r+0x16>
 801082e:	290a      	cmp	r1, #10
 8010830:	d103      	bne.n	801083a <__sfputc_r+0x1e>
 8010832:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010836:	f000 b94b 	b.w	8010ad0 <__swbuf_r>
 801083a:	6813      	ldr	r3, [r2, #0]
 801083c:	1c58      	adds	r0, r3, #1
 801083e:	6010      	str	r0, [r2, #0]
 8010840:	7019      	strb	r1, [r3, #0]
 8010842:	4608      	mov	r0, r1
 8010844:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010848:	4770      	bx	lr

0801084a <__sfputs_r>:
 801084a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801084c:	4606      	mov	r6, r0
 801084e:	460f      	mov	r7, r1
 8010850:	4614      	mov	r4, r2
 8010852:	18d5      	adds	r5, r2, r3
 8010854:	42ac      	cmp	r4, r5
 8010856:	d101      	bne.n	801085c <__sfputs_r+0x12>
 8010858:	2000      	movs	r0, #0
 801085a:	e007      	b.n	801086c <__sfputs_r+0x22>
 801085c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010860:	463a      	mov	r2, r7
 8010862:	4630      	mov	r0, r6
 8010864:	f7ff ffda 	bl	801081c <__sfputc_r>
 8010868:	1c43      	adds	r3, r0, #1
 801086a:	d1f3      	bne.n	8010854 <__sfputs_r+0xa>
 801086c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010870 <_vfiprintf_r>:
 8010870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010874:	460d      	mov	r5, r1
 8010876:	b09d      	sub	sp, #116	; 0x74
 8010878:	4614      	mov	r4, r2
 801087a:	4698      	mov	r8, r3
 801087c:	4606      	mov	r6, r0
 801087e:	b118      	cbz	r0, 8010888 <_vfiprintf_r+0x18>
 8010880:	6983      	ldr	r3, [r0, #24]
 8010882:	b90b      	cbnz	r3, 8010888 <_vfiprintf_r+0x18>
 8010884:	f000 fb06 	bl	8010e94 <__sinit>
 8010888:	4b89      	ldr	r3, [pc, #548]	; (8010ab0 <_vfiprintf_r+0x240>)
 801088a:	429d      	cmp	r5, r3
 801088c:	d11b      	bne.n	80108c6 <_vfiprintf_r+0x56>
 801088e:	6875      	ldr	r5, [r6, #4]
 8010890:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010892:	07d9      	lsls	r1, r3, #31
 8010894:	d405      	bmi.n	80108a2 <_vfiprintf_r+0x32>
 8010896:	89ab      	ldrh	r3, [r5, #12]
 8010898:	059a      	lsls	r2, r3, #22
 801089a:	d402      	bmi.n	80108a2 <_vfiprintf_r+0x32>
 801089c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801089e:	f7ff ff72 	bl	8010786 <__retarget_lock_acquire_recursive>
 80108a2:	89ab      	ldrh	r3, [r5, #12]
 80108a4:	071b      	lsls	r3, r3, #28
 80108a6:	d501      	bpl.n	80108ac <_vfiprintf_r+0x3c>
 80108a8:	692b      	ldr	r3, [r5, #16]
 80108aa:	b9eb      	cbnz	r3, 80108e8 <_vfiprintf_r+0x78>
 80108ac:	4629      	mov	r1, r5
 80108ae:	4630      	mov	r0, r6
 80108b0:	f000 f960 	bl	8010b74 <__swsetup_r>
 80108b4:	b1c0      	cbz	r0, 80108e8 <_vfiprintf_r+0x78>
 80108b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80108b8:	07dc      	lsls	r4, r3, #31
 80108ba:	d50e      	bpl.n	80108da <_vfiprintf_r+0x6a>
 80108bc:	f04f 30ff 	mov.w	r0, #4294967295
 80108c0:	b01d      	add	sp, #116	; 0x74
 80108c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108c6:	4b7b      	ldr	r3, [pc, #492]	; (8010ab4 <_vfiprintf_r+0x244>)
 80108c8:	429d      	cmp	r5, r3
 80108ca:	d101      	bne.n	80108d0 <_vfiprintf_r+0x60>
 80108cc:	68b5      	ldr	r5, [r6, #8]
 80108ce:	e7df      	b.n	8010890 <_vfiprintf_r+0x20>
 80108d0:	4b79      	ldr	r3, [pc, #484]	; (8010ab8 <_vfiprintf_r+0x248>)
 80108d2:	429d      	cmp	r5, r3
 80108d4:	bf08      	it	eq
 80108d6:	68f5      	ldreq	r5, [r6, #12]
 80108d8:	e7da      	b.n	8010890 <_vfiprintf_r+0x20>
 80108da:	89ab      	ldrh	r3, [r5, #12]
 80108dc:	0598      	lsls	r0, r3, #22
 80108de:	d4ed      	bmi.n	80108bc <_vfiprintf_r+0x4c>
 80108e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80108e2:	f7ff ff51 	bl	8010788 <__retarget_lock_release_recursive>
 80108e6:	e7e9      	b.n	80108bc <_vfiprintf_r+0x4c>
 80108e8:	2300      	movs	r3, #0
 80108ea:	9309      	str	r3, [sp, #36]	; 0x24
 80108ec:	2320      	movs	r3, #32
 80108ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80108f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80108f6:	2330      	movs	r3, #48	; 0x30
 80108f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010abc <_vfiprintf_r+0x24c>
 80108fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010900:	f04f 0901 	mov.w	r9, #1
 8010904:	4623      	mov	r3, r4
 8010906:	469a      	mov	sl, r3
 8010908:	f813 2b01 	ldrb.w	r2, [r3], #1
 801090c:	b10a      	cbz	r2, 8010912 <_vfiprintf_r+0xa2>
 801090e:	2a25      	cmp	r2, #37	; 0x25
 8010910:	d1f9      	bne.n	8010906 <_vfiprintf_r+0x96>
 8010912:	ebba 0b04 	subs.w	fp, sl, r4
 8010916:	d00b      	beq.n	8010930 <_vfiprintf_r+0xc0>
 8010918:	465b      	mov	r3, fp
 801091a:	4622      	mov	r2, r4
 801091c:	4629      	mov	r1, r5
 801091e:	4630      	mov	r0, r6
 8010920:	f7ff ff93 	bl	801084a <__sfputs_r>
 8010924:	3001      	adds	r0, #1
 8010926:	f000 80aa 	beq.w	8010a7e <_vfiprintf_r+0x20e>
 801092a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801092c:	445a      	add	r2, fp
 801092e:	9209      	str	r2, [sp, #36]	; 0x24
 8010930:	f89a 3000 	ldrb.w	r3, [sl]
 8010934:	2b00      	cmp	r3, #0
 8010936:	f000 80a2 	beq.w	8010a7e <_vfiprintf_r+0x20e>
 801093a:	2300      	movs	r3, #0
 801093c:	f04f 32ff 	mov.w	r2, #4294967295
 8010940:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010944:	f10a 0a01 	add.w	sl, sl, #1
 8010948:	9304      	str	r3, [sp, #16]
 801094a:	9307      	str	r3, [sp, #28]
 801094c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010950:	931a      	str	r3, [sp, #104]	; 0x68
 8010952:	4654      	mov	r4, sl
 8010954:	2205      	movs	r2, #5
 8010956:	f814 1b01 	ldrb.w	r1, [r4], #1
 801095a:	4858      	ldr	r0, [pc, #352]	; (8010abc <_vfiprintf_r+0x24c>)
 801095c:	f7ef fc48 	bl	80001f0 <memchr>
 8010960:	9a04      	ldr	r2, [sp, #16]
 8010962:	b9d8      	cbnz	r0, 801099c <_vfiprintf_r+0x12c>
 8010964:	06d1      	lsls	r1, r2, #27
 8010966:	bf44      	itt	mi
 8010968:	2320      	movmi	r3, #32
 801096a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801096e:	0713      	lsls	r3, r2, #28
 8010970:	bf44      	itt	mi
 8010972:	232b      	movmi	r3, #43	; 0x2b
 8010974:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010978:	f89a 3000 	ldrb.w	r3, [sl]
 801097c:	2b2a      	cmp	r3, #42	; 0x2a
 801097e:	d015      	beq.n	80109ac <_vfiprintf_r+0x13c>
 8010980:	9a07      	ldr	r2, [sp, #28]
 8010982:	4654      	mov	r4, sl
 8010984:	2000      	movs	r0, #0
 8010986:	f04f 0c0a 	mov.w	ip, #10
 801098a:	4621      	mov	r1, r4
 801098c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010990:	3b30      	subs	r3, #48	; 0x30
 8010992:	2b09      	cmp	r3, #9
 8010994:	d94e      	bls.n	8010a34 <_vfiprintf_r+0x1c4>
 8010996:	b1b0      	cbz	r0, 80109c6 <_vfiprintf_r+0x156>
 8010998:	9207      	str	r2, [sp, #28]
 801099a:	e014      	b.n	80109c6 <_vfiprintf_r+0x156>
 801099c:	eba0 0308 	sub.w	r3, r0, r8
 80109a0:	fa09 f303 	lsl.w	r3, r9, r3
 80109a4:	4313      	orrs	r3, r2
 80109a6:	9304      	str	r3, [sp, #16]
 80109a8:	46a2      	mov	sl, r4
 80109aa:	e7d2      	b.n	8010952 <_vfiprintf_r+0xe2>
 80109ac:	9b03      	ldr	r3, [sp, #12]
 80109ae:	1d19      	adds	r1, r3, #4
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	9103      	str	r1, [sp, #12]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	bfbb      	ittet	lt
 80109b8:	425b      	neglt	r3, r3
 80109ba:	f042 0202 	orrlt.w	r2, r2, #2
 80109be:	9307      	strge	r3, [sp, #28]
 80109c0:	9307      	strlt	r3, [sp, #28]
 80109c2:	bfb8      	it	lt
 80109c4:	9204      	strlt	r2, [sp, #16]
 80109c6:	7823      	ldrb	r3, [r4, #0]
 80109c8:	2b2e      	cmp	r3, #46	; 0x2e
 80109ca:	d10c      	bne.n	80109e6 <_vfiprintf_r+0x176>
 80109cc:	7863      	ldrb	r3, [r4, #1]
 80109ce:	2b2a      	cmp	r3, #42	; 0x2a
 80109d0:	d135      	bne.n	8010a3e <_vfiprintf_r+0x1ce>
 80109d2:	9b03      	ldr	r3, [sp, #12]
 80109d4:	1d1a      	adds	r2, r3, #4
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	9203      	str	r2, [sp, #12]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	bfb8      	it	lt
 80109de:	f04f 33ff 	movlt.w	r3, #4294967295
 80109e2:	3402      	adds	r4, #2
 80109e4:	9305      	str	r3, [sp, #20]
 80109e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010acc <_vfiprintf_r+0x25c>
 80109ea:	7821      	ldrb	r1, [r4, #0]
 80109ec:	2203      	movs	r2, #3
 80109ee:	4650      	mov	r0, sl
 80109f0:	f7ef fbfe 	bl	80001f0 <memchr>
 80109f4:	b140      	cbz	r0, 8010a08 <_vfiprintf_r+0x198>
 80109f6:	2340      	movs	r3, #64	; 0x40
 80109f8:	eba0 000a 	sub.w	r0, r0, sl
 80109fc:	fa03 f000 	lsl.w	r0, r3, r0
 8010a00:	9b04      	ldr	r3, [sp, #16]
 8010a02:	4303      	orrs	r3, r0
 8010a04:	3401      	adds	r4, #1
 8010a06:	9304      	str	r3, [sp, #16]
 8010a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a0c:	482c      	ldr	r0, [pc, #176]	; (8010ac0 <_vfiprintf_r+0x250>)
 8010a0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010a12:	2206      	movs	r2, #6
 8010a14:	f7ef fbec 	bl	80001f0 <memchr>
 8010a18:	2800      	cmp	r0, #0
 8010a1a:	d03f      	beq.n	8010a9c <_vfiprintf_r+0x22c>
 8010a1c:	4b29      	ldr	r3, [pc, #164]	; (8010ac4 <_vfiprintf_r+0x254>)
 8010a1e:	bb1b      	cbnz	r3, 8010a68 <_vfiprintf_r+0x1f8>
 8010a20:	9b03      	ldr	r3, [sp, #12]
 8010a22:	3307      	adds	r3, #7
 8010a24:	f023 0307 	bic.w	r3, r3, #7
 8010a28:	3308      	adds	r3, #8
 8010a2a:	9303      	str	r3, [sp, #12]
 8010a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a2e:	443b      	add	r3, r7
 8010a30:	9309      	str	r3, [sp, #36]	; 0x24
 8010a32:	e767      	b.n	8010904 <_vfiprintf_r+0x94>
 8010a34:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a38:	460c      	mov	r4, r1
 8010a3a:	2001      	movs	r0, #1
 8010a3c:	e7a5      	b.n	801098a <_vfiprintf_r+0x11a>
 8010a3e:	2300      	movs	r3, #0
 8010a40:	3401      	adds	r4, #1
 8010a42:	9305      	str	r3, [sp, #20]
 8010a44:	4619      	mov	r1, r3
 8010a46:	f04f 0c0a 	mov.w	ip, #10
 8010a4a:	4620      	mov	r0, r4
 8010a4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a50:	3a30      	subs	r2, #48	; 0x30
 8010a52:	2a09      	cmp	r2, #9
 8010a54:	d903      	bls.n	8010a5e <_vfiprintf_r+0x1ee>
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d0c5      	beq.n	80109e6 <_vfiprintf_r+0x176>
 8010a5a:	9105      	str	r1, [sp, #20]
 8010a5c:	e7c3      	b.n	80109e6 <_vfiprintf_r+0x176>
 8010a5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a62:	4604      	mov	r4, r0
 8010a64:	2301      	movs	r3, #1
 8010a66:	e7f0      	b.n	8010a4a <_vfiprintf_r+0x1da>
 8010a68:	ab03      	add	r3, sp, #12
 8010a6a:	9300      	str	r3, [sp, #0]
 8010a6c:	462a      	mov	r2, r5
 8010a6e:	4b16      	ldr	r3, [pc, #88]	; (8010ac8 <_vfiprintf_r+0x258>)
 8010a70:	a904      	add	r1, sp, #16
 8010a72:	4630      	mov	r0, r6
 8010a74:	f7fc fbc2 	bl	800d1fc <_printf_float>
 8010a78:	4607      	mov	r7, r0
 8010a7a:	1c78      	adds	r0, r7, #1
 8010a7c:	d1d6      	bne.n	8010a2c <_vfiprintf_r+0x1bc>
 8010a7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a80:	07d9      	lsls	r1, r3, #31
 8010a82:	d405      	bmi.n	8010a90 <_vfiprintf_r+0x220>
 8010a84:	89ab      	ldrh	r3, [r5, #12]
 8010a86:	059a      	lsls	r2, r3, #22
 8010a88:	d402      	bmi.n	8010a90 <_vfiprintf_r+0x220>
 8010a8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a8c:	f7ff fe7c 	bl	8010788 <__retarget_lock_release_recursive>
 8010a90:	89ab      	ldrh	r3, [r5, #12]
 8010a92:	065b      	lsls	r3, r3, #25
 8010a94:	f53f af12 	bmi.w	80108bc <_vfiprintf_r+0x4c>
 8010a98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a9a:	e711      	b.n	80108c0 <_vfiprintf_r+0x50>
 8010a9c:	ab03      	add	r3, sp, #12
 8010a9e:	9300      	str	r3, [sp, #0]
 8010aa0:	462a      	mov	r2, r5
 8010aa2:	4b09      	ldr	r3, [pc, #36]	; (8010ac8 <_vfiprintf_r+0x258>)
 8010aa4:	a904      	add	r1, sp, #16
 8010aa6:	4630      	mov	r0, r6
 8010aa8:	f7fc fe4c 	bl	800d744 <_printf_i>
 8010aac:	e7e4      	b.n	8010a78 <_vfiprintf_r+0x208>
 8010aae:	bf00      	nop
 8010ab0:	08011c4c 	.word	0x08011c4c
 8010ab4:	08011c6c 	.word	0x08011c6c
 8010ab8:	08011c2c 	.word	0x08011c2c
 8010abc:	08011adc 	.word	0x08011adc
 8010ac0:	08011ae6 	.word	0x08011ae6
 8010ac4:	0800d1fd 	.word	0x0800d1fd
 8010ac8:	0801084b 	.word	0x0801084b
 8010acc:	08011ae2 	.word	0x08011ae2

08010ad0 <__swbuf_r>:
 8010ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ad2:	460e      	mov	r6, r1
 8010ad4:	4614      	mov	r4, r2
 8010ad6:	4605      	mov	r5, r0
 8010ad8:	b118      	cbz	r0, 8010ae2 <__swbuf_r+0x12>
 8010ada:	6983      	ldr	r3, [r0, #24]
 8010adc:	b90b      	cbnz	r3, 8010ae2 <__swbuf_r+0x12>
 8010ade:	f000 f9d9 	bl	8010e94 <__sinit>
 8010ae2:	4b21      	ldr	r3, [pc, #132]	; (8010b68 <__swbuf_r+0x98>)
 8010ae4:	429c      	cmp	r4, r3
 8010ae6:	d12b      	bne.n	8010b40 <__swbuf_r+0x70>
 8010ae8:	686c      	ldr	r4, [r5, #4]
 8010aea:	69a3      	ldr	r3, [r4, #24]
 8010aec:	60a3      	str	r3, [r4, #8]
 8010aee:	89a3      	ldrh	r3, [r4, #12]
 8010af0:	071a      	lsls	r2, r3, #28
 8010af2:	d52f      	bpl.n	8010b54 <__swbuf_r+0x84>
 8010af4:	6923      	ldr	r3, [r4, #16]
 8010af6:	b36b      	cbz	r3, 8010b54 <__swbuf_r+0x84>
 8010af8:	6923      	ldr	r3, [r4, #16]
 8010afa:	6820      	ldr	r0, [r4, #0]
 8010afc:	1ac0      	subs	r0, r0, r3
 8010afe:	6963      	ldr	r3, [r4, #20]
 8010b00:	b2f6      	uxtb	r6, r6
 8010b02:	4283      	cmp	r3, r0
 8010b04:	4637      	mov	r7, r6
 8010b06:	dc04      	bgt.n	8010b12 <__swbuf_r+0x42>
 8010b08:	4621      	mov	r1, r4
 8010b0a:	4628      	mov	r0, r5
 8010b0c:	f000 f92e 	bl	8010d6c <_fflush_r>
 8010b10:	bb30      	cbnz	r0, 8010b60 <__swbuf_r+0x90>
 8010b12:	68a3      	ldr	r3, [r4, #8]
 8010b14:	3b01      	subs	r3, #1
 8010b16:	60a3      	str	r3, [r4, #8]
 8010b18:	6823      	ldr	r3, [r4, #0]
 8010b1a:	1c5a      	adds	r2, r3, #1
 8010b1c:	6022      	str	r2, [r4, #0]
 8010b1e:	701e      	strb	r6, [r3, #0]
 8010b20:	6963      	ldr	r3, [r4, #20]
 8010b22:	3001      	adds	r0, #1
 8010b24:	4283      	cmp	r3, r0
 8010b26:	d004      	beq.n	8010b32 <__swbuf_r+0x62>
 8010b28:	89a3      	ldrh	r3, [r4, #12]
 8010b2a:	07db      	lsls	r3, r3, #31
 8010b2c:	d506      	bpl.n	8010b3c <__swbuf_r+0x6c>
 8010b2e:	2e0a      	cmp	r6, #10
 8010b30:	d104      	bne.n	8010b3c <__swbuf_r+0x6c>
 8010b32:	4621      	mov	r1, r4
 8010b34:	4628      	mov	r0, r5
 8010b36:	f000 f919 	bl	8010d6c <_fflush_r>
 8010b3a:	b988      	cbnz	r0, 8010b60 <__swbuf_r+0x90>
 8010b3c:	4638      	mov	r0, r7
 8010b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b40:	4b0a      	ldr	r3, [pc, #40]	; (8010b6c <__swbuf_r+0x9c>)
 8010b42:	429c      	cmp	r4, r3
 8010b44:	d101      	bne.n	8010b4a <__swbuf_r+0x7a>
 8010b46:	68ac      	ldr	r4, [r5, #8]
 8010b48:	e7cf      	b.n	8010aea <__swbuf_r+0x1a>
 8010b4a:	4b09      	ldr	r3, [pc, #36]	; (8010b70 <__swbuf_r+0xa0>)
 8010b4c:	429c      	cmp	r4, r3
 8010b4e:	bf08      	it	eq
 8010b50:	68ec      	ldreq	r4, [r5, #12]
 8010b52:	e7ca      	b.n	8010aea <__swbuf_r+0x1a>
 8010b54:	4621      	mov	r1, r4
 8010b56:	4628      	mov	r0, r5
 8010b58:	f000 f80c 	bl	8010b74 <__swsetup_r>
 8010b5c:	2800      	cmp	r0, #0
 8010b5e:	d0cb      	beq.n	8010af8 <__swbuf_r+0x28>
 8010b60:	f04f 37ff 	mov.w	r7, #4294967295
 8010b64:	e7ea      	b.n	8010b3c <__swbuf_r+0x6c>
 8010b66:	bf00      	nop
 8010b68:	08011c4c 	.word	0x08011c4c
 8010b6c:	08011c6c 	.word	0x08011c6c
 8010b70:	08011c2c 	.word	0x08011c2c

08010b74 <__swsetup_r>:
 8010b74:	4b32      	ldr	r3, [pc, #200]	; (8010c40 <__swsetup_r+0xcc>)
 8010b76:	b570      	push	{r4, r5, r6, lr}
 8010b78:	681d      	ldr	r5, [r3, #0]
 8010b7a:	4606      	mov	r6, r0
 8010b7c:	460c      	mov	r4, r1
 8010b7e:	b125      	cbz	r5, 8010b8a <__swsetup_r+0x16>
 8010b80:	69ab      	ldr	r3, [r5, #24]
 8010b82:	b913      	cbnz	r3, 8010b8a <__swsetup_r+0x16>
 8010b84:	4628      	mov	r0, r5
 8010b86:	f000 f985 	bl	8010e94 <__sinit>
 8010b8a:	4b2e      	ldr	r3, [pc, #184]	; (8010c44 <__swsetup_r+0xd0>)
 8010b8c:	429c      	cmp	r4, r3
 8010b8e:	d10f      	bne.n	8010bb0 <__swsetup_r+0x3c>
 8010b90:	686c      	ldr	r4, [r5, #4]
 8010b92:	89a3      	ldrh	r3, [r4, #12]
 8010b94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b98:	0719      	lsls	r1, r3, #28
 8010b9a:	d42c      	bmi.n	8010bf6 <__swsetup_r+0x82>
 8010b9c:	06dd      	lsls	r5, r3, #27
 8010b9e:	d411      	bmi.n	8010bc4 <__swsetup_r+0x50>
 8010ba0:	2309      	movs	r3, #9
 8010ba2:	6033      	str	r3, [r6, #0]
 8010ba4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010ba8:	81a3      	strh	r3, [r4, #12]
 8010baa:	f04f 30ff 	mov.w	r0, #4294967295
 8010bae:	e03e      	b.n	8010c2e <__swsetup_r+0xba>
 8010bb0:	4b25      	ldr	r3, [pc, #148]	; (8010c48 <__swsetup_r+0xd4>)
 8010bb2:	429c      	cmp	r4, r3
 8010bb4:	d101      	bne.n	8010bba <__swsetup_r+0x46>
 8010bb6:	68ac      	ldr	r4, [r5, #8]
 8010bb8:	e7eb      	b.n	8010b92 <__swsetup_r+0x1e>
 8010bba:	4b24      	ldr	r3, [pc, #144]	; (8010c4c <__swsetup_r+0xd8>)
 8010bbc:	429c      	cmp	r4, r3
 8010bbe:	bf08      	it	eq
 8010bc0:	68ec      	ldreq	r4, [r5, #12]
 8010bc2:	e7e6      	b.n	8010b92 <__swsetup_r+0x1e>
 8010bc4:	0758      	lsls	r0, r3, #29
 8010bc6:	d512      	bpl.n	8010bee <__swsetup_r+0x7a>
 8010bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010bca:	b141      	cbz	r1, 8010bde <__swsetup_r+0x6a>
 8010bcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010bd0:	4299      	cmp	r1, r3
 8010bd2:	d002      	beq.n	8010bda <__swsetup_r+0x66>
 8010bd4:	4630      	mov	r0, r6
 8010bd6:	f7fc f991 	bl	800cefc <_free_r>
 8010bda:	2300      	movs	r3, #0
 8010bdc:	6363      	str	r3, [r4, #52]	; 0x34
 8010bde:	89a3      	ldrh	r3, [r4, #12]
 8010be0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010be4:	81a3      	strh	r3, [r4, #12]
 8010be6:	2300      	movs	r3, #0
 8010be8:	6063      	str	r3, [r4, #4]
 8010bea:	6923      	ldr	r3, [r4, #16]
 8010bec:	6023      	str	r3, [r4, #0]
 8010bee:	89a3      	ldrh	r3, [r4, #12]
 8010bf0:	f043 0308 	orr.w	r3, r3, #8
 8010bf4:	81a3      	strh	r3, [r4, #12]
 8010bf6:	6923      	ldr	r3, [r4, #16]
 8010bf8:	b94b      	cbnz	r3, 8010c0e <__swsetup_r+0x9a>
 8010bfa:	89a3      	ldrh	r3, [r4, #12]
 8010bfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c04:	d003      	beq.n	8010c0e <__swsetup_r+0x9a>
 8010c06:	4621      	mov	r1, r4
 8010c08:	4630      	mov	r0, r6
 8010c0a:	f000 fa05 	bl	8011018 <__smakebuf_r>
 8010c0e:	89a0      	ldrh	r0, [r4, #12]
 8010c10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010c14:	f010 0301 	ands.w	r3, r0, #1
 8010c18:	d00a      	beq.n	8010c30 <__swsetup_r+0xbc>
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	60a3      	str	r3, [r4, #8]
 8010c1e:	6963      	ldr	r3, [r4, #20]
 8010c20:	425b      	negs	r3, r3
 8010c22:	61a3      	str	r3, [r4, #24]
 8010c24:	6923      	ldr	r3, [r4, #16]
 8010c26:	b943      	cbnz	r3, 8010c3a <__swsetup_r+0xc6>
 8010c28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010c2c:	d1ba      	bne.n	8010ba4 <__swsetup_r+0x30>
 8010c2e:	bd70      	pop	{r4, r5, r6, pc}
 8010c30:	0781      	lsls	r1, r0, #30
 8010c32:	bf58      	it	pl
 8010c34:	6963      	ldrpl	r3, [r4, #20]
 8010c36:	60a3      	str	r3, [r4, #8]
 8010c38:	e7f4      	b.n	8010c24 <__swsetup_r+0xb0>
 8010c3a:	2000      	movs	r0, #0
 8010c3c:	e7f7      	b.n	8010c2e <__swsetup_r+0xba>
 8010c3e:	bf00      	nop
 8010c40:	20000024 	.word	0x20000024
 8010c44:	08011c4c 	.word	0x08011c4c
 8010c48:	08011c6c 	.word	0x08011c6c
 8010c4c:	08011c2c 	.word	0x08011c2c

08010c50 <abort>:
 8010c50:	b508      	push	{r3, lr}
 8010c52:	2006      	movs	r0, #6
 8010c54:	f000 fa50 	bl	80110f8 <raise>
 8010c58:	2001      	movs	r0, #1
 8010c5a:	f7f3 fe75 	bl	8004948 <_exit>
	...

08010c60 <__sflush_r>:
 8010c60:	898a      	ldrh	r2, [r1, #12]
 8010c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c66:	4605      	mov	r5, r0
 8010c68:	0710      	lsls	r0, r2, #28
 8010c6a:	460c      	mov	r4, r1
 8010c6c:	d458      	bmi.n	8010d20 <__sflush_r+0xc0>
 8010c6e:	684b      	ldr	r3, [r1, #4]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	dc05      	bgt.n	8010c80 <__sflush_r+0x20>
 8010c74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	dc02      	bgt.n	8010c80 <__sflush_r+0x20>
 8010c7a:	2000      	movs	r0, #0
 8010c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c82:	2e00      	cmp	r6, #0
 8010c84:	d0f9      	beq.n	8010c7a <__sflush_r+0x1a>
 8010c86:	2300      	movs	r3, #0
 8010c88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010c8c:	682f      	ldr	r7, [r5, #0]
 8010c8e:	602b      	str	r3, [r5, #0]
 8010c90:	d032      	beq.n	8010cf8 <__sflush_r+0x98>
 8010c92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010c94:	89a3      	ldrh	r3, [r4, #12]
 8010c96:	075a      	lsls	r2, r3, #29
 8010c98:	d505      	bpl.n	8010ca6 <__sflush_r+0x46>
 8010c9a:	6863      	ldr	r3, [r4, #4]
 8010c9c:	1ac0      	subs	r0, r0, r3
 8010c9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010ca0:	b10b      	cbz	r3, 8010ca6 <__sflush_r+0x46>
 8010ca2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010ca4:	1ac0      	subs	r0, r0, r3
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	4602      	mov	r2, r0
 8010caa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010cac:	6a21      	ldr	r1, [r4, #32]
 8010cae:	4628      	mov	r0, r5
 8010cb0:	47b0      	blx	r6
 8010cb2:	1c43      	adds	r3, r0, #1
 8010cb4:	89a3      	ldrh	r3, [r4, #12]
 8010cb6:	d106      	bne.n	8010cc6 <__sflush_r+0x66>
 8010cb8:	6829      	ldr	r1, [r5, #0]
 8010cba:	291d      	cmp	r1, #29
 8010cbc:	d82c      	bhi.n	8010d18 <__sflush_r+0xb8>
 8010cbe:	4a2a      	ldr	r2, [pc, #168]	; (8010d68 <__sflush_r+0x108>)
 8010cc0:	40ca      	lsrs	r2, r1
 8010cc2:	07d6      	lsls	r6, r2, #31
 8010cc4:	d528      	bpl.n	8010d18 <__sflush_r+0xb8>
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	6062      	str	r2, [r4, #4]
 8010cca:	04d9      	lsls	r1, r3, #19
 8010ccc:	6922      	ldr	r2, [r4, #16]
 8010cce:	6022      	str	r2, [r4, #0]
 8010cd0:	d504      	bpl.n	8010cdc <__sflush_r+0x7c>
 8010cd2:	1c42      	adds	r2, r0, #1
 8010cd4:	d101      	bne.n	8010cda <__sflush_r+0x7a>
 8010cd6:	682b      	ldr	r3, [r5, #0]
 8010cd8:	b903      	cbnz	r3, 8010cdc <__sflush_r+0x7c>
 8010cda:	6560      	str	r0, [r4, #84]	; 0x54
 8010cdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010cde:	602f      	str	r7, [r5, #0]
 8010ce0:	2900      	cmp	r1, #0
 8010ce2:	d0ca      	beq.n	8010c7a <__sflush_r+0x1a>
 8010ce4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010ce8:	4299      	cmp	r1, r3
 8010cea:	d002      	beq.n	8010cf2 <__sflush_r+0x92>
 8010cec:	4628      	mov	r0, r5
 8010cee:	f7fc f905 	bl	800cefc <_free_r>
 8010cf2:	2000      	movs	r0, #0
 8010cf4:	6360      	str	r0, [r4, #52]	; 0x34
 8010cf6:	e7c1      	b.n	8010c7c <__sflush_r+0x1c>
 8010cf8:	6a21      	ldr	r1, [r4, #32]
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	4628      	mov	r0, r5
 8010cfe:	47b0      	blx	r6
 8010d00:	1c41      	adds	r1, r0, #1
 8010d02:	d1c7      	bne.n	8010c94 <__sflush_r+0x34>
 8010d04:	682b      	ldr	r3, [r5, #0]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d0c4      	beq.n	8010c94 <__sflush_r+0x34>
 8010d0a:	2b1d      	cmp	r3, #29
 8010d0c:	d001      	beq.n	8010d12 <__sflush_r+0xb2>
 8010d0e:	2b16      	cmp	r3, #22
 8010d10:	d101      	bne.n	8010d16 <__sflush_r+0xb6>
 8010d12:	602f      	str	r7, [r5, #0]
 8010d14:	e7b1      	b.n	8010c7a <__sflush_r+0x1a>
 8010d16:	89a3      	ldrh	r3, [r4, #12]
 8010d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d1c:	81a3      	strh	r3, [r4, #12]
 8010d1e:	e7ad      	b.n	8010c7c <__sflush_r+0x1c>
 8010d20:	690f      	ldr	r7, [r1, #16]
 8010d22:	2f00      	cmp	r7, #0
 8010d24:	d0a9      	beq.n	8010c7a <__sflush_r+0x1a>
 8010d26:	0793      	lsls	r3, r2, #30
 8010d28:	680e      	ldr	r6, [r1, #0]
 8010d2a:	bf08      	it	eq
 8010d2c:	694b      	ldreq	r3, [r1, #20]
 8010d2e:	600f      	str	r7, [r1, #0]
 8010d30:	bf18      	it	ne
 8010d32:	2300      	movne	r3, #0
 8010d34:	eba6 0807 	sub.w	r8, r6, r7
 8010d38:	608b      	str	r3, [r1, #8]
 8010d3a:	f1b8 0f00 	cmp.w	r8, #0
 8010d3e:	dd9c      	ble.n	8010c7a <__sflush_r+0x1a>
 8010d40:	6a21      	ldr	r1, [r4, #32]
 8010d42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010d44:	4643      	mov	r3, r8
 8010d46:	463a      	mov	r2, r7
 8010d48:	4628      	mov	r0, r5
 8010d4a:	47b0      	blx	r6
 8010d4c:	2800      	cmp	r0, #0
 8010d4e:	dc06      	bgt.n	8010d5e <__sflush_r+0xfe>
 8010d50:	89a3      	ldrh	r3, [r4, #12]
 8010d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d56:	81a3      	strh	r3, [r4, #12]
 8010d58:	f04f 30ff 	mov.w	r0, #4294967295
 8010d5c:	e78e      	b.n	8010c7c <__sflush_r+0x1c>
 8010d5e:	4407      	add	r7, r0
 8010d60:	eba8 0800 	sub.w	r8, r8, r0
 8010d64:	e7e9      	b.n	8010d3a <__sflush_r+0xda>
 8010d66:	bf00      	nop
 8010d68:	20400001 	.word	0x20400001

08010d6c <_fflush_r>:
 8010d6c:	b538      	push	{r3, r4, r5, lr}
 8010d6e:	690b      	ldr	r3, [r1, #16]
 8010d70:	4605      	mov	r5, r0
 8010d72:	460c      	mov	r4, r1
 8010d74:	b913      	cbnz	r3, 8010d7c <_fflush_r+0x10>
 8010d76:	2500      	movs	r5, #0
 8010d78:	4628      	mov	r0, r5
 8010d7a:	bd38      	pop	{r3, r4, r5, pc}
 8010d7c:	b118      	cbz	r0, 8010d86 <_fflush_r+0x1a>
 8010d7e:	6983      	ldr	r3, [r0, #24]
 8010d80:	b90b      	cbnz	r3, 8010d86 <_fflush_r+0x1a>
 8010d82:	f000 f887 	bl	8010e94 <__sinit>
 8010d86:	4b14      	ldr	r3, [pc, #80]	; (8010dd8 <_fflush_r+0x6c>)
 8010d88:	429c      	cmp	r4, r3
 8010d8a:	d11b      	bne.n	8010dc4 <_fflush_r+0x58>
 8010d8c:	686c      	ldr	r4, [r5, #4]
 8010d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d0ef      	beq.n	8010d76 <_fflush_r+0xa>
 8010d96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010d98:	07d0      	lsls	r0, r2, #31
 8010d9a:	d404      	bmi.n	8010da6 <_fflush_r+0x3a>
 8010d9c:	0599      	lsls	r1, r3, #22
 8010d9e:	d402      	bmi.n	8010da6 <_fflush_r+0x3a>
 8010da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010da2:	f7ff fcf0 	bl	8010786 <__retarget_lock_acquire_recursive>
 8010da6:	4628      	mov	r0, r5
 8010da8:	4621      	mov	r1, r4
 8010daa:	f7ff ff59 	bl	8010c60 <__sflush_r>
 8010dae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010db0:	07da      	lsls	r2, r3, #31
 8010db2:	4605      	mov	r5, r0
 8010db4:	d4e0      	bmi.n	8010d78 <_fflush_r+0xc>
 8010db6:	89a3      	ldrh	r3, [r4, #12]
 8010db8:	059b      	lsls	r3, r3, #22
 8010dba:	d4dd      	bmi.n	8010d78 <_fflush_r+0xc>
 8010dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010dbe:	f7ff fce3 	bl	8010788 <__retarget_lock_release_recursive>
 8010dc2:	e7d9      	b.n	8010d78 <_fflush_r+0xc>
 8010dc4:	4b05      	ldr	r3, [pc, #20]	; (8010ddc <_fflush_r+0x70>)
 8010dc6:	429c      	cmp	r4, r3
 8010dc8:	d101      	bne.n	8010dce <_fflush_r+0x62>
 8010dca:	68ac      	ldr	r4, [r5, #8]
 8010dcc:	e7df      	b.n	8010d8e <_fflush_r+0x22>
 8010dce:	4b04      	ldr	r3, [pc, #16]	; (8010de0 <_fflush_r+0x74>)
 8010dd0:	429c      	cmp	r4, r3
 8010dd2:	bf08      	it	eq
 8010dd4:	68ec      	ldreq	r4, [r5, #12]
 8010dd6:	e7da      	b.n	8010d8e <_fflush_r+0x22>
 8010dd8:	08011c4c 	.word	0x08011c4c
 8010ddc:	08011c6c 	.word	0x08011c6c
 8010de0:	08011c2c 	.word	0x08011c2c

08010de4 <std>:
 8010de4:	2300      	movs	r3, #0
 8010de6:	b510      	push	{r4, lr}
 8010de8:	4604      	mov	r4, r0
 8010dea:	e9c0 3300 	strd	r3, r3, [r0]
 8010dee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010df2:	6083      	str	r3, [r0, #8]
 8010df4:	8181      	strh	r1, [r0, #12]
 8010df6:	6643      	str	r3, [r0, #100]	; 0x64
 8010df8:	81c2      	strh	r2, [r0, #14]
 8010dfa:	6183      	str	r3, [r0, #24]
 8010dfc:	4619      	mov	r1, r3
 8010dfe:	2208      	movs	r2, #8
 8010e00:	305c      	adds	r0, #92	; 0x5c
 8010e02:	f7fc f873 	bl	800ceec <memset>
 8010e06:	4b05      	ldr	r3, [pc, #20]	; (8010e1c <std+0x38>)
 8010e08:	6263      	str	r3, [r4, #36]	; 0x24
 8010e0a:	4b05      	ldr	r3, [pc, #20]	; (8010e20 <std+0x3c>)
 8010e0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8010e0e:	4b05      	ldr	r3, [pc, #20]	; (8010e24 <std+0x40>)
 8010e10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010e12:	4b05      	ldr	r3, [pc, #20]	; (8010e28 <std+0x44>)
 8010e14:	6224      	str	r4, [r4, #32]
 8010e16:	6323      	str	r3, [r4, #48]	; 0x30
 8010e18:	bd10      	pop	{r4, pc}
 8010e1a:	bf00      	nop
 8010e1c:	08011131 	.word	0x08011131
 8010e20:	08011153 	.word	0x08011153
 8010e24:	0801118b 	.word	0x0801118b
 8010e28:	080111af 	.word	0x080111af

08010e2c <_cleanup_r>:
 8010e2c:	4901      	ldr	r1, [pc, #4]	; (8010e34 <_cleanup_r+0x8>)
 8010e2e:	f000 b8af 	b.w	8010f90 <_fwalk_reent>
 8010e32:	bf00      	nop
 8010e34:	08010d6d 	.word	0x08010d6d

08010e38 <__sfmoreglue>:
 8010e38:	b570      	push	{r4, r5, r6, lr}
 8010e3a:	2268      	movs	r2, #104	; 0x68
 8010e3c:	1e4d      	subs	r5, r1, #1
 8010e3e:	4355      	muls	r5, r2
 8010e40:	460e      	mov	r6, r1
 8010e42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010e46:	f7fc f8c5 	bl	800cfd4 <_malloc_r>
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	b140      	cbz	r0, 8010e60 <__sfmoreglue+0x28>
 8010e4e:	2100      	movs	r1, #0
 8010e50:	e9c0 1600 	strd	r1, r6, [r0]
 8010e54:	300c      	adds	r0, #12
 8010e56:	60a0      	str	r0, [r4, #8]
 8010e58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010e5c:	f7fc f846 	bl	800ceec <memset>
 8010e60:	4620      	mov	r0, r4
 8010e62:	bd70      	pop	{r4, r5, r6, pc}

08010e64 <__sfp_lock_acquire>:
 8010e64:	4801      	ldr	r0, [pc, #4]	; (8010e6c <__sfp_lock_acquire+0x8>)
 8010e66:	f7ff bc8e 	b.w	8010786 <__retarget_lock_acquire_recursive>
 8010e6a:	bf00      	nop
 8010e6c:	20002b29 	.word	0x20002b29

08010e70 <__sfp_lock_release>:
 8010e70:	4801      	ldr	r0, [pc, #4]	; (8010e78 <__sfp_lock_release+0x8>)
 8010e72:	f7ff bc89 	b.w	8010788 <__retarget_lock_release_recursive>
 8010e76:	bf00      	nop
 8010e78:	20002b29 	.word	0x20002b29

08010e7c <__sinit_lock_acquire>:
 8010e7c:	4801      	ldr	r0, [pc, #4]	; (8010e84 <__sinit_lock_acquire+0x8>)
 8010e7e:	f7ff bc82 	b.w	8010786 <__retarget_lock_acquire_recursive>
 8010e82:	bf00      	nop
 8010e84:	20002b2a 	.word	0x20002b2a

08010e88 <__sinit_lock_release>:
 8010e88:	4801      	ldr	r0, [pc, #4]	; (8010e90 <__sinit_lock_release+0x8>)
 8010e8a:	f7ff bc7d 	b.w	8010788 <__retarget_lock_release_recursive>
 8010e8e:	bf00      	nop
 8010e90:	20002b2a 	.word	0x20002b2a

08010e94 <__sinit>:
 8010e94:	b510      	push	{r4, lr}
 8010e96:	4604      	mov	r4, r0
 8010e98:	f7ff fff0 	bl	8010e7c <__sinit_lock_acquire>
 8010e9c:	69a3      	ldr	r3, [r4, #24]
 8010e9e:	b11b      	cbz	r3, 8010ea8 <__sinit+0x14>
 8010ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ea4:	f7ff bff0 	b.w	8010e88 <__sinit_lock_release>
 8010ea8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010eac:	6523      	str	r3, [r4, #80]	; 0x50
 8010eae:	4b13      	ldr	r3, [pc, #76]	; (8010efc <__sinit+0x68>)
 8010eb0:	4a13      	ldr	r2, [pc, #76]	; (8010f00 <__sinit+0x6c>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8010eb6:	42a3      	cmp	r3, r4
 8010eb8:	bf04      	itt	eq
 8010eba:	2301      	moveq	r3, #1
 8010ebc:	61a3      	streq	r3, [r4, #24]
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	f000 f820 	bl	8010f04 <__sfp>
 8010ec4:	6060      	str	r0, [r4, #4]
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	f000 f81c 	bl	8010f04 <__sfp>
 8010ecc:	60a0      	str	r0, [r4, #8]
 8010ece:	4620      	mov	r0, r4
 8010ed0:	f000 f818 	bl	8010f04 <__sfp>
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	60e0      	str	r0, [r4, #12]
 8010ed8:	2104      	movs	r1, #4
 8010eda:	6860      	ldr	r0, [r4, #4]
 8010edc:	f7ff ff82 	bl	8010de4 <std>
 8010ee0:	68a0      	ldr	r0, [r4, #8]
 8010ee2:	2201      	movs	r2, #1
 8010ee4:	2109      	movs	r1, #9
 8010ee6:	f7ff ff7d 	bl	8010de4 <std>
 8010eea:	68e0      	ldr	r0, [r4, #12]
 8010eec:	2202      	movs	r2, #2
 8010eee:	2112      	movs	r1, #18
 8010ef0:	f7ff ff78 	bl	8010de4 <std>
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	61a3      	str	r3, [r4, #24]
 8010ef8:	e7d2      	b.n	8010ea0 <__sinit+0xc>
 8010efa:	bf00      	nop
 8010efc:	080117ec 	.word	0x080117ec
 8010f00:	08010e2d 	.word	0x08010e2d

08010f04 <__sfp>:
 8010f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f06:	4607      	mov	r7, r0
 8010f08:	f7ff ffac 	bl	8010e64 <__sfp_lock_acquire>
 8010f0c:	4b1e      	ldr	r3, [pc, #120]	; (8010f88 <__sfp+0x84>)
 8010f0e:	681e      	ldr	r6, [r3, #0]
 8010f10:	69b3      	ldr	r3, [r6, #24]
 8010f12:	b913      	cbnz	r3, 8010f1a <__sfp+0x16>
 8010f14:	4630      	mov	r0, r6
 8010f16:	f7ff ffbd 	bl	8010e94 <__sinit>
 8010f1a:	3648      	adds	r6, #72	; 0x48
 8010f1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010f20:	3b01      	subs	r3, #1
 8010f22:	d503      	bpl.n	8010f2c <__sfp+0x28>
 8010f24:	6833      	ldr	r3, [r6, #0]
 8010f26:	b30b      	cbz	r3, 8010f6c <__sfp+0x68>
 8010f28:	6836      	ldr	r6, [r6, #0]
 8010f2a:	e7f7      	b.n	8010f1c <__sfp+0x18>
 8010f2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010f30:	b9d5      	cbnz	r5, 8010f68 <__sfp+0x64>
 8010f32:	4b16      	ldr	r3, [pc, #88]	; (8010f8c <__sfp+0x88>)
 8010f34:	60e3      	str	r3, [r4, #12]
 8010f36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010f3a:	6665      	str	r5, [r4, #100]	; 0x64
 8010f3c:	f7ff fc22 	bl	8010784 <__retarget_lock_init_recursive>
 8010f40:	f7ff ff96 	bl	8010e70 <__sfp_lock_release>
 8010f44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010f48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010f4c:	6025      	str	r5, [r4, #0]
 8010f4e:	61a5      	str	r5, [r4, #24]
 8010f50:	2208      	movs	r2, #8
 8010f52:	4629      	mov	r1, r5
 8010f54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010f58:	f7fb ffc8 	bl	800ceec <memset>
 8010f5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010f60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010f64:	4620      	mov	r0, r4
 8010f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f68:	3468      	adds	r4, #104	; 0x68
 8010f6a:	e7d9      	b.n	8010f20 <__sfp+0x1c>
 8010f6c:	2104      	movs	r1, #4
 8010f6e:	4638      	mov	r0, r7
 8010f70:	f7ff ff62 	bl	8010e38 <__sfmoreglue>
 8010f74:	4604      	mov	r4, r0
 8010f76:	6030      	str	r0, [r6, #0]
 8010f78:	2800      	cmp	r0, #0
 8010f7a:	d1d5      	bne.n	8010f28 <__sfp+0x24>
 8010f7c:	f7ff ff78 	bl	8010e70 <__sfp_lock_release>
 8010f80:	230c      	movs	r3, #12
 8010f82:	603b      	str	r3, [r7, #0]
 8010f84:	e7ee      	b.n	8010f64 <__sfp+0x60>
 8010f86:	bf00      	nop
 8010f88:	080117ec 	.word	0x080117ec
 8010f8c:	ffff0001 	.word	0xffff0001

08010f90 <_fwalk_reent>:
 8010f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f94:	4606      	mov	r6, r0
 8010f96:	4688      	mov	r8, r1
 8010f98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010f9c:	2700      	movs	r7, #0
 8010f9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010fa2:	f1b9 0901 	subs.w	r9, r9, #1
 8010fa6:	d505      	bpl.n	8010fb4 <_fwalk_reent+0x24>
 8010fa8:	6824      	ldr	r4, [r4, #0]
 8010faa:	2c00      	cmp	r4, #0
 8010fac:	d1f7      	bne.n	8010f9e <_fwalk_reent+0xe>
 8010fae:	4638      	mov	r0, r7
 8010fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fb4:	89ab      	ldrh	r3, [r5, #12]
 8010fb6:	2b01      	cmp	r3, #1
 8010fb8:	d907      	bls.n	8010fca <_fwalk_reent+0x3a>
 8010fba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010fbe:	3301      	adds	r3, #1
 8010fc0:	d003      	beq.n	8010fca <_fwalk_reent+0x3a>
 8010fc2:	4629      	mov	r1, r5
 8010fc4:	4630      	mov	r0, r6
 8010fc6:	47c0      	blx	r8
 8010fc8:	4307      	orrs	r7, r0
 8010fca:	3568      	adds	r5, #104	; 0x68
 8010fcc:	e7e9      	b.n	8010fa2 <_fwalk_reent+0x12>

08010fce <__swhatbuf_r>:
 8010fce:	b570      	push	{r4, r5, r6, lr}
 8010fd0:	460e      	mov	r6, r1
 8010fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fd6:	2900      	cmp	r1, #0
 8010fd8:	b096      	sub	sp, #88	; 0x58
 8010fda:	4614      	mov	r4, r2
 8010fdc:	461d      	mov	r5, r3
 8010fde:	da08      	bge.n	8010ff2 <__swhatbuf_r+0x24>
 8010fe0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	602a      	str	r2, [r5, #0]
 8010fe8:	061a      	lsls	r2, r3, #24
 8010fea:	d410      	bmi.n	801100e <__swhatbuf_r+0x40>
 8010fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ff0:	e00e      	b.n	8011010 <__swhatbuf_r+0x42>
 8010ff2:	466a      	mov	r2, sp
 8010ff4:	f000 f902 	bl	80111fc <_fstat_r>
 8010ff8:	2800      	cmp	r0, #0
 8010ffa:	dbf1      	blt.n	8010fe0 <__swhatbuf_r+0x12>
 8010ffc:	9a01      	ldr	r2, [sp, #4]
 8010ffe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011002:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011006:	425a      	negs	r2, r3
 8011008:	415a      	adcs	r2, r3
 801100a:	602a      	str	r2, [r5, #0]
 801100c:	e7ee      	b.n	8010fec <__swhatbuf_r+0x1e>
 801100e:	2340      	movs	r3, #64	; 0x40
 8011010:	2000      	movs	r0, #0
 8011012:	6023      	str	r3, [r4, #0]
 8011014:	b016      	add	sp, #88	; 0x58
 8011016:	bd70      	pop	{r4, r5, r6, pc}

08011018 <__smakebuf_r>:
 8011018:	898b      	ldrh	r3, [r1, #12]
 801101a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801101c:	079d      	lsls	r5, r3, #30
 801101e:	4606      	mov	r6, r0
 8011020:	460c      	mov	r4, r1
 8011022:	d507      	bpl.n	8011034 <__smakebuf_r+0x1c>
 8011024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011028:	6023      	str	r3, [r4, #0]
 801102a:	6123      	str	r3, [r4, #16]
 801102c:	2301      	movs	r3, #1
 801102e:	6163      	str	r3, [r4, #20]
 8011030:	b002      	add	sp, #8
 8011032:	bd70      	pop	{r4, r5, r6, pc}
 8011034:	ab01      	add	r3, sp, #4
 8011036:	466a      	mov	r2, sp
 8011038:	f7ff ffc9 	bl	8010fce <__swhatbuf_r>
 801103c:	9900      	ldr	r1, [sp, #0]
 801103e:	4605      	mov	r5, r0
 8011040:	4630      	mov	r0, r6
 8011042:	f7fb ffc7 	bl	800cfd4 <_malloc_r>
 8011046:	b948      	cbnz	r0, 801105c <__smakebuf_r+0x44>
 8011048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801104c:	059a      	lsls	r2, r3, #22
 801104e:	d4ef      	bmi.n	8011030 <__smakebuf_r+0x18>
 8011050:	f023 0303 	bic.w	r3, r3, #3
 8011054:	f043 0302 	orr.w	r3, r3, #2
 8011058:	81a3      	strh	r3, [r4, #12]
 801105a:	e7e3      	b.n	8011024 <__smakebuf_r+0xc>
 801105c:	4b0d      	ldr	r3, [pc, #52]	; (8011094 <__smakebuf_r+0x7c>)
 801105e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011060:	89a3      	ldrh	r3, [r4, #12]
 8011062:	6020      	str	r0, [r4, #0]
 8011064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011068:	81a3      	strh	r3, [r4, #12]
 801106a:	9b00      	ldr	r3, [sp, #0]
 801106c:	6163      	str	r3, [r4, #20]
 801106e:	9b01      	ldr	r3, [sp, #4]
 8011070:	6120      	str	r0, [r4, #16]
 8011072:	b15b      	cbz	r3, 801108c <__smakebuf_r+0x74>
 8011074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011078:	4630      	mov	r0, r6
 801107a:	f000 f8d1 	bl	8011220 <_isatty_r>
 801107e:	b128      	cbz	r0, 801108c <__smakebuf_r+0x74>
 8011080:	89a3      	ldrh	r3, [r4, #12]
 8011082:	f023 0303 	bic.w	r3, r3, #3
 8011086:	f043 0301 	orr.w	r3, r3, #1
 801108a:	81a3      	strh	r3, [r4, #12]
 801108c:	89a0      	ldrh	r0, [r4, #12]
 801108e:	4305      	orrs	r5, r0
 8011090:	81a5      	strh	r5, [r4, #12]
 8011092:	e7cd      	b.n	8011030 <__smakebuf_r+0x18>
 8011094:	08010e2d 	.word	0x08010e2d

08011098 <_malloc_usable_size_r>:
 8011098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801109c:	1f18      	subs	r0, r3, #4
 801109e:	2b00      	cmp	r3, #0
 80110a0:	bfbc      	itt	lt
 80110a2:	580b      	ldrlt	r3, [r1, r0]
 80110a4:	18c0      	addlt	r0, r0, r3
 80110a6:	4770      	bx	lr

080110a8 <_raise_r>:
 80110a8:	291f      	cmp	r1, #31
 80110aa:	b538      	push	{r3, r4, r5, lr}
 80110ac:	4604      	mov	r4, r0
 80110ae:	460d      	mov	r5, r1
 80110b0:	d904      	bls.n	80110bc <_raise_r+0x14>
 80110b2:	2316      	movs	r3, #22
 80110b4:	6003      	str	r3, [r0, #0]
 80110b6:	f04f 30ff 	mov.w	r0, #4294967295
 80110ba:	bd38      	pop	{r3, r4, r5, pc}
 80110bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80110be:	b112      	cbz	r2, 80110c6 <_raise_r+0x1e>
 80110c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80110c4:	b94b      	cbnz	r3, 80110da <_raise_r+0x32>
 80110c6:	4620      	mov	r0, r4
 80110c8:	f000 f830 	bl	801112c <_getpid_r>
 80110cc:	462a      	mov	r2, r5
 80110ce:	4601      	mov	r1, r0
 80110d0:	4620      	mov	r0, r4
 80110d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110d6:	f000 b817 	b.w	8011108 <_kill_r>
 80110da:	2b01      	cmp	r3, #1
 80110dc:	d00a      	beq.n	80110f4 <_raise_r+0x4c>
 80110de:	1c59      	adds	r1, r3, #1
 80110e0:	d103      	bne.n	80110ea <_raise_r+0x42>
 80110e2:	2316      	movs	r3, #22
 80110e4:	6003      	str	r3, [r0, #0]
 80110e6:	2001      	movs	r0, #1
 80110e8:	e7e7      	b.n	80110ba <_raise_r+0x12>
 80110ea:	2400      	movs	r4, #0
 80110ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80110f0:	4628      	mov	r0, r5
 80110f2:	4798      	blx	r3
 80110f4:	2000      	movs	r0, #0
 80110f6:	e7e0      	b.n	80110ba <_raise_r+0x12>

080110f8 <raise>:
 80110f8:	4b02      	ldr	r3, [pc, #8]	; (8011104 <raise+0xc>)
 80110fa:	4601      	mov	r1, r0
 80110fc:	6818      	ldr	r0, [r3, #0]
 80110fe:	f7ff bfd3 	b.w	80110a8 <_raise_r>
 8011102:	bf00      	nop
 8011104:	20000024 	.word	0x20000024

08011108 <_kill_r>:
 8011108:	b538      	push	{r3, r4, r5, lr}
 801110a:	4d07      	ldr	r5, [pc, #28]	; (8011128 <_kill_r+0x20>)
 801110c:	2300      	movs	r3, #0
 801110e:	4604      	mov	r4, r0
 8011110:	4608      	mov	r0, r1
 8011112:	4611      	mov	r1, r2
 8011114:	602b      	str	r3, [r5, #0]
 8011116:	f7f3 fc07 	bl	8004928 <_kill>
 801111a:	1c43      	adds	r3, r0, #1
 801111c:	d102      	bne.n	8011124 <_kill_r+0x1c>
 801111e:	682b      	ldr	r3, [r5, #0]
 8011120:	b103      	cbz	r3, 8011124 <_kill_r+0x1c>
 8011122:	6023      	str	r3, [r4, #0]
 8011124:	bd38      	pop	{r3, r4, r5, pc}
 8011126:	bf00      	nop
 8011128:	20002b24 	.word	0x20002b24

0801112c <_getpid_r>:
 801112c:	f7f3 bbf4 	b.w	8004918 <_getpid>

08011130 <__sread>:
 8011130:	b510      	push	{r4, lr}
 8011132:	460c      	mov	r4, r1
 8011134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011138:	f000 f894 	bl	8011264 <_read_r>
 801113c:	2800      	cmp	r0, #0
 801113e:	bfab      	itete	ge
 8011140:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011142:	89a3      	ldrhlt	r3, [r4, #12]
 8011144:	181b      	addge	r3, r3, r0
 8011146:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801114a:	bfac      	ite	ge
 801114c:	6563      	strge	r3, [r4, #84]	; 0x54
 801114e:	81a3      	strhlt	r3, [r4, #12]
 8011150:	bd10      	pop	{r4, pc}

08011152 <__swrite>:
 8011152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011156:	461f      	mov	r7, r3
 8011158:	898b      	ldrh	r3, [r1, #12]
 801115a:	05db      	lsls	r3, r3, #23
 801115c:	4605      	mov	r5, r0
 801115e:	460c      	mov	r4, r1
 8011160:	4616      	mov	r6, r2
 8011162:	d505      	bpl.n	8011170 <__swrite+0x1e>
 8011164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011168:	2302      	movs	r3, #2
 801116a:	2200      	movs	r2, #0
 801116c:	f000 f868 	bl	8011240 <_lseek_r>
 8011170:	89a3      	ldrh	r3, [r4, #12]
 8011172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801117a:	81a3      	strh	r3, [r4, #12]
 801117c:	4632      	mov	r2, r6
 801117e:	463b      	mov	r3, r7
 8011180:	4628      	mov	r0, r5
 8011182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011186:	f000 b817 	b.w	80111b8 <_write_r>

0801118a <__sseek>:
 801118a:	b510      	push	{r4, lr}
 801118c:	460c      	mov	r4, r1
 801118e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011192:	f000 f855 	bl	8011240 <_lseek_r>
 8011196:	1c43      	adds	r3, r0, #1
 8011198:	89a3      	ldrh	r3, [r4, #12]
 801119a:	bf15      	itete	ne
 801119c:	6560      	strne	r0, [r4, #84]	; 0x54
 801119e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80111a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80111a6:	81a3      	strheq	r3, [r4, #12]
 80111a8:	bf18      	it	ne
 80111aa:	81a3      	strhne	r3, [r4, #12]
 80111ac:	bd10      	pop	{r4, pc}

080111ae <__sclose>:
 80111ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111b2:	f000 b813 	b.w	80111dc <_close_r>
	...

080111b8 <_write_r>:
 80111b8:	b538      	push	{r3, r4, r5, lr}
 80111ba:	4d07      	ldr	r5, [pc, #28]	; (80111d8 <_write_r+0x20>)
 80111bc:	4604      	mov	r4, r0
 80111be:	4608      	mov	r0, r1
 80111c0:	4611      	mov	r1, r2
 80111c2:	2200      	movs	r2, #0
 80111c4:	602a      	str	r2, [r5, #0]
 80111c6:	461a      	mov	r2, r3
 80111c8:	f7f3 fbe5 	bl	8004996 <_write>
 80111cc:	1c43      	adds	r3, r0, #1
 80111ce:	d102      	bne.n	80111d6 <_write_r+0x1e>
 80111d0:	682b      	ldr	r3, [r5, #0]
 80111d2:	b103      	cbz	r3, 80111d6 <_write_r+0x1e>
 80111d4:	6023      	str	r3, [r4, #0]
 80111d6:	bd38      	pop	{r3, r4, r5, pc}
 80111d8:	20002b24 	.word	0x20002b24

080111dc <_close_r>:
 80111dc:	b538      	push	{r3, r4, r5, lr}
 80111de:	4d06      	ldr	r5, [pc, #24]	; (80111f8 <_close_r+0x1c>)
 80111e0:	2300      	movs	r3, #0
 80111e2:	4604      	mov	r4, r0
 80111e4:	4608      	mov	r0, r1
 80111e6:	602b      	str	r3, [r5, #0]
 80111e8:	f7f3 fbf1 	bl	80049ce <_close>
 80111ec:	1c43      	adds	r3, r0, #1
 80111ee:	d102      	bne.n	80111f6 <_close_r+0x1a>
 80111f0:	682b      	ldr	r3, [r5, #0]
 80111f2:	b103      	cbz	r3, 80111f6 <_close_r+0x1a>
 80111f4:	6023      	str	r3, [r4, #0]
 80111f6:	bd38      	pop	{r3, r4, r5, pc}
 80111f8:	20002b24 	.word	0x20002b24

080111fc <_fstat_r>:
 80111fc:	b538      	push	{r3, r4, r5, lr}
 80111fe:	4d07      	ldr	r5, [pc, #28]	; (801121c <_fstat_r+0x20>)
 8011200:	2300      	movs	r3, #0
 8011202:	4604      	mov	r4, r0
 8011204:	4608      	mov	r0, r1
 8011206:	4611      	mov	r1, r2
 8011208:	602b      	str	r3, [r5, #0]
 801120a:	f7f3 fbec 	bl	80049e6 <_fstat>
 801120e:	1c43      	adds	r3, r0, #1
 8011210:	d102      	bne.n	8011218 <_fstat_r+0x1c>
 8011212:	682b      	ldr	r3, [r5, #0]
 8011214:	b103      	cbz	r3, 8011218 <_fstat_r+0x1c>
 8011216:	6023      	str	r3, [r4, #0]
 8011218:	bd38      	pop	{r3, r4, r5, pc}
 801121a:	bf00      	nop
 801121c:	20002b24 	.word	0x20002b24

08011220 <_isatty_r>:
 8011220:	b538      	push	{r3, r4, r5, lr}
 8011222:	4d06      	ldr	r5, [pc, #24]	; (801123c <_isatty_r+0x1c>)
 8011224:	2300      	movs	r3, #0
 8011226:	4604      	mov	r4, r0
 8011228:	4608      	mov	r0, r1
 801122a:	602b      	str	r3, [r5, #0]
 801122c:	f7f3 fbeb 	bl	8004a06 <_isatty>
 8011230:	1c43      	adds	r3, r0, #1
 8011232:	d102      	bne.n	801123a <_isatty_r+0x1a>
 8011234:	682b      	ldr	r3, [r5, #0]
 8011236:	b103      	cbz	r3, 801123a <_isatty_r+0x1a>
 8011238:	6023      	str	r3, [r4, #0]
 801123a:	bd38      	pop	{r3, r4, r5, pc}
 801123c:	20002b24 	.word	0x20002b24

08011240 <_lseek_r>:
 8011240:	b538      	push	{r3, r4, r5, lr}
 8011242:	4d07      	ldr	r5, [pc, #28]	; (8011260 <_lseek_r+0x20>)
 8011244:	4604      	mov	r4, r0
 8011246:	4608      	mov	r0, r1
 8011248:	4611      	mov	r1, r2
 801124a:	2200      	movs	r2, #0
 801124c:	602a      	str	r2, [r5, #0]
 801124e:	461a      	mov	r2, r3
 8011250:	f7f3 fbe4 	bl	8004a1c <_lseek>
 8011254:	1c43      	adds	r3, r0, #1
 8011256:	d102      	bne.n	801125e <_lseek_r+0x1e>
 8011258:	682b      	ldr	r3, [r5, #0]
 801125a:	b103      	cbz	r3, 801125e <_lseek_r+0x1e>
 801125c:	6023      	str	r3, [r4, #0]
 801125e:	bd38      	pop	{r3, r4, r5, pc}
 8011260:	20002b24 	.word	0x20002b24

08011264 <_read_r>:
 8011264:	b538      	push	{r3, r4, r5, lr}
 8011266:	4d07      	ldr	r5, [pc, #28]	; (8011284 <_read_r+0x20>)
 8011268:	4604      	mov	r4, r0
 801126a:	4608      	mov	r0, r1
 801126c:	4611      	mov	r1, r2
 801126e:	2200      	movs	r2, #0
 8011270:	602a      	str	r2, [r5, #0]
 8011272:	461a      	mov	r2, r3
 8011274:	f7f3 fb72 	bl	800495c <_read>
 8011278:	1c43      	adds	r3, r0, #1
 801127a:	d102      	bne.n	8011282 <_read_r+0x1e>
 801127c:	682b      	ldr	r3, [r5, #0]
 801127e:	b103      	cbz	r3, 8011282 <_read_r+0x1e>
 8011280:	6023      	str	r3, [r4, #0]
 8011282:	bd38      	pop	{r3, r4, r5, pc}
 8011284:	20002b24 	.word	0x20002b24

08011288 <_init>:
 8011288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801128a:	bf00      	nop
 801128c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801128e:	bc08      	pop	{r3}
 8011290:	469e      	mov	lr, r3
 8011292:	4770      	bx	lr

08011294 <_fini>:
 8011294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011296:	bf00      	nop
 8011298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801129a:	bc08      	pop	{r3}
 801129c:	469e      	mov	lr, r3
 801129e:	4770      	bx	lr
